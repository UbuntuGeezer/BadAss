<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE script:module PUBLIC "-//OpenOffice.org//DTD OfficeDocument 1.0//EN" "module.dtd">
<script:module xmlns:script="http://openoffice.org/2000/script" script:name="Module2" script:language="StarBasic">REM  *****  BASIC  *****
&apos;// Module2Hdr.bas
&apos;// Module2 code (complete with publics_2) for dialogs.
&apos;// 
&apos;// Modification History.
&apos;// ---------------------
&apos;// 4/20/25.	wmk.	&quot;in library&quot; mods; superfluous dot bas references removed.
&apos;// 7/5/20.		wmk.	Module2 subs/function index added.
&apos;//
&apos;//	Module2 subs/functions index.	7/5/20.
&apos;//
&apos;//	Main - Module2 Main - clear pbDlgLibLoaded flag.
&apos;// F - First attempt at dialog box processing. (COADialog)
&apos;// RunCOADlg - Run COA Dialog.
&apos;// G - Enter Transaction Dialog test procedure.
&apos;// H - Split Transaction Dialog test procedure.
&apos;// ETAmountListener - Event handler &lt;amount&gt; from Enter Transaction.
&apos;// ETPubVarsReset - Reset all ET dialog public vars and flags
&apos;// ETCancelListener - Event handler &lt;Cancel&gt; from Enter Transaction.
&apos;//
&apos;/**/
&apos;// publics2.bas
&apos;//---------------publics_2---------------------------------
&apos;// Module2 public vars and constants
&apos;//		7/6/20.		wmk.	07:15
&apos;//
&apos;//	Modification History.
&apos;// ---------------------
&apos;//	6/17/20.	wmk.	arrays added for splitting transactions
&apos;//	6/18/20.	wmk.	publics added for SplitDialog handling
&apos;// 6/20/20.	wmk.	gsSTRefs added for reference field support;
&apos;//						gsSTObjFocus added to attempt code generalization
&apos;//	6/24/20.	wmk		gdETAmount added; gsETAmount deleted for numeric
&apos;//						field support on data entry; gbETSplitTrans 
&apos;//						spelling corrected
&apos;//	6/26/20.	wmk.	VS dialog support added
&apos;//	6/27/20.	wmk.	MEDGRAY color constant added; gbSTEditMode flag
&apos;//						added to initialize with public vars set from
&apos;//						previous dialog instance
&apos;//	7/5/20.		wmk.	subs/functions documentation added to header
&apos;//	7/6/20.		wmk.	const COA_COLROWS added

&apos;// color constants.
public const MEDGRAY=13421722
public const NOFILL = -1

&apos;// chart of accounts access and control (LoadCOAs function)
&apos;public goCOARangePtr As com.sun.star.table.CellAddress
public const	COA_SHEET=&quot;Chart of Accounts&quot;
public const	COA_COLSTART=3		&apos;//A9
public const	COA_ROWSTART=7
public const	COA_COLROWS=5		&apos;// column with COA row count
public const	sCOA_1STROWID=&quot;BEGIN COA&quot;
public const	sCOA_LASTROWID=&quot;END OF COA&quot;
public const	COA_NASSETS=14		&apos;// assets count
public const	COA_NLIABILITIES=20	&apos;// liabilities count
public const	COA_NINCOME=13		&apos;// income count
public const	COA_NEXPENSES=29	&apos;// expenses count

&apos;// Enter Transaction dialog publics.
public puoETDialog		As Object		&apos;// ET dialog object
public gbETDateEntered	As Boolean		&apos;// date field entered flag
public gbETDescEntered	As Boolean		&apos;// description entered flag
public gbETAmtEntered	As Boolean		&apos;// amount entered flag
public gbETCOA1Entered	As Boolean		&apos;// Debit COA entered flag
public gbETCOA2Entered	As Boolean		&apos;// Credit COA entered flag
public gbETRefEntered 	As Boolean		&apos;// refereince entered flag
public gbETSplitTrans	As Boolean		&apos;// split transaction flag
public gsETSplitCOAs (0) As String		&apos;// list of COAs for split
public gsETSplitAmts (0)				&apos;// list of amounts in split
public gsETSplitDescs (0)				&apos;// list of descriptions in split
public gbETDebitIsTotal As Boolean		&apos;// Debit is total; credits split
&apos;//	ET dialog stored values.
public gsETDate As String				&apos;// date entered
public gsETDescription As String		&apos;// description entered
&apos;public gsETAmount As String			&apos;// debit and credit amt entered
public gdETAmount As Double				&apos;// debit and credit amt entered
public gsETAcct1 As String				&apos;// COA1 account
public gsETAcct2 As String				&apos;// COA2 account
public gsETRef As String				&apos;// reference text

&apos;// Split Transaction dialog publics.
public puoSTDialog		As Object		&apos;// ST dialog object
public gbSTEditMode		As Boolean		&apos;// ST edit mode flag

&apos;// ST dialog stored values.
public gdSTAccumTot		As Double		&apos;// split accumulated total
public gdSTTotalAmt		As Double		&apos;// total amount to split
public gbSTSplitCredits	As Boolean		&apos;// credit values are splits flag
public giSTLastIx		As Integer		&apos;// last active row index for input
public gsSTAcctFocus	As String		&apos;// COA field name got Focus
public gsSTObjFocus		As String		&apos;// set when object gets focus
public gsSTDescs(0)		As String		&apos;// array of split descriptions
public gdSTAmts(0)		As Double		&apos;// array of amounts
public gsSTCOAs(0)		As String		&apos;// array of COAs
public gsSTRefs(0)		As String		&apos;// array of Refs

&apos;// View Split dialog publics.
public puoVSDialog		As Object		&apos;// VS dialog object

&apos;// COA dialog publics.
public pbDlgLibLoaded	As Boolean	&apos;// dialogs loaded flag
public pbCOADlgExists	As Boolean	&apos;// COA dialog exists flag
public puoCOADialog 	As Object	&apos;// COA dialog box
public pusCOAList(0)	As String	&apos;// COA Account strings
public puoCOASelectBtn	As Object	&apos;// &lt;Select&gt; button

&apos;// vars for dialogues interface to accounting package

public puoCOAListBox As Object		&apos;// COA list box object in active form
public pusCOASelected As String		&apos;// COA selected from list box (..Listener.bas)
public pbETActive	 AS Boolean		&apos;// ET dialog active flag
public pbETDebitList	As Boolean	&apos;// debit list COA button
public pbETCreditList	As Boolean	&apos;// credit list COA button

OPTION EXPLICIT				&apos;// code protection

&apos;//--------------end publics_2.bas----7/6/20--------------------------
&apos;/**/
&apos;// Main.bas
&apos;// COPY CODE FROM MAIN TO COASelectListener, COACancelListener
&apos;//---------------------------------------------------------------------
&apos;//	Main - Module2 Main - clear pbDlgLibLoaded flag.
&apos;//			7/5/20.	wmk.	
&apos;//---------------------------------------------------------------------

Sub Main
	pbDlgLibLoaded = false
End Sub		&apos;// end Main	7/5/20
&apos;/**/
&apos;// COACancelListener.bas
&apos;//--------------------------------------------------------------------
&apos;// COACancelListener - Event handler when &lt;Cancel&gt; from COA selection.
&apos;//		9/7/22.	wmk.	17:26
&apos;//--------------------------------------------------------------------

public sub COACancelListener()

&apos;//	Usage.	macro call or
&apos;//			call COACancelListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user clicked &lt;Cancel&gt; in COA dialog
&apos;//			puoCOADialog = COA dialog box object
&apos;//
&apos;//	Exit.	pusCOASelected = &quot;&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/7/22.		wmk.	this control behaves like &quot;Cancel&quot;; the
&apos;//				 dialog has been dropped and disposed.
&apos;// Legacy mods.
&apos;//	6/13/20.	wmk.	original code
&apos;//	6/15/20.	wmk.	code modified to emulate Cancel type button
&apos;//
&apos;//	Notes. This sub is the linked macro to the Execute() event linked
&apos;// to the &lt;Cancel&gt; button in the COA selection dialog. If the &lt;Cancel&gt;
&apos;// button is also defined as type = 2, CANCEL it will drop the dialog
&apos;// from the screen with returned value 0. If not, this event handler
&apos;// be called and will emulate that process.

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	pusCOASelected = &quot;&quot;		&apos;// clear COA selection string
&apos;	msgBox(&quot;In Module2/COACancelListener&quot; + CHR(13)+CHR(10) _
&apos;        + &quot;&apos;&quot;+pusCOASelected+&quot;&apos;&quot; + &quot; selected&quot;)
&apos;	puoCOADialog.endDialog(0)	&apos;// end dialog as though cancelled	

end sub		&apos;// end COACancelListener	6/13/20
&apos;/**/
&apos;// COAListBoxListener.bas
&apos;//--------------------------------------------------------------------
&apos;// COAListBoxListener - Event handler when &lt;Cancel&gt; from COA selection.
&apos;//		9/8/22.	wmk.	16:01
&apos;//--------------------------------------------------------------------

public sub COAListBoxListener()

&apos;//	Usage.	macro call or
&apos;//			call COAListBoxListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialog where
&apos;//			user selecting COA account from listbox
&apos;//			puoCOASelectBtn = &lt;Select&gt; button object in dialog
&apos;//			pbETActive = true if ET dialog active (implies update
&apos;//			 of ET dialog .DebitField or .CreditField
&apos;//			pbETDebitList = true; update .DebitField
&apos;//			pbETCreditList = true; update .CreditField
&apos;//
&apos;//	Exit.	pusCOASelected = &quot;&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/7/22.		wmk.	pusCOASelected, puoETDialog.DebitField.Text = selection.
&apos;// 9/8/22.		wmk.	pbETActive flag used to distinguish between ET call
&apos;//				 and ledger sheet call.
&apos;// Legacy mods.
&apos;//	6/13/20.		wmk.	original code.
&apos;//
&apos;//	Notes. This sub is the linked macro to the StatusChanged() event linked
&apos;// to the &lt;COAList&gt; listbox in the COA selection dialog. This event
&apos;// activates the &lt;Select&gt; button in the dialog.

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	puoCOASelectBtn.Model.Enabled = true	&apos;// enable &lt;Select&gt; button

	if not pbETActive then
dim oDocument	AS Object
dim oSel		AS Object
dim oRange		AS Object
dim oCell		AS Object
dim iSheetIx	AS Integer
	  oDocument=ThisComponent
	  oSel = oDocument.getCurrentSelection()
	  oRange = oSel.RangeAddress
	  iSheetIx = oRange.Sheet
	  oCell = oDocument.Sheets(iSheetIx).getCellByPosition(oRange.StartColumn,oRange.StartRow)
  	  oCell.String = puoCOAListBox.SelectedItem
&apos;	endif	&apos;// not ET calling
	else	&apos;//    if pbETActive then
    	if pbETDebitList then
	 puoETDialog.Model.DebitField.Text = left(puoCOAListBox.SelectedItem,4)
	 	else
	 puoETDialog.Model.CreditField.Text = left(puoCOAListBox.SelectedItem,4)
	 	endif
	endif		&apos;// pbETActive
end sub		&apos;// end COAListBoxListener	9/8/22
&apos;/**/
&apos;// COASelectListener.bas
&apos;//--------------------------------------------------------------------
&apos;// COASelectListener - Event handler when &lt;Select&gt; from COA selection.
&apos;//		9/7/22.	wmk.	17:24
&apos;//--------------------------------------------------------------------

public sub COASelectListener()

&apos;//	Usage.	macro call or
&apos;//			call COASelectListener()
&apos;//
&apos;// Entry.	puoCOAListBox.SelectedItem = item selection from dialog
&apos;//			puoCOADialog = COA dialog box object
&apos;//
&apos;//	Exit.	pusCOASelected = puoCOAListBox.SelectedItem
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/7/22.		wmk.	this event is fired as if &quot;OK&quot; were selected;
&apos;//				 the dialog box has been ended normally and closed.
&apos;// Legacy mods.
&apos;//	6/13/20.	wmk.	original code
&apos;//	6/14/20.	wmk.	close dialog code added
&apos;// 6/17/20.	wmk.	debug msgBox disabled
&apos;//
&apos;//	Notes. This sub is the linked macro to the Execute() event linked
&apos;// to the &lt;Select&gt; button in the COA selection dialog. The &lt;Select&gt;
&apos;// button is also defined as type = 1 (OK), and will drop the dialog.

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	pusCOASelected = puoCOAListBox.SelectedItem
&apos;	msgBox(&quot;In Module2/COASelectListener&quot; + CHR(13)+CHR(10) _
&apos;        + pusCOASelected + &quot; selected&quot;)
	puoCOADialog.endDialog(1)				&apos;// close dialog when Select
	puoCOADialog.Dispose					&apos;// release instance
NormalExit:
    exit sub
ErrorHandler:
	msgbox(&quot;COASelectListener - unprocessed error.&quot;)
	GOTO NormalExit
end sub		&apos;// end COASelectListener	6/17/20
&apos;/**/
&apos;// ETAmountListener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETAmountListener - Event handler &lt;amount&gt; from Enter Transaction.
&apos;//		6/24/20.	wmk.	17:45
&apos;//---------------------------------------------------------------------

public sub ETAmountListener()

&apos;//	Usage.	macro call or
&apos;//			call ETAmountListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user changed the &lt;amount&gt; field in Enter Transaction
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	gdETAmount = entered amount
&apos;//			gbETAmtEntered = true if nonempty string
&apos;//
&apos;// Calls.	ETCheckComplete
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/15/20.	wmk.	original code
&apos;// 6/17/20.	wmk.	bug fix enabling &lt;record&gt; buttons
&apos;//	6/24/20.	wmk.	change to use type Double gdETAmount
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;debit&gt; text field in the Enter Transaction dialog.

&apos;//	constants.
dim bFormComplete	As Boolean		&apos;// all fields complete flag
dim oETDlgCtrl		As Object		&apos;// reusable field object
dim oETRecordBtn	As Object		&apos;// Record &amp;&apos; Finish button
dim oETRecordCont	As Object		&apos;// Record &amp;&apos; Continue button

&apos;//	local variables.

	&apos;// code.
	oETDlgCtrl = puoETDialog.getControl(&quot;AmtField1&quot;)
	gdETAmount = oETDlgCtrl.getValue()
	gbETAmtEntered = (Len(gdETAmount)&gt;0)
	
	&apos;// Enable SplitOption if amount entered &gt; 0
	if gbETAmtEntered then
		oETDlgCtrl = puoETDialog.getControl(&quot;SplitOption&quot;)
		oETDlgCtrl.Model.Enabled = true
	endif
	
	bFormComplete = ETCheckComplete()
	if bFormComplete then
		oETRecordBtn = puoETDialog.getControl(&quot;RecordBtn&quot;)
		oETRecordBtn.Model.Enabled = true
		oETRecordCont = puoETDialog.getControl(&quot;RecordContBtn&quot;)
		oETRecordCont.Model.Enabled = true
	endif	

end sub		&apos;// end ETAmountListener	6/24/20
&apos;/**/
&apos;// ET.bas
&apos;//---------------------------------------------------------------
&apos;// ET - Enter Transaction Dialog run procedure.
&apos;//		9/8/22.	wmk.	13:47	
&apos;//----------------------------------------------------------------

public sub ET()

&apos;//	Usage.	macro call or
&apos;//			call ET()
&apos;//
&apos;//		Run ET dialog
&apos;//
&apos;// Entry.	Button click in dialog box		
&apos;//			puoETDialog = declared object for COA dialog
&apos;//			pbETActive = flag to indicate ET dialog is active
&apos;//			pbETDebitList = ET in COA debit list flag
&apos;//			pbETCreditList = ET in COA credit list flag
&apos;//
&apos;//	Exit.	msgBox message displayed
&apos;//
&apos;// Calls.	ETPubVarsReset
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/7/22.		wmk.	ETRecdDoneListener called when &quot;Record&quot; (OK) clicked.
&apos;// 9/8/22.		wmk.	pbETActive, pbETDebitList, pbETCreditList flags
&apos;//				 supported for COADialog results.
&apos;// Legacy mods.
&apos;//	7/6/20.		wmk.	original code; adapted from G in BadAss Module2
&apos;//	7/7/20.		wmk.	ensure dialog library loaded
&apos;//
&apos;//	Notes.	pbInETDialog is a flag set for the COADialog to indicate it is being
&apos;// invoked by the ET dialog, as opposed to the GA macro. The COADialog then
&apos;// knows to set the COADialog.DebitField or COADialog.CreditField as opposed
&apos;// to the selected cell in the sheet it has been invoked on by the GA
&apos;// macro (ctl-4 hotkey).
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iStatus As Integer
dim oDocument	As Object
dim oSel		As Object
dim oRange		As Object
dim iSheet		As Integer

&apos;// code.
	GlobalScope.BasicLibraries.LoadLibrary(&quot;BadAss&quot;)
	GlobalScope.DialogLibraries.LoadLibrary(&quot;BadAss&quot;)
	oDocument = ThisComponent
	oSel = oDocument.getCurrentSelection()
	oRange = oSel.RangeAddress
	iSheet = oRange.Sheet
		
&apos;// Initialize ET dialog.
	puoETDialog = CreateUnoDialog(GlobalScope.DialogLibraries.BadAss.TransEntry)
if( 1 = 0 ) then
Xray puoETDialog
endif
	pbETActive=true
	pbETDebitList = false
	pbETCreditList = false
	Select Case puoETDialog.Execute()
	Case 1		&apos;// Record &amp;&apos; Finish clicked
		ETRecdDoneListener()
&apos;		msgBox(&quot;Record &amp;&apos; Finish clicked in Enter Transaction&quot;)
		&apos;// iStatus = ETDialogRecord... called by [Record &amp;&apos; Finish]
	Case 0		&apos;// Cancel
&apos;		pusCOASelected = &quot;&quot;		&apos;// since cancel, Execute() event skipped
		iStatus = ETPubVarsReset(1)	&apos;// reset everything
&apos;		msgBox(&quot;Cancel or FormClose clicked&quot;)
	Case else
&apos;		iStatus = ETPubVarsReset(1)	&apos;// reset everything
&apos;		msgBox(&quot;ET - unevaluated dialog return&quot;)
	End Select

&apos;msgbox(&quot;Date entered: &quot; + gsETDate)
&apos;msgbox(&quot;Decription: &quot; + gsETDescription)
&apos;msgBox(&quot;Amount: &quot; + gdETAmount)
&apos;msgBox(&quot;Debit Account: &quot; + gsETAcct1)
&apos;msgBox(&quot;Credit Account: &quot; + gsETAcct2)
&apos;msgBox(&quot;Reference: &quot; + gsETRef)
&apos;puoETDialog.endDialog(2)
&apos;puoETDialog.dispose()
	
end sub		&apos;// end ET	9/8/22
&apos;/**/
&apos;// ETCancelListener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETCancelListener - Event handler &lt;Cancel&gt; from Enter Transaction.
&apos;//		6/15/20.	wmk.	16:30
&apos;//---------------------------------------------------------------------

public sub ETCancelListener()

&apos;//	Usage.	macro call or
&apos;//			call ETCancelListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user clicked &lt;Cancel&gt; in Enter Transaction dialog
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	ET dialog ended
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/13/20.	wmk.	original code
&apos;//	6/15/20.	wmk.	code modified to emulate Cancel type button
&apos;//
&apos;//	Notes. This sub is the linked macro to the Execute() event linked
&apos;// to the &lt;Cancel&gt; button in the COA selection dialog. If the &lt;Cancel&gt;
&apos;// button is also defined as type = 2, CANCEL it will drop the dialog
&apos;// from the screen with returned value 0. If not, this event handler
&apos;// be called and will emulate that process.

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
&apos;	puoETDialog.endDialog(0)	&apos;// end dialog as though cancelled	
	if anyNotNull(puoETDialog) then
	 puoETDialog.dispose()
	endif
	if anyNotNull(puoCOADialog) then
	 puoCOADialog.dispose()
	endif
end sub		&apos;// end ETCancelListener	6/15/20
&apos;/**/
&apos;// ETCheckComplete.bas
&apos;//---------------------------------------------------------------------
&apos;// ETCheckComplete - Check all Enter Transaction dialog fields entered.
&apos;//		6/15/20.	wmk.	17:30
&apos;//---------------------------------------------------------------------

public function ETCheckComplete() As Boolean

&apos;//	Usage.	bVar = ETCheckComplete()
&apos;//
&apos;// Entry.
&apos;//		gbETDateEntered = date field entered flag
&apos;//		gbETDescEntered = description entered flag
&apos;//		gbETAmtEntered As Boolean			&apos;// amount entered flag
&apos;//		gbETCOA1Entered As Boolean			&apos;// Debit COA entered flag
&apos;//		gbETCOA2Entered As Boolean			&apos;// Credit COA entered flag
&apos;//
&apos;//	Exit.	bVal = true if all entry flags are true
&apos;//				   false otherwise
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/15/20.		wmk.	original code
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim bRetValue As Boolean

	&apos;// code.
	
	bRetValue = gbETDateEntered AND gbETDescEntered AND gbETAmtEntered _
				 AND gbETCOA1Entered AND gbETCOA2Entered
	
	ETCheckComplete = bRetValue

end function 	&apos;// end ETCheckComplete		6/15/20
&apos;/**/
&apos;// ETCOA1Listener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETCOA1Listener - Event handler &lt;COA1 account&gt; from Enter Transaction.
&apos;//		6/17/20.	wmk.	14:30
&apos;//---------------------------------------------------------------------

public sub ETCOA1Listener()

&apos;//	Usage.	macro call or
&apos;//			call ETCOA1Listener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user changed the &lt;COA1 account&gt; field in Enter Transaction
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	gsETAcct1 = entered amount
&apos;//			gbETCOA1Entered = true if nonempty string
&apos;//			pbETDebitList = true
&apos;//			pbETCreditList = false
&apos;//
&apos;// Calls.	ETCheckComplete
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/15/20.	wmk.	original code.
&apos;//	6/17/20.	wmk.	bug fix enabling [Record..] buttons
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;debit&gt; text field in the Enter Transaction dialog.

&apos;//	constants.
dim bFormComplete	As Boolean		&apos;// all fields complete flag
dim oETCOA1Text	As Object			&apos;// account text field
dim oETRecordBtn	As Object		&apos;// Record &amp;&apos; Finish button
dim oETRecordCont	As Object		&apos;// Record &amp;&apos; Continue button

&apos;//	local variables.

	&apos;// code.
	pbETDebitList = true
	pbETCreditList = false
	oETCOA1Text = puoETDialog.getControl(&quot;DebitField&quot;)
	gsETAcct1 = oETCOA1Text.Text
	gbETCOA1Entered = (Len(gsETAcct1)&gt;0)
	bFormComplete = ETCheckComplete()
	if bFormComplete then
		oETRecordBtn = puoETDialog.getControl(&quot;RecordBtn&quot;)
		oETRecordBtn.Model.Enabled = true
		oETRecordCont = puoETDialog.getControl(&quot;RecordContBtn&quot;)
		oETRecordCont.Model.Enabled = true
	endif	

end sub		&apos;// end ETCOA1Listener	6/17/20
&apos;/**/
&apos;// ETCOA1ListListener.bas
&apos;//--------------------------------------------------------------------
&apos;// ETCOA1ListListener - Process user click on &lt;...&gt; with COA1 account.
&apos;//		6/17/20.	wmk.	07:45
&apos;//--------------------------------------------------------------------

public sub ETCOA1ListListener()

&apos;//	Usage.	macro call or
&apos;//			call ETCOA1ListListener()
&apos;//
&apos;// Entry.	User clicked on &lt;...&gt; next to COA1 field
&apos;//			&lt;DebitField&gt; in ET dialog is text field for result
&apos;//
&apos;//	Exit.	If user selected a COA from the COADialog then
&apos;//			gsETAcct1 = the COA # selected
&apos;//			DebitField.Text = the COA # selected
&apos;//			otherwise the above remain unchanged
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/16/20.	wmk.	original code
&apos;//	6/17/20.	wmk.	bug fix setting selection in text box
&apos;//
&apos;//	Notes. If the user does not select a new COA from GetCOA, the
&apos;//	current COA for the Debit field (gsETAcct1) will remain unchanged.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim oETCOA1Text	As Object			&apos;// account text field
dim sAcct1		As String			&apos;// returned account from GetCOA

	&apos;// code.
	sAcct1 = &quot;&quot;
	ON ERROR GOTO ErrorHandler
	
	pbETDebitList=true
	pbETCreditList=false	
	sAcct1 = GetCOA(1)			&apos;// get COA from dialog
	if Len(sAcct1)&gt;0 then
	    puoETDialog.Model.DebitField.Text = sAcct1
&apos;		oETCOA1Text = puoETDialog.getControl(&quot;DebitField&quot;)
&apos;		oETCOA1Text.Text = sAcct1
		gsETAcct1 = sAcct1
	endif
	
NormalExit:
	exit sub
	
ErrorHandler:
	gsETAcct1 = sAcct1
	GoTo NormalExit
	
end sub		&apos;// end ETCOA1ListListener	6/17/20
&apos;/**/
&apos;// ETCOA2Listener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETCOA2Listener - Event handler &lt;COA1 account&gt; from Enter Transaction.
&apos;//		9/8/22.	wmk.	15:07
&apos;//---------------------------------------------------------------------

public sub ETCOA2Listener()

&apos;//	Usage.	macro call or
&apos;//			call ETCOA2Listener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user changed the &lt;COA2 account&gt; field in Enter Transaction
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	gsETAcct2 = entered account
&apos;//			gbETCOA2Entered = true if nonempty string
&apos;//			pbETCreditList = true
&apos;//			pbETDebitList = false
&apos;//
&apos;// Calls.	ETCheckComplete
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/8/22.		wmk.	text modified; eliminate all other code except
&apos;//				 to check if form complete.
&apos;// Legacy mods.
&apos;//	6/16/20.	wmk.	original code
&apos;//	6/17/20.	wmk.	bug fix enabling Select buttons
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;Credit account&gt; text field in the Enter Transaction dialog.

&apos;//	constants.
dim bFormComplete	As Boolean		&apos;// all fields complete flag
dim oETCOA2Text	As Object			&apos;// account text field
dim oETRecordBtn	As Object		&apos;// Record &amp;&apos; Finish button
dim oETRecordCont	As Object		&apos;// Record &amp;&apos; Continue button

&apos;//	local variables.

	&apos;// code.
	pbETCreditList = true
	pbETDebitList = false
	oETCOA2Text = puoETDialog.getControl(&quot;CreditField&quot;)
	gsETAcct2 = oETCOA2Text.Text
	gbETCOA2Entered = (Len(gsETAcct2)&gt;0)
	bFormComplete = ETCheckComplete()
	if bFormComplete then
		oETRecordBtn = puoETDialog.getControl(&quot;RecordBtn&quot;)
		oETRecordBtn.Model.Enabled = true
		oETRecordCont = puoETDialog.getControl(&quot;RecordContBtn&quot;)
		oETRecordCont.Model.Enabled = true
	endif	

end sub		&apos;// end ETCOA2Listener	9/8/22
&apos;/**/
&apos;// ETCOA2ListListener.bas
&apos;//--------------------------------------------------------------------
&apos;// ETCOA2ListListener - Process user click on &lt;...&gt; with COA2 account.
&apos;//		6/17/20.	wmk.	10:15
&apos;//--------------------------------------------------------------------

public sub ETCOA2ListListener()

&apos;//	Usage.	macro call or
&apos;//			call ETCOA2ListListener()
&apos;//
&apos;// Entry.	User clicked on &lt;...&gt; next to COA2 field
&apos;//			&lt;DebitField&gt; in ET dialog is text field for result
&apos;//
&apos;//	Exit.	If user selected a COA from the COADialog then
&apos;//			gsETAcct1 = the COA # selected
&apos;//			DebitField.Text = the COA # selected
&apos;//			otherwise the above remain unchanged
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/17/20.	wmk.	original code; cloned from ETCOA1ListListener
&apos;//
&apos;//	Notes. If the user does not select a new COA from GetCOA, the
&apos;//	current COA for the Credit field (gsETAcct2) will remain unchanged.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim oETCOA2Text	As Object			&apos;// account text field
dim sAcct2		As String			&apos;// returned account from GetCOA

	&apos;// code.
	sAcct2 = &quot;&quot;
	ON ERROR GOTO ErrorHandler

	pbETDebitList=false
	pbETCreditList=true
	sAcct2 = GetCOA(1)			&apos;// get COA from dialog
	if Len(sAcct2)&gt;0 then
		puoETDialog.Model.CreditField.Text = sAcct2
&apos;		oETCOA2Text = puoETDialog.getControl(&quot;CreditField&quot;)
&apos;		oETCOA2Text.Text = sAcct2
		gsETAcct2 = sAcct2
	endif
	
NormalExit:
	exit sub
	
ErrorHandler:
	gsETAcct2 = sAcct2
	GoTo NormalExit
	
end sub		&apos;// end ETCOA2ListListener	6/17/20
&apos;/**/
&apos;// ETDateListener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETDateListener - Event handler &lt;date&gt; from Enter Transaction.
&apos;//		6/17/20.	wmk.	10:45
&apos;//---------------------------------------------------------------------

public sub ETDateListener()

&apos;//	Usage.	macro call or
&apos;//			call ETDateListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user changed the &lt;date&gt; field in Enter Transaction
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	gdtETDate = entered date
&apos;//			gbETDateEntered = true if nonempty string
&apos;//
&apos;// Calls.	ETCheckComplete
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/15/20.	wmk.	original code
&apos;//	6/17/20.	wmk.	bug fix enabling Select buttons
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;date&gt; text field in the Enter Transaction dialog.

&apos;//	constants.
dim bFormComplete	As Boolean		&apos;// all fields complete flag
dim oETDateText		As Object		&apos;// Date text field
dim oETRecordBtn	As Object		&apos;// Record &amp;&apos; Finish button
dim oETRecordCont	As Object		&apos;// Record &amp;&apos; Continue button

&apos;//	local variables.

	&apos;// code.
	oETDateText = puoETDialog.getControl(&quot;DateField1&quot;)
	gsETDate = oETDateText.Text
	gbETDateEntered = (Len(gsETDate)&gt;0)
	bFormComplete = ETCheckComplete()
	if bFormComplete then
		oETRecordBtn = puoETDialog.getControl(&quot;RecordBtn&quot;)
		oETRecordBtn.Model.Enabled = true
		oETRecordCont = puoETDialog.getControl(&quot;RecordContBtn&quot;)
		oETRecordCont.Model.Enabled = true
	endif	

end sub		&apos;// end ETDateListener	6/17/20
&apos;/**/
&apos;// ETDescListener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETDescListener - Event handler &lt;description&gt; from Enter Transaction.
&apos;//		6/17/20.	wmk.	10:15
&apos;//---------------------------------------------------------------------

public sub ETDescListener()

&apos;//	Usage.	macro call or
&apos;//			call ETDescListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user changed the &lt;description&gt; field in Enter Transaction
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	gsETDescription = entered transaction description
&apos;//			gbETDescEntered = true if nonempty string
&apos;//
&apos;// Calls.	ETCheckComplete
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/15/20.	wmk.	original code
&apos;//	6/17/20.	wmk.	bug fix enabling Select button
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;date&gt; text field in the Enter Transaction dialog.

&apos;//	constants.
dim bFormComplete	As Boolean		&apos;// all fields complete flag
dim oETDescText		As Object		&apos;// Desc text field
dim oETRecordBtn	As Object		&apos;// Record &amp;&apos; Finish button
dim oETRecordCont	As Object		&apos;// Record &amp;&apos; Continue button

&apos;//	local variables.

	&apos;// code.
	oETDescText = puoETDialog.getControl(&quot;DescField&quot;)
	gsETDescription = oETDescText.Text
	gbETDescEntered = (Len(gsETDescription)&gt;0)
	bFormComplete = ETCheckComplete()
	if bFormComplete then
		oETRecordBtn = puoETDialog.getControl(&quot;RecordBtn&quot;)
		oETRecordBtn.Model.Enabled = true
		oETRecordCont = puoETDialog.getControl(&quot;RecordContBtn&quot;)
		oETRecordCont.Model.Enabled = true
	endif	

end sub		&apos;// end ETDescListener	6/17/20
&apos;/**/
&apos;// ETDialogRecord.bas
&apos;//---------------------------------------------------------------
&apos;// ETDialogRecord - Record entered fields from ET Dialog.
&apos;//		6/27/20.	wmk.	21:30
&apos;//---------------------------------------------------------------

public function ETDialogRecord() As Integer

&apos;//	Usage.	iVar = ETDialogRecord()
&apos;//
&apos;// Entry.	ET Dialog public vars have entered values
&apos;//
&apos;//	Exit.	Double entry transaction recorded in GL sheet at
&apos;//			user selected position
&apos;//			gbETSplitTrans = true if split transaction
&apos;//							 false if regular transaction
&apos;//			gbETDebitIsTotal = true if credits split;
&apos;//							   false if debits split
&apos;//
&apos;// Calls.	ETDlgSplitRecord
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/16/20.	wmk.	original code; stub
&apos;//	6/17/20.	wmk.	code fleshed out gradually
&apos;//	6/24/20.	wmk.	change to record numeric debit and credit amount
&apos;//						from gdETAmount
&apos;//	6/25/20.	wmk.	bug fix eliminating gsETAmount which was replaced by
&apos;//						gdETAmount 6/24
&apos;// 6/27/20.	wmk.	ensure background in all but date fields is NOFILL
&apos;//
&apos;//	Notes. When the ET dialog completes, either the DebitField or CreditField
&apos;// may have been set to &quot;split&quot;. If that is the case, ETDlgSplitRecord will
&apos;// be called to record the split transaction.
&apos;//

&apos;//	constants.

&apos;//----------------constants borrowed from header-------------------
const LTGREEN=10092390		&apos;// decimal value of LTGREEN color

&apos;// column index values and string lengths for column data			
&apos;public const	INSBIAS=3		&apos;// insert line count bias
&apos;public const	COALEN=4		&apos;// length of COA field strings
const COLDATE=0		&apos;// Date - column A
const COLTRANS=1	&apos;// Transaction - column B
const COLDEBIT=2	&apos;// Debit - column C
const COLCREDIT=3	&apos;// Credit - column D
const COLACCT=4		&apos;// COA Account - column E
const COLREF=5		&apos;// Reference - column F

&apos;// cell formatting constants.
const DEC2=123		&apos;// number format for (x,xxx.yy)			&apos;// mod052020
const MMDDYY=37		&apos;// date format mm/dd/y						&apos;// mod052020
const FMTDATETIME=50	&apos;// date/time format mm/dd/yyy hh:mm:ss 	&apos;// mod060620
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MAXTRANSL=50	&apos;// maximum transaction text length			&apos;// mod052020

&apos;//----------------end constants borrowed from publics--------------

&apos;//	local variables
dim iRetValue As Integer
dim i		As Integer
dim iStatus	As Integer			&apos;// general status

&apos;// GL Sheet access variables for inserting transaction
dim oDoc		As Object		&apos;// ThisComponent
dim oSel		As Object		&apos;// current user selection
dim oRange		As Object		&apos;// cell range selection info
dim iSheetIx	As Integer		&apos;// sheet index
dim oGLSheet	As Object		&apos;// GL sheet object
dim lGLRow		As Long			&apos;// GL 1st line row
dim lGLCurrRow	As Long			&apos;// current new transaction row

&apos;// GL Transaction field cells
dim	oCellDate 	As Object		&apos;// Date field
dim	oCellTrans 	As Object		&apos;// Description field
dim	oCellDebit 	As Object		&apos;// Debit field
dim	oCellCredit	As Object		&apos;// Credit field
dim	oCellAcct	As Object		&apos;// COA field
dim	oCellRef	As Object		&apos;// Reference field
dim oDate		As Object		&apos;// oCellDate.Text

	&apos;// code.
	
	iRetValue = 0
	ON ERROR GOTO ErrorHandler

	&apos;// determine if split transaction and handle
	gbETDebitIsTotal = (StrComp(gsETAcct2,&quot;split&quot;)=0)
	gbETSplitTrans = (gbETDebitIsTotal OR (StrComp(gsETAcct1,&quot;split&quot;)=0))
	if gbETSplitTrans then
		iStatus = ETDlgSplitRecord()
		if iStatus &lt; 0 then
			GoTo ErrorHandler
		else
			GoTo NormalExit
		endif
	endif	&apos;// end split transaction conditional
	
	&apos;// set up access to GL on user selection
	oDoc = ThisComponent				&apos;// set up for sheet access within document
	oSel = oDoc.getCurrentSelection()	&apos;// get current cell selection(s) info
	oRange = oSel.RangeAddress			&apos;// extract range information
	iSheetIx = oRange.Sheet	&apos;// get sheet index value
&apos;	oSheets = oDoc.getSheets()
	oGLSheet = oDoc.Sheets.getByIndex(iSheetIx)	&apos;// get GL sheet
	lGLRow = oRange.StartRow			&apos;// set row pointer to 1st row
	
	&apos;// set up and insert 2 rows at first row pointed to by user
	oGLSheet.Rows.insertByIndex(lGLRow, 2)	&apos;// insert transaction rows
	&apos;// add code here to update sheet date modified
	iStatus = SetSheetDate(oRange, MMDDYY)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;// end abnormal return from SetSheetDate
	
	&apos;// for each row, copy transaction information, placing debit amt
	&apos;// in Debit column of 1st row, credit amt in Credit column of
	&apos;// 2nd row, all other columns in same position
	lGLCurrRow = lGLRow
	for i = 0 to 1
		&apos;// extract key ledger fields for setting in new entries
		oCellDate = oGLSheet.getCellByPosition(COLDATE, lGLCurrRow)
		oCellTrans = oGLSheet.getCellByPosition(COLTRANS, lGLCurrRow)
		oCellDebit = oGLSheet.getCellByPosition(COLDEBIT, lGLCurrRow)
		oCellCredit = oGLSheet.getCellByPosition(COLCREDIT, lGLCurrRow)
		oCellAcct = oGLSheet.getCellByPosition(COLACCT, lGLCurrRow)
		oCellRef = oGLSheet.getCellByPosition(COLREF, lGLCurrRow)
		
		&apos;// set Date field in transaction line		
		oCellDate.setValue(DateValue(gsETDate))		&apos;// set date field to value
		oCellDate.NumberFormat = MMDDYY				&apos;// set mm/dd/yy format
		oCellDate.HoriJustify = RJUST				&apos;// right-justify date
		oCellDate.CellBackColor = LTGREEN			&apos;// set light green background
		
		&apos;// add code here to set remaining transaction cells
		oCellTrans.String = gsETDescription
		oCellTrans.HoriJustify = LJUST
		oCellTrans.CellBackColor = NOFILL
		
		&apos;// Debit amt is in first line; credit in second
		if i = 0 then
			oCellDebit.String = Str(gdETAmount)
			oCellDebit.setValue(gdETAmount)							&apos;//	mod062420
			oCellDebit.NumberFormat = DEC2
			oCellCredit.String = &quot;&quot;
			oCellAcct.String = gsETAcct1
		else
			oCellDebit.String = &quot;&quot;
			oCellCredit.String = Str(gdETAmount)
			oCellCredit.setValue(Val(gdETAmount))					&apos;//	mod062420
			oCellCredit.NumberFormat = DEC2
			oCellAcct.String = gsETAcct2
		endif
		oCellDebit.HoriJustify = RJUST
		oCellDebit.CellBackColor = NOFILL
		oCellCredit.HoriJustify = RJUST
		oCellCredit.CellBackColor = NOFILL
		oCellAcct.HoriJustify = CJUST
		oCellAcct.CellBackColor = NOFILL
				
		oCellRef.String = gsETRef 
		oCellRef.HoriJustify = CJUST
		oCellRef.CellBackColor = NOFILL
		
		lGLCurrRow = lGLCurrRow + 1	&apos;// advance to next transaction row
		
	next i		&apos;// advance transaction row

	GoTo NormalExit
	
NormalExit:
	ETDialogRecord = iRetValue
	exit function
	
ErrorHandler:
	iRetValue = -1
	GoTo NormalExit
	

end function 	&apos;// end ETDialogRecord	6/25/20
&apos;/**/
&apos;// ETDialogReset.bas
&apos;//---------------------------------------------------------------
&apos;// ETDialogReset - Reset all ET dialog fields and flags.
&apos;//		6/17/20.	wmk.	12:00
&apos;//---------------------------------------------------------------

public function ETDialogReset(piOpt As Integer) As Integer

&apos;//	Usage.	iVar = ETDialogReset( iOpt )
&apos;//
&apos;//		iOpt = 0 - reset all fields except Date
&apos;//			 &lt;&gt; 0 - reset ALL fields
&apos;//
&apos;// Entry.	ET dialog public field values and flags defined
&apos;//			puoETDialog = ET dialog object
&apos;//			gbETDateEntered = date field entered flag
&apos;//			gsETDate = Date field string
&apos;/
&apos;//	Exit.	iVar = 0 - normal return
&apos;//				 &lt;&gt; 0 - error in resetting fields
&apos;//
&apos;// Calls.	ETPubVarsReset, ETDlgCtrlsReset
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/16/20.	wmk.	original code; stub
&apos;// 6/17/20.	wmk.	move code to ETPubVarsReset and ETDlgCtrlsReset
&apos;//
&apos;//	Notes. Allows call to preserve date field for repetitive entries

&apos;//	constants.

&apos;//	local variables.
dim iRetValue 	As Integer		&apos;// returned value
dim iOption 	As Integer		&apos;// local copy of initialize option

	&apos;// code.
	
	iRetValue = 0
	iOption = piOpt
	ON ERROR GOTO ErrorHandler
	
	&apos;// clear all stored values
	iRetValue = ETPubVarsReset(iOption)	&apos;// clear field storage and flags
	if iRetValue &lt;&gt; 0 then
		GoTo ErrorHandler
	endif

if 1 = 0 then
	&apos;// clear dialog object fields.
	iRetValue = ETDlgCtrlsReset(iOption)	&apos;// clear dialog fields
	if iRetValue &lt;&gt; 0 then
		GoTo ErrorHandler
	endif
endif

	&apos;// if reset all fields clear these; DateField1, DebitField, CreditField.
	if iOption = 1 then
dim oETDate			As Object
		oETDate =  puoETDialog.getControl(&quot;DateField1&quot;)
		oETDate.Text = &quot;&quot;
	
dim oETDebit		As Object
		oETDebit =  puoETDialog.getControl(&quot;DebitField&quot;)
		oETDebit.Text = &quot;&quot;

dim oETCredit		As Object
		oETCredit =  puoETDialog.getControl(&quot;CreditField&quot;)
		oETCredit.Text = &quot;&quot;

	endif

	&apos;// Always clear description, amount, reference, splitoption.	
dim oETDescText		As Object
	oETDescText = puoETDialog.getControl(&quot;DescField&quot;)
	oETDescText.Text = &quot;&quot;		&apos;// clear description
dim oETAmount		As Object
	oETAmount = puoETDialog.getControl(&quot;AmtField1&quot;)
	oETAmount.Text = &quot;&quot;			&apos;// clear amount
dim oETRefText		As Object
	oETRefText = puoETDialog.getControl(&quot;RefField&quot;)
	oETRefText.Text = &quot;&quot;
dim oETSplit		As Object
	oETSplit = puoETDialog.getControl(&quot;SplitOption&quot;)
	oETSplit.Value = false
	
NormalExit:
	ETDialogReset = iRetValue
	exit function
	
ErrorHandler:
	iRetValue = -1		&apos;// set error return
	GoTo NormalExit
	

end function 	&apos;// end ETDialogReset	6/17/20
&apos;/**/
&apos;// ETDlgSplitRecord.bas
&apos;//---------------------------------------------------------------
&apos;// ETDlgSplitRecord - Record split transaction from ET Dialog.
&apos;//		7/7/20.	wmk.	12:00	
&apos;//---------------------------------------------------------------

public function ETDlgSplitRecord() As Integer

&apos;//	Usage.	iVar = ETDlgSplitRecord()
&apos;//
&apos;// Entry.	ET Dialog public vars have entered values
&apos;//			gbETDebitIsTotal = true if credits are split
&apos;//							   false if debits are split
&apos;//
&apos;//	Exit.	Double entry split transaction recorded in GL sheet at
&apos;//			user selected position
&apos;//
&apos;// Calls.	SetSumFormula
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.	wmk.	original code; adapted from ETDialogRecord
&apos;//	6/26/20.	wmk.	bug fix where both debit and credit splits being
&apos;//						recorded in Credit column
&apos;//	6/27/20.	wmk.	bug fix where transaction rows being set to
&apos;//						color of row above where split inserted; need
&apos;//						to be set to NOFILL
&apos;// 7/7/10.		wmk.	bug fix where total line background color not being
&apos;//						set to NOFILL; bug fix where description centered if
&apos;//						line above was centered
&apos;//
&apos;//	Notes. When the ET dialog completes, either the DebitField or CreditField
&apos;// may have been set to &quot;split&quot;. If that is the case, ETDlgSplitRecord will
&apos;// be called to record the split transaction.
&apos;//

&apos;//	constants.

&apos;//----------------constants borrowed from header-------------------
const LTGREEN=10092390		&apos;// decimal value of LTGREEN color

&apos;// column index values and string lengths for column data			
&apos;public const	INSBIAS=3		&apos;// insert line count bias
&apos;public const	COALEN=4		&apos;// length of COA field strings
const COLDATE=0		&apos;// Date - column A
const COLTRANS=1	&apos;// Transaction - column B
const COLDEBIT=2	&apos;// Debit - column C
const COLCREDIT=3	&apos;// Credit - column D
const COLACCT=4		&apos;// COA Account - column E
const COLREF=5		&apos;// Reference - column F

&apos;// cell formatting constants.
const DEC2=123		&apos;// number format for (x,xxx.yy)			&apos;// mod052020
const MMDDYY=37		&apos;// date format mm/dd/y						&apos;// mod052020
const FMTDATETIME=50	&apos;// date/time format mm/dd/yyy hh:mm:ss 	&apos;// mod060620
const LJUST=1		&apos;// left-justify HoriJustify				&apos;// mod052020
const CJUST=2		&apos;// center HoriJustify						&apos;// mod052020
const RJUST=3		&apos;// right-justify HoriJustify				&apos;// mod052320
const MAXTRANSL=50	&apos;// maximum transaction text length			&apos;// mod052020

&apos;//----------------end constants borrowed from publics--------------

&apos;//	local variables
dim iRetValue As Integer
dim i		As Integer
dim iStatus	As Integer			&apos;// general status
dim sSumFormula	As String		&apos;// split sum formula

&apos;// GL Sheet access variables for inserting transaction
dim oDoc		As Object		&apos;// ThisComponent
dim oSel		As Object		&apos;// current user selection
dim oRange		As Object		&apos;// cell range selection info
dim iSheetIx	As Integer		&apos;// sheet index
dim oGLSheet	As Object		&apos;// GL sheet object
dim lGLRow		As Long			&apos;// GL 1st line row
dim lGLCurrRow	As Long			&apos;// current new transaction row
dim lGLBottomRow	As Long		&apos;// bottom row of split transaction
dim iInsertCnt	As Integer		&apos;// insertion row count
dim iSplitLim	As Integer		&apos;// splits limit 0-based

&apos;// GL Transaction field cells
dim	oCellDate 	As Object		&apos;// Date field
dim	oCellTrans 	As Object		&apos;// Description field
dim	oCellDebit 	As Object		&apos;// Debit field
dim	oCellCredit	As Object		&apos;// Credit field
dim	oCellAcct	As Object		&apos;// COA field
dim	oCellRef	As Object		&apos;// Reference field
dim oDate		As Object		&apos;// oCellDate.Text

	&apos;// code.
	
	iRetValue = 0
	ON ERROR GOTO ErrorHandler

	&apos;// set up access to GL on user selection
	oDoc = ThisComponent				&apos;// set up for sheet access within document
	oSel = oDoc.getCurrentSelection()	&apos;// get current cell selection(s) info
	oRange = oSel.RangeAddress			&apos;// extract range information
	iSheetIx = oRange.Sheet	&apos;// get sheet index value
	oGLSheet = oDoc.Sheets.getByIndex(iSheetIx)	&apos;// get GL sheet
	lGLRow = oRange.StartRow			&apos;// set row pointer to 1st row
	lGLCurrRow = lGLRow
	
	&apos;// rows to insert = upper bound of amounts + 1, +2 for upper and
	&apos;// lower &quot;split&quot; divider rows +1 for total row
	iSplitLim = uBound(gdSTAmts)
	iInsertCnt = iSplitLim + 4
	lGLBottomRow = lGLCurrRow + iInsertCnt - 1	
	&apos;// set up and insert iInsertCnt rows at first row pointed to by user
	oGLSheet.Rows.insertByIndex(lGLRow, iInsertCnt)	&apos;// insert transaction rows
	oRange.EndRow = lGLBottomRow			&apos;// set for SetSumFormula call
		
	&apos;// update sheet date modified
	iStatus = SetSheetDate(oRange, MMDDYY)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;// end abnormal return from SetSheetDate

&apos;/*--------------------------------------------------------------------------
	&apos;// create top row &quot;split&quot; divider
	&apos;// extract key ledger fields for setting in new entries
	oCellDate = oGLSheet.getCellByPosition(COLDATE, lGLCurrRow)
	oCellTrans = oGLSheet.getCellByPosition(COLTRANS, lGLCurrRow)
	oCellDebit = oGLSheet.getCellByPosition(COLDEBIT, lGLCurrRow)
	oCellCredit = oGLSheet.getCellByPosition(COLCREDIT, lGLCurrRow)
	oCellAcct = oGLSheet.getCellByPosition(COLACCT, lGLCurrRow)
	oCellRef = oGLSheet.getCellByPosition(COLREF, lGLCurrRow)
		
	&apos;// set Date field in transaction line		
	oCellDate.setValue(DateValue(gsETDate))		&apos;// set date field to value
	oCellDate.NumberFormat = MMDDYY				&apos;// set mm/dd/yy format
	oCellDate.HoriJustify = RJUST				&apos;// right-justify date
	oCellDate.CellBackColor = LTGREEN			&apos;// set light green background

	&apos;// set description field to ET description
	&apos;// gsETDescription = entered description
	oCellTrans.String = gsETDescription
	oCellTrans.CellBackColor = LTGREEN			&apos;// color entire 1st row
	oCellTrans.HoriJustify = LJUST
	
	&apos;//	set debit and credit amount fields to &quot;&quot;
	oCellDebit.String = &quot;&quot;
	oCellDebit.CellBackColor = LTGREEN
	oCellCredit.String = &quot;&quot;
	oCellCredit.CellBackColor = LTGREEN
	
	&apos;// set account and ref fields to &quot;-&quot; and &quot;split&quot;
	oCellAcct.String = &quot;-&quot;
	oCellAcct.HoriJustify = CJUST
	oCellAcct.CellBackColor = LTGREEN
	oCellRef.String = &quot;split&quot;
	oCellRef.HoriJustify = CJUST
	oCellRef.CellBackColor = LTGREEN
&apos;*/----------------------------------------------------------------------------

	lGLCurrRow = lGLCurrRow + 1		&apos;// advance to total row
&apos;/*------------------enter total row-------------------------------------------
	&apos;// extract key ledger fields for setting in new entries
	oCellDate = oGLSheet.getCellByPosition(COLDATE, lGLCurrRow)
	oCellTrans = oGLSheet.getCellByPosition(COLTRANS, lGLCurrRow)
	oCellDebit = oGLSheet.getCellByPosition(COLDEBIT, lGLCurrRow)
	oCellCredit = oGLSheet.getCellByPosition(COLCREDIT, lGLCurrRow)
	oCellAcct = oGLSheet.getCellByPosition(COLACCT, lGLCurrRow)
	oCellRef = oGLSheet.getCellByPosition(COLREF, lGLCurrRow)
		
	&apos;// set Date field in transaction line		
	oCellDate.setValue(DateValue(gsETDate))		&apos;// set date field to value
	oCellDate.NumberFormat = MMDDYY				&apos;// set mm/dd/yy format
	oCellDate.HoriJustify = RJUST				&apos;// right-justify date
	oCellDate.CellBackColor = LTGREEN			&apos;// set light green background

	&apos;// set description field to ET description
	&apos;// gsETDescription = entered description
	oCellTrans.String = gsETDescription
	oCellTrans.CellBackColor = NOFILL
	oCellTrans.HoriJustify = LJUST

	&apos;// set Total in debit or credit and appropriate COA
	if gbETDebitIsTotal then		&apos;// credits split
		oCellDebit.Value = gdETAmount
		oCellDebit.NumberFormat = DEC2
		oCellCredit.String = &quot;&quot;
		oCellAcct.String = gsETAcct1
	else		&apos;// debits split
		oCellCredit.Value = gdETAmount
		oCellCredit.NumberFormat = DEC2
		oCellDebit.String = &quot;&quot;
		oCellAcct.String = gsETAcct2
	endif		&apos;// end debit is total conditional
	oCellDebit.HoriJustify = RJUST
	oCellDebit.CellBackColor = NOFILL
	oCellCredit.HoriJustify = RJUST
	oCellCredit.CellBackColor = NOFILL
	oCellAcct.HoriJustify = CJUST
	oCellAcct.CellBackColor = NOFILL
		
	&apos;// set ref field
	oCellRef.String = gsETRef
	oCellRef.HoriJustify = CJUST
	oCellRef.CellBackColor = NOFILL
&apos;*/---------end Total row------------------------------------------------------
 if false then
 GoTo JumpAhead
 endif
 
&apos;/*----------------------------------------------------------------------------
	&apos;// for each row, copy transaction information, placing debit amt
	&apos;// in Debit column of 1st row, credit amt in Credit column of
	&apos;// 2nd row, all other columns in same position
	lGLCurrRow = lGLCurrRow + 1		&apos;// advance past total row
	for i = 0 to iSplitLim
		&apos;// extract key ledger fields for setting in new entries
		oCellDate = oGLSheet.getCellByPosition(COLDATE, lGLCurrRow)
		oCellTrans = oGLSheet.getCellByPosition(COLTRANS, lGLCurrRow)
		oCellDebit = oGLSheet.getCellByPosition(COLDEBIT, lGLCurrRow)
		oCellCredit = oGLSheet.getCellByPosition(COLCREDIT, lGLCurrRow)
		oCellAcct = oGLSheet.getCellByPosition(COLACCT, lGLCurrRow)
		oCellRef = oGLSheet.getCellByPosition(COLREF, lGLCurrRow)
		
		&apos;// set Date field in transaction line		
		oCellDate.setValue(DateValue(gsETDate))		&apos;// set date field to value
		oCellDate.NumberFormat = MMDDYY				&apos;// set mm/dd/yy format
		oCellDate.HoriJustify = RJUST				&apos;// right-justify date
		oCellDate.CellBackColor = LTGREEN			&apos;// set light green background
		
		&apos;// set Description field
		oCellTrans.String = gsSTDescs(i)
		oCellTrans.HoriJustify = LJUST
		oCellTrans.CellBackColor = NOFILL
		
		&apos;// set amount in proper column
		if gbETDebitIsTotal then		&apos;// credits split
			oCellDebit.String = &quot;&quot;
			oCellCredit.String = Str(gdSTAmts(i))
			oCellCredit.setValue(gdSTAmts(i))					
			oCellCredit.NumberFormat = DEC2
			oCellAcct.String = gsSTCOAs(i)
		else		&apos;// debits split
			oCellDebit.String = Str(gdSTAmts(i))
			oCellCredit.String = &quot;&quot;
			oCellDebit.setValue(gdSTAmts(i))					
			oCellDebit.NumberFormat = DEC2
			oCellAcct.String = gsSTCOAs(i)
		endif		&apos;// end debit is total conditional
	
		oCellDebit.HoriJustify = RJUST
		oCellDebit.CellBackColor = NOFILL
		oCellCredit.HoriJustify = RJUST
		oCellCredit.CellBackColor = NOFILL
		oCellAcct.HoriJustify = CJUST
		OCellAcct.CellBackColor = NOFILL
		
		oCellRef.String = gsSTRefs(i) 
		oCellRef.HoriJustify = CJUST
		oCellRef.CellBackColor = NOFILL
		
		lGLCurrRow = lGLCurrRow + 1	&apos;// advance to next transaction row
		
	next i		&apos;// advance split transaction row
&apos;*/-----------------------------------------------------------------------------
 if false then
 GoTo JumpAhead
 endif

&apos;/*--------------------------------------------------------------------------
	&apos;// create bottom row &quot;split&quot; divider with total
	&apos;// extract key ledger fields for setting in new entries
	oCellDate = oGLSheet.getCellByPosition(COLDATE, lGLCurrRow)
	oCellTrans = oGLSheet.getCellByPosition(COLTRANS, lGLCurrRow)
	oCellDebit = oGLSheet.getCellByPosition(COLDEBIT, lGLCurrRow)
	oCellCredit = oGLSheet.getCellByPosition(COLCREDIT, lGLCurrRow)
	oCellAcct = oGLSheet.getCellByPosition(COLACCT, lGLCurrRow)
	oCellRef = oGLSheet.getCellByPosition(COLREF, lGLCurrRow)
		
	&apos;// set Date field in transaction line		
	oCellDate.setValue(DateValue(gsETDate))		&apos;// set date field to value
	oCellDate.NumberFormat = MMDDYY				&apos;// set mm/dd/yy format
	oCellDate.HoriJustify = RJUST				&apos;// right-justify date
	oCellDate.CellBackColor = LTGREEN			&apos;// set light green background

	&apos;// set description field to ET description
	&apos;// gsETDescription = entered description
	oCellTrans.String = gsETDescription
	oCellTrans.CellBackColor = LTGREEN			&apos;// color entire last row
	oCellTrans.HoriJustify = LJUST
	
	&apos;//	set debit and credit amount fields to &quot;&quot;
	oCellDebit.String = &quot;&quot;
	oCellDebit.CellBackColor = LTGREEN
	oCellCredit.String = &quot;&quot;
	oCellCredit.CellBackColor = LTGREEN
	
	&apos;// set account field to appropriate SUM formula
	sSumFormula = SetSumFormula(oRange, gbETDebitIsTotal)
	oCellAcct.String = sSumFormula
	oCellAcct.SetFormula(sSumFormula)
	oCellAcct.NumberFormat = DEC2
	oCellAcct.HoriJustify = CJUST
	oCellAcct.CellBackColor = LTGREEN
	
	&apos;// set ref field to &quot;split&quot;
	oCellRef.String = &quot;split&quot;
	oCellRef.HoriJustify = CJUST
	oCellRef.CellBackColor = LTGREEN
&apos;*/----------------------------------------------------------------------------
JumpAhead:
	iRetValue = 0
	
NormalExit:
	ETDlgSplitRecord = iRetValue
	exit function
	
ErrorHandler:
	iRetValue = -1
	GoTo NormalExit
	

end function 	&apos;// end ETDlgSplitRecord	7/7/20
&apos;/**/
&apos;// ETPubVarsReset.bas
&apos;//--------------------------------------------------------------
&apos;// ETPubVarsReset - Reset all ET dialog public vars and flags
&apos;//		6/24/20.	wmk.	21:00
&apos;//---------------------------------------------------------------

public function ETPubVarsReset(piOpt As Integer) As Integer

&apos;//	Usage.	iVar = ETPubVarsReset( iOpt )
&apos;//
&apos;//		iOpt = 0 - reset all vars and flags except Date
&apos;//			 &lt;&gt; 0 - reset ALL fields
&apos;//
&apos;// Entry.	called by &lt;Cancel&gt; handling code where &lt;Cancel&gt; button
&apos;//			is type 2, and Listener bypassed
&apos;//			ET dialog public field values and flags defined
&apos;//			gbETDateEntered = date field entered flag
&apos;//			gsETDate = Date field string
&apos;/
&apos;//	Exit.	iVar = 0 - normal return
&apos;//				 &lt;&gt; 0 - error in resetting fields
&apos;//			gsET... vars all cleared to &quot;&quot;
&apos;//			gbET... flags al set to false
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/17/20.	wmk.	original code
&apos;//	6/24/20.	wmk.	change to type Double gdETAmount from String&apos;
&apos;//						dbETDebitIsTotal initialized true
&apos;//
&apos;//	Notes. Allows call to preserve date field for repetitive entries
&apos;// 6/24/20 WARNING: CHANGE ETSplitAmts ARRAY TO TYPE DOUBLE FROM STRING
&apos;// FOR COMPATIBILITY WITH ST DIALOG RETURNED VALUES...

&apos;//	constants.

&apos;//	local variables.
dim iRetValue 	As Integer		&apos;// returned value

	&apos;// code.
	
	iRetValue = 0
	ON ERROR GOTO ErrorHandler
	
&apos;// clear all fields and stored values
	&apos;// clear field entry flags
	&apos;// always clear these
	gbETDescEntered = false		&apos;// description entered flag
	gsETDescription = &quot;&quot;		&apos;// description entered
	gbETAmtEntered = false		&apos;// amount entered flag
	gdETAmount = 0. 			&apos;// debit and credit amt entered
	gbETRefEntered = false		&apos;// refereince entered flag
	gsETRef  = &quot;&quot;			&apos;// reference text
	gbETSplitTrans = false		&apos;// split transaction flag
 redim gsETSplitCOAs (0)		&apos;// list of COAs in split
 redim gsETSplitAmts (0)		&apos;// list of amounts in split
 redim gsETSplitDescs (0)		&apos;// list of descriptions in split
	gsETSPlitCOAs(0) = &quot;&quot;
	gsETSplitAmts(0) = &quot;&quot;
	gsETSplitDescs(0) = &quot;&quot;

	&apos;// if clear all do these too.
	if piOpt &lt;&gt; 0 then
	  gbETDateEntered = false		
	  gsETDate = &quot;&quot;
	  gbETCOA1Entered = false		&apos;// Debit COA entered flag
	  gbETCOA2Entered = false		&apos;// Credit COA entered flag
	  gbETDebitIsTotal = true		&apos;// Debit is total; credits split
	  gsETAcct1  = &quot;&quot;			&apos;// COA1 account
	  gsETAcct2  = &quot;&quot;			&apos;// COA2 account
    endif
    
	&apos;//	clear ET dialog stored values.
	
NormalExit:
	ETPubVarsReset = iRetValue
	exit function
	
ErrorHandler:
	iRetValue = -1		&apos;// set error return
	GoTo NormalExit
	

end function 	&apos;// end ETPubVarsReset	6/24/20
&apos;/**/
&apos;// ETRecdContListener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETRecdContListener - Event handler &lt;Record &amp; Continue&gt; from Enter Transaction.
&apos;//		1/11/24.	wmk.	20:52
&apos;//---------------------------------------------------------------------

public sub ETRecdContListener()

&apos;//	Usage.	macro call or
&apos;//			call ETRecdContListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user clicked the [Record &amp; Finish] button in ET dialog
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	Transaction data recorded in GL sheet at user selection
&apos;//			Transaction data in public vars cleared
&apos;//			ET dialog ended with flag = 2 (user closed)
&apos;//
&apos;// Calls.	ETDialogRecord, ETPubVarsReset, ETDialogReset.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	1/11/24.	wmk.	original; adapted from ETRecdDoneListener.
&apos;//
&apos;//	6/16/20.	wmk.	original code; stub
&apos;//	6/17/20.	wmk.	completed; waiting on ETDialogRecord functional
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;Record &amp; Continue&gt; cmd button in the Enter Transaction dialog. The
&apos;// only differences between this and &lt;Record &amp; Done&gt; is the call to
&apos;//	ETPubVarsReset(0) and the window not closing. 

&apos;//	constants.

&apos;//	local variables.
dim oETRecordBtn	As Object		&apos;// Record &amp; Finish button
dim oETRecordCont	As Object		&apos;// Record &amp; Continue button
dim iStatus 		As Integer		&apos;// general status

	&apos;// code.
	iStatus = -1		&apos;// set error return
	ON ERROR GoTo ErrorHandler

if ( 1 = 0 ) then
	msgbox(&quot;ETRecdContListener stubbed.. - exiting.&quot;)
	GOTO NormalExit
endif

	&apos;// record transaction
	iStatus = ETDialogRecord()
	if iStatus &lt; 0 then
		GoToErrorHandler
	endif

if ( 1 = 0 ) then	
	&apos;// clear all fields entered and associated flags
	iStatus = ETPubVarsReset(0)	&apos;// reset everything but date
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
endif
	&apos;// reset dialog.
	iStatus = ETDialogReset(0)	&apos;// reset everything but date
	if istatus &lt; 0 then
		GoTo ErrorHandler
	endif
	
NormalExit:
	exit sub
	
ErrorHandler:
	GoTo NormalExit
	
end sub		&apos;// end ETRecdContListener	1/11/24.
&apos;/**/
&apos;// ETRecdDoneListener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETRecdDoneListener - Event handler &lt;Record &amp;&apos; Continue&gt; from Enter Transaction.
&apos;//		9/7/22.	wmk.	11:39
&apos;//---------------------------------------------------------------------

public sub ETRecdDoneListener()

&apos;//	Usage.	macro call or
&apos;//			call ETRecdDoneListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user clicked the [Record &amp;&apos; Finish] button in ET dialog
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	Transaction data recorded in GL sheet at user selection
&apos;//			Transaction data in public vars cleared
&apos;//			ET dialog ended with flag = 2 (user closed)
&apos;//
&apos;// Calls.	ETDialogRecord, ETPubVarsReset
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/16/20.	wmk.	original code; stub
&apos;//	6/17/20.	wmk.	completed; waiting on ETDialogRecord functional
&apos;//	9/7/22.		wmk.	msgbox added to error handling.
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;Record &amp;&apos; Continue&gt; cmd button in the Enter Transaction dialog.

&apos;//	constants.

&apos;//	local variables.
dim oETRecordBtn	As Object		&apos;// Record &amp;&apos; Finish button
dim oETRecordCont	As Object		&apos;// Record &amp;&apos; Continue button
dim iStatus 		As Integer		&apos;// general status

	&apos;// code.
	iStatus = -1		&apos;// set error return
	ON ERROR GoTo ErrorHandler

	&apos;// record transaction
	iStatus = ETDialogRecord()
	if iStatus &lt; 0 then
		GoToErrorHandler
	endif
	
	&apos;// clear all fields entered and associated flags
	iStatus = ETPubVarsReset(1)	&apos;// reset everything
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	puoETDialog.endDialog(2)			&apos;// end dialog
	exit sub
	
ErrorHandler:
    msgbox(&quot;ETRecdDoneListener - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end ETRecdDoneListener	6/17/20
&apos;/**/
&apos;// ETRefHelpListener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETRefHelpListener - Event handler &lt;?&gt; from Enter Transaction.
&apos;//		6/16/20.	wmk.	18:00
&apos;//---------------------------------------------------------------------

public sub ETRefHelpListener()

&apos;//	Usage.	macro call or
&apos;//			call ETRefHelpListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user changed the &lt;reference&gt; field in Enter Transaction
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	msgBox displayed with Reference Help information
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/16/20.	wmk.	original code
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;Referemce&gt; text field in the Enter Transaction dialog.

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	msgBox(&quot;Reference field: This field can be used similar to a memo&quot; _
		+ CHR(13)+CHR(10) + &quot;field on a check. It may contain a notation&quot; _
		+ CHR(13)+CHR(10) + &quot;such as &apos;Monthly&apos;, return credit, etc.&quot; _
		+ CHR(13)+CHR(10) + &quot;and is limited to 12 characters.&quot;)

end sub		&apos;// end ETRefHelpListener	6/16/20
&apos;/**/
&apos;// ETRefListener.bas
&apos;//---------------------------------------------------------------------
&apos;// ETRefListener - Event handler &lt;Reference&gt; from Enter Transaction.
&apos;//		6/16/20.	wmk.	18:00
&apos;//---------------------------------------------------------------------

public sub ETRefListener()

&apos;//	Usage.	macro call or
&apos;//			call ETRefListener()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user changed the &lt;reference&gt; field in Enter Transaction
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	gsETRef = entered reference
&apos;//			gbETRefEntered = true if nonempty string
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/16/20.	wmk.	original code
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;Referemce&gt; text field in the Enter Transaction dialog.

&apos;//	constants.
dim bFormComplete	As Boolean		&apos;// all fields complete flag
dim oETRefText	As Object			&apos;// reference text field

&apos;//	local variables.

	&apos;// code.
	oETRefText = puoETDialog.getControl(&quot;RefField&quot;)
	gsETRef = oETRefText.Text
	gbETRefEntered = (Len(gsETRef)&gt;0)

end sub		&apos;// end ETRefListener	6/16/20
&apos;/**/
&apos;// ETSplitRun.bas
&apos;//---------------------------------------------------------------
&apos;// ETSplitRun - [Split] button Execute() event handler.
&apos;//		7/6/20.	wmk.	11:30
&apos;//---------------------------------------------------------------

public sub ETSplitRun()

&apos;//	Usage.	macro call or
&apos;//			call ETSplitRun( )
&apos;//
&apos;// Entry.	User clicked [Split] control in ET dialog
&apos;//			Standard library loaded, or else wouldn&apos;t be here
&apos;//			puoSTDialog = defined as object for dialog
&apos;//			gdSTTotalAmt = available for total from line 1 of transaction
&apos;//
&apos;//	Exit.	ST dialog run; on STdialog completion, global vars
&apos;//			set with ST dialog entries
&apos;//			gsSTDescs() = Description fields entered
&apos;//			gsSTAmts() = Amount fields entered
&apos;//			gsSTCOAs() = COA account fields entered
&apos;//			gsSTRefs() = Reference fields entered
&apos;//			gsSTTotalAcct = COA account for splitting
&apos;//			
&apos;//	ST Returned status = 	&lt;Cancel&gt; from ST dialog
&apos;//							&lt;Done&gt; from ST dialog
&apos;//			IF &lt;Done&gt;, activate [View Split] control
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.	wmk.	original code
&apos;//	6/27/20.	wmk.	message boxes eliminated; TotalAcct picked up from
&apos;//						ST dialog; disable ViewSplitBtn if user cancelled split
&apos;//	7/6/20.		wmk.	change to use GlobalScope libraries/BadAss
&apos;//
&apos;//	Notes.	[Split] button should only activate after line 1 of ET
&apos;// transaction has a nonzero value.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iStatus 	As Integer
dim	oDlgCtrl	As Object		&apos;// ET control object to access Split RB
dim oDlgCtrlA	As Object		&apos;// ET control object when accessing Debit/Credit

	&apos;// code.
	ON ERROR GOTO ErrorHandler	

&apos;// Initialize ET dialog.
	puoSTDialog = CreateUnoDialog(GlobalScope.DialogLibraries.BadAss.SplitDialog)

&apos;//	set total amount previously set by ET AmtField1...
	gdSTTotalAmt = gdETAmount	
&apos;	gdSTTotalAmt = 150.00

	iStatus = fSTDialogReset()		&apos;// attempt to reset/initialize dialog
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
	
	Select Case puoSTDialog.Execute()
	Case 2		&apos;// Done clicked
&apos;		msgBox(&quot;Record &amp;&apos; Finish clicked in Split Transaction&quot;)
		&apos;// update DebitField or CreditField field with &quot;split&quot; based on flag
&apos;//		gbSTSplitCredits = true; split CreditField; else split DebitField
		if gbSTSplitCredits then
			oDlgCtrl = puoETDialog.getControl(&quot;CreditField&quot;)
			oDlgCtrlA = puoETDialog.getControl(&quot;DebitField&quot;)
			oDlgCtrlA.Text = gsETAcct1		&apos;// Debit is total
		else
			oDlgCtrl = puoETDialog.getControl(&quot;DebitField&quot;)
			oDlgCtrlA = puoETDialog.getControl(&quot;CreditField&quot;)
			oDlgCtrlA.Text = gsETAcct2		&apos;// Credit is total
		endif	&apos;// end credits are split conditional
		oDlgCtrl.Text = &quot;split&quot;

		
		&apos;// enable [View Split] control
		oDlgCtrl = puoETDialog.getControl(&quot;ViewSplitBtn&quot;)
		oDlgCtrl.Model.Enabled = true
		
	Case 0		&apos;// Cancel Split
		iStatus = STPubVarsReset()	&apos;// reset everything
&apos;		msgBox(&quot;ST dialog Cancel or FormClose clicked&quot;)
		if iStatus &lt; 0 then
			GoTo ErrorHandler
		endif
		
		&apos;// came back cancelled - deselect Split radio button
		oDlgCtrl = puoETDialog.getControl(&quot;SplitOption&quot;)
		oDlgCtrl.State = false
		oDlgCtrl = puoETDialog.getControl(&quot;ViewSplitBtn&quot;)
		oDlgCtrl.Model.Enabled = false
		
	Case else
		msgBox(&quot;unevaluated dialog return&quot;)
	End Select

&apos;msgbox(&quot;Date entered: &quot; + gsETDate)
&apos;msgbox(&quot;Decription: &quot; + gsETDescription)
&apos;msgBox(&quot;Amount: &quot; + gsETAmount)
&apos;msgBox(&quot;Debit Account: &quot; + gsETAcct1)
&apos;msgBox(&quot;Credit Account: &quot; + gsETAcct2)
&apos;msgBox(&quot;Reference: &quot; + gsETRef)

	&apos;// clear instantiation of ET dialog
	puoSTDialog.dispose()

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;in ETSplitRun - error initializing Split dialog.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end ETSplitRun		7/6/20
&apos;/**/
&apos;// ETViewSplitRun.bas
&apos;//---------------------------------------------------------------
&apos;// ETViewSplitRun - [Split] button Execute() event handler.
&apos;//		7/6/20.	wmk.	12:30
&apos;//---------------------------------------------------------------

public sub ETViewSplitRun()

&apos;//	Usage.	macro call or
&apos;//			call ETViewSplitRun( )
&apos;//
&apos;// Entry.	User clicked [View Split] control in ET dialog
&apos;//			Standard library loaded, or else wouldn&apos;t be here
&apos;//			puoVSDialog = defined as object for dialog
&apos;//			gdSTTotalAmt = available for total from line 1 of transaction
&apos;//			gsSTDescs() = Description fields entered
&apos;//			gsSTAmts() = Amount fields entered
&apos;//			gsSTCOAs() = COA account fields entered
&apos;//			gsRefs() = Reference fields entered
&apos;//
&apos;//	Exit.	VS dialog run; on VSDialog completion, global vars
&apos;//			set with ST dialog entries
&apos;//	ST Returned status = 	&lt;Edit Split&gt; from VS dialog
&apos;//							&lt;Done&gt; from VS dialog
&apos;//			IF &lt;Done&gt;, activate [View Split] control
&apos;//
&apos;// Calls.	fVSDialogPreset(), ETSplitRun
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/26/20.	wmk.	original code; adapted from ETSplitRun;
&apos;//						minimal code executed to test linkage
&apos;//	6/27/20.	wmk.	initial bugs fixed; implement callout to
&apos;//						ST dialog if &lt;Edit Split&gt; in VS
&apos;//	7/6/20.		wmk.	change to GlobalScope/BadAss library
&apos;//
&apos;//	Notes.	[View Split] button should only activate after the user has
&apos;//	completed a transaction split using ST dialog.


&apos;//	constants.

&apos;//	local variables.
dim iStatus 	As Integer
dim	oDlgCtrl	As Object		&apos;// ET control object to access Split RB

	&apos;// code.
	ON ERROR GOTO ErrorHandler	

&apos;// Initialize ET dialog.
	puoVSDialog = CreateUnoDialog(GlobalScope.DialogLibraries.BadAss.ViewSplit)

if false then
GoTo JumpAround1
endif

	&apos;// all public vars from the ET and ST dialogs are still current
	&apos;// since this event is being handled for the ST dialog
	&apos;//	fVSDialogPreset will initialize all the display fields in the
	&apos;// VS dialog
	iStatus = fVSDialogPreset
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
	
JumpAround1:
	
	Select Case puoVSDialog.Execute()
	Case 2		&apos;// &lt;Edit Split&gt; clicked
		msgBox(&quot;&lt;Edit Split&gt; clicked in View Split&quot;)
		puoVSDialog.dispose()
		GoTo RunSplitDlg
	Case 0		&apos;// Cancel or Done
&apos;		iStatus = STPubVarsReset()	&apos;// reset everything
&apos;		msgBox(&quot;VS dialog Done or FormClose clicked&quot;)
&apos;		if iStatus &lt; 0 then
&apos;			GoTo ErrorHandler
&apos;		endif
&apos;		
&apos;		&apos;// came back cancelled - deselect Split radio button
&apos;		oDlgCtrl = puoETDialog.getControl(&quot;SplitOption&quot;)
&apos;		oDlgCtrl.State = false
		
	Case else
		msgBox(&quot;VS - unevaluated dialog return&quot;)
	End Select

&apos;msgbox(&quot;Date entered: &quot; + gsETDate)
&apos;msgbox(&quot;Decription: &quot; + gsETDescription)
&apos;msgBox(&quot;Amount: &quot; + gsETAmount)
&apos;msgBox(&quot;Debit Account: &quot; + gsETAcct1)
&apos;msgBox(&quot;Credit Account: &quot; + gsETAcct2)
&apos;msgBox(&quot;Reference: &quot; + gsETRef)

	&apos;// clear instantiation of VS dialog
	puoVSDialog.dispose()

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;in ETViewSplitRun - error initializing View Split dialog.&quot;)
	GoTo NormalExit

RunSplitDlg:
	gbSTEditMode = true
	call ETSplitRun()
	GoTo NormalExit
	
end sub		&apos;// end ETViewSplitRun		7/6/20
&apos;/**/
&apos;// F.bas
&apos;//---------------------------------------------------------------
&apos;// F - First attempt at dialog box processing. (COADialog)
&apos;//		6/15/20.	wmk.	17:00
&apos;//---------------------------------------------------------------

public sub F()

&apos;//	Usage.	macro call or
&apos;//			call F()
&apos;//
&apos;//		&lt;parameters description&gt;
&apos;//
&apos;// Entry.	Button click in dialog box		
&apos;//			puoCOADialog = declared object for COA dialog
&apos;//			puoCOAListBox = list box object
&apos;//			puoSelectBtn = declared object for &lt;Select&gt; button
&apos;//			pusCOASelected = reserved for COA string selected
&apos;//			current Component has sheet &quot;Chart of Accounts&quot; with COA table
&apos;//
&apos;//	Exit.	msgBox message displayed
&apos;//			pusCOASelected = COA selected
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/13/20.	wmk.	original code
&apos;//	6/14/20.	wmk.	call LoadCOAs and run form added; code
&apos;//						modified to use puoCOADialog object
&apos;//	6/15/20.	wmk.	name of COA list dialog changed; conbtrols
&apos;//						labeled as SelectButton, CancelButton
&apos;//	7/5/20.		wmk.	Entry dependencies updated
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;//	local variables.
&apos;dim oListBox As com.sun.star.awt.UnoControlListBox
dim oListBox As Object

Dim Dlg As Object
dim iCOACount As Integer

&apos;// code.
	DialogLibraries.LoadLibrary(&quot;Standard&quot;)

&apos;// Initialize COA Dialog
	puoCOADialog = CreateUnoDialog(DialogLibraries.Standard.COADialog)
	puoCOAListBox =puoCOADialog.getControl(&quot;COAList&quot;)
	puoCOASelectBtn = puoCOADialog.getControl(&quot;SelectBtn&quot;)
	puoCOASelectBtn.Model.Enabled = false			&apos;// disable button until user selects item
	iCOACount = LoadCOAs()
	puoCOAListBox.addItems(pusCOAList, 0)

	Select Case puoCOADialog.Execute()
	Case 2		&apos;// Select clicked
		msgBox(&quot;Select clicked in Chart of Accounts&quot;)
	Case 0		&apos;// Cancel
		pusCOASelected = &quot;&quot;		&apos;// since cancel, Execute() event skipped
		msgBox(&quot;Cancel or FormClose clicked&quot;)
	Case else
		msgBox(&quot;unevaluated dialog return&quot;)
	End Select
	msgBox(&quot;In Module2/F&quot; + CHR(13)+CHR(10) _
    	    + &quot;&apos;&quot;+pusCOASelected+&quot;&apos;&quot; + &quot; selected&quot;)

puoCOAListBox.dispose()
	
end sub		&apos;// end F	6/15/20
&apos;/**/
&apos;// fSTAmtLostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// fSTAmtLostFocus - Handle all AmtFld LostFocus events.
&apos;//		4/20/25.	wmk.
&apos;//---------------------------------------------------------------

public function fSTAmtLostFocus(psFldName As String) As Integer

&apos;//	Usage.	iVar = fSTAmtLostFocus(sFldName)
&apos;//
&apos;//	Parameters.	sFldName = name of dialog field losing focus
&apos;//				(e.g. &quot;AmtFld1&quot;)
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//			gdSTAmts() = updated with newly entered amount
&apos;//			gsSTObjFocus = name of object with focus
&apos;//			gdSTAccumTot = accumulated split total
&apos;//			gdSTTotalAmt = total amount to split
&apos;//
&apos;//	Exit.	gsSTAccumTot, gsSTTotalAmt updated with newly entered amount
&apos;//			&lt;Done&gt; button activated if dialog entries complete
&apos;//			next row fields activated if row complete
&apos;//
&apos;// Calls.	STFld6ToIndex, STUpdateAccumTot, CheckRowComplete, CheckComplete
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 4/20/25.	wmk.	(automated) Modification History sorted.
&apos;// 6/22/20.	wmk.	change name to begin with &quot;f&quot; so can be distinguished 
&apos;// 6/22/20.	 by sub with same name for testing. 
&apos;// 6/21/20.	wmk.	check for total reached before activating next row 
&apos;// 6/21/20.	wmk.	change to accept psFldName parameter; to be called by 
&apos;// 6/21/20.	 all STAmt.LostFocus events; changed totals check and 
&apos;// 6/21/20.	 activate &lt;Done&gt; conditional. 
&apos;// 6/20/20.	wmk.	original code; cloned from STAmtLostFocus. 

&apos;//	constants.

&apos;//	local variables.
dim iRetValue 		As Integer			&apos;// returned status
dim iStatus			As Integer			&apos;// general status
dim iRowIx			As Integer			&apos;// index of present row
dim oDlgControl		As Object			&apos;// field ptr
dim bRowComplete	As Boolean			&apos;// row complete flag
dim bDlgComplete	As Boolean			&apos;// dialog complete flag
dim bTotalMet		As Boolean			&apos;// split total met flag
dim sFldName 		As String			&apos;// local copy of field name

	&apos;// code.
	iRetValue = -1						&apos;// set bad return
	ON ERROR GOTO ErrorHandler
&apos;msgBox(&quot;In fSTAmtLostFocus entry values..&quot; + CHR(13)+CHR(10) _
&apos;	+ &quot;gdSTAccumTot = &quot; + gdSTAccumTot + CHR(13)+CHR(10) _
&apos;	+ &quot;gdSTTotalAmt = &quot; + gdSTTotalAmt + CHR(13)+CHR(10) _
&apos;	+ &quot;gsSTObjFocus = &apos;&quot; + gsSTObjFocus + &quot;&apos;&quot; )
	
	sFldName = psFldName				&apos;// use local copy of field name
&apos;msgBox(&quot;fSTAmtLostFocus - sFldName = &apos;&quot; + sFldName + &quot;&apos;&quot;)
	if Len(sFldName) &lt; 7 then
		GoTo ErrorHandler
	endif	&apos;// error - field name not set up for entry
	
	bDlgComplete = false
	iRowIx = STFld6ToIndex(sFldName)
	iStatus = STUpdateAccumTot(sFldName)
&apos;msgBox(&quot;In fSTAmtLostFocus values after update..&quot; + CHR(13)+CHR(10) _
&apos;	+ &quot;gdSTAccumTot = &quot; + gdSTAccumTot + CHR(13)+CHR(10) _
&apos;	+ &quot;gdSTTotalAmt = &quot; + gdSTTotalAmt )
	
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;// end error in updating accum total conditional

	bTotalMet = (iStatus = 1)
	bRowComplete = STRowComplete(iRowIx)
	if bRowComplete then
		bDlgComplete = STCheckComplete()
		oDlgControl = puoSTDialog.getControl(&quot;UnsplitTot&quot;)
&apos;		if gdSTAccumTot &lt; gdSTTotalAmt then		
		if oDlgControl.Value &gt; 0 then		
			&apos;// check for next row Enabled; if not, enable it
			iStatus = STEnableNextRow(iRowIx)
			if iStatus &lt; 0 then
				GoTo ErrorHandler
			endif
		else
			bTotalMet = true
		endif &apos;// end total not met yet conditional
		
	endif	&apos;// end row complete conditional
	
	&apos;// activate/deactivate &lt;Done&gt; control if dialog complete
	oDlgControl = puoSTDialog.getControl(&quot;DoneBtn&quot;)
&apos;	bDlgComplete = (bDlgComplete AND bTotalMet)
	bDlgComplete = (bDlgComplete OR bTotalMet)
	if bDlgComplete then
		oDlgControl.Model.Enabled = true
	else
		oDlgControl.Model.Enabled = false
	endif
	iRetValue = 0
	
NormalExit:
	fSTAmtLostFocus = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;In fSTAmtLostFocus - unprocessed error&quot;)
	iRetValue = iStatus
	GoTo NormalExit
	
end function		&apos;// end fSTAmtLostFocus		4/20/25.
&apos;/**/
&apos;// fVSDialogPreset.bas
&apos;//---------------------------------------------------------------
&apos;// fVSDialogPreset - Preset fields in VS dialog.
&apos;//		6/27/20.	wmk.	08:45
&apos;//---------------------------------------------------------------

public function fVSDialogPreset() As Integer	

&apos;//	Usage.	iVar = fVSDialogPreset()
&apos;//
&apos;// Entry.	gsSTDescs() = descriptions array
&apos;//			gdSTAmts() = split amounts array
&apos;//			gsSTCOAs() = COA accounts array
&apos;//			gsSTRefs() = references array
&apos;//			gbSplitCredits = true if gdSTAmts are Credits;
&apos;//							 false if gdSTAmts are Debits
&apos;//			gdSTTotalAmt = split total
&apos;//			VSDialog fields:
&apos;// DebitTotRB - Debit is total radio button
&apos;// CreditTotRB - Credit is total radio button
&apos;// TotalAmt - total transaction amount text box (numeric, read-only)
&apos;//	TotalAcctFld - account COA transaction being split from
&apos;// DescFld1 - description field 1
&apos;// ...
&apos;// DescFld10 - description field 10
&apos;//	AmtFld1 - split amount field 1	(numeric)
&apos;// ...
&apos;// AmtFld10 - split amount field 10 (numeric)
&apos;// AcctFld1 - COA account field 1
&apos;//	...
&apos;// AcctFld10 - COA account field 10
&apos;// DoneBtn - [Done] button
&apos;// EditBtn - [Reset Form] button
&apos;//
&apos;//	Exit.	iVar = 0 - no error in preset
&apos;//				 &lt; 0 - error in preset
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/26/20.	wmk.	original code
&apos;//	6/27/20.	wmk.	initial bug fixes; inactive cell backgrounds to MEDGRAY
&apos;//
&apos;//	Notes.


&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Integer
dim oVSDlgCtrl 	As Object
dim oVSDlgCtrl1 As Object		&apos;// 2nd control for when needed
dim i			As Integer		&apos;// loop index
dim iActiveLimit	As Integer	&apos;// active index limit in arrays
dim sFldNum		As String		&apos;// field number
dim sCTrlName	As String		&apos;// control name
dim oVSStyle	As Object		&apos;// to access FieldColor

	&apos;// code.
	
	iRetValue = -1
	ON ERROR GOTO ErrorHandler

	&apos;// set State of Debit/Credit radio buttons based on gbSTSplitCredits
	oVSDlgCtrl = puoVSDialog.getControl(&quot;DebitTotRB&quot;)
	oVSDlgCtrl1 = puoVSDialog.getControl(&quot;CreditTotRB&quot;)
	if gbSTSplitCredits then
		oVSDlgCtrl.State = true
		oVSDlgCtrl1.Model.Enabled = false
	else
		oVSDlgCtrl.State = false
		oVSDlgCtrl.Model.Enabled = false
		oVSDlgCtrl1.Model.Enabled = true
	endif
	
	&apos;// set Total field to gdSTTotalAmt
	oVSDlgCtrl = puoVSDialog.getControl(&quot;TotalAmt&quot;)
	oVSDlgCtrl.Value = gdSTTotalAmt

	&apos;// set account split from field
	oVSDlgCtrl = puoVSDialog.getControl(&quot;TotalAcctFld&quot;)
	if gbSTSplitCredits then
		oVSDlgCtrl.Text = gsETAcct1	&apos;// debit account
	else
		oVSDlgCtrl.Text = gsETAcct2	&apos;// credit account
	endif
	
	&apos;//	set all active Description, Amount, and COA fields for all
	&apos;// array values up to subscript UBound and set fields enabled
	&apos;// so easily visible. All fields are read-only.
	&apos;// set all inactive Description, Amount, and COA fields empty
	&apos;// and set Enabled to false to darken fields
	iActiveLimit = uBound(gdSTAmts)
	for i = 0 to iActiveLimit
		sFldNum = Trim(Str(i+1))
		sCtrlName = &quot;DescFld&quot; + sFldNum
		oVSDlgCtrl = puoVSDialog.getControl(sCtrlName)
		oVSDlgCtrl.Text = gsSTDescs(i)
		oVSDlgCtrl.Model.Enabled = true
		
		sCtrlName = &quot;AmtFld&quot; + sFldNum
		oVSDlgCtrl = puoVSDialog.getControl(sCtrlName)
		oVSDlgCtrl.Text = Str(gdSTAmts(i))
		oVSDlgCtrl.setValue(gdSTAmts(i))
		oVSDlgCtrl.Model.Enabled = true
		
		sCtrlName = &quot;AcctFld&quot; + sFldNum
		oVSDlgCtrl = puoVSDialog.getControl(sCtrlName)
		oVSDlgCtrl.Text = gsSTCOAs(i)
		oVSDlgCtrl.Model.Enabled = true
		
		sCtrlName = &quot;RefFld&quot; + sFldNum
		oVSDlgCtrl = puoVSDialog.getControl(sCtrlName)
		oVSDlgCtrl.Text = gsSTRefs(i)
		oVSDlgCtrl.Model.Enabled = true
		
	next i	&apos;// advance to next control name for each field

	&apos;// set remaining fields Enabled = false with no data
	if iActiveLimit &lt; 9 then
		for i = iActiveLimit+1 to 9
			sFldNum = Trim(Str(i+1))
			sCtrlName = &quot;DescFld&quot; + sFldNum
			oVSDlgCtrl = puoVSDialog.getControl(sCtrlName)
			oVSStyle = oVSDlgCtrl.StyleSettings
			oVSDlgCtrl.Model.Enabled = false
			oVSStyle.FieldColor = MEDGRAY

			sCtrlName = &quot;AmtFld&quot; + sFldNum
			oVSDlgCtrl = puoVSDialog.getControl(sCtrlName)
			oVSStyle = oVSDlgCtrl.StyleSettings
			oVSDlgCtrl.Model.Enabled = false
			oVSStyle.FieldColor = MEDGRAY
		
			sCtrlName = &quot;AcctFld&quot; + sFldNum
			oVSDlgCtrl = puoVSDialog.getControl(sCtrlName)
			oVSStyle = oVSDlgCtrl.StyleSettings
			oVSDlgCtrl.Model.Enabled = false
			oVSStyle.FieldColor = MEDGRAY
		
			sCtrlName = &quot;RefFld&quot; + sFldNum
			oVSDlgCtrl = puoVSDialog.getControl(sCtrlName)
			oVSStyle = oVSDlgCtrl.StyleSettings
			oVSDlgCtrl.Model.Enabled = false
			oVSStyle.FieldColor = MEDGRAY
		next i
		
	endif		&apos;// end active limit &lt; 9 conditional
	

	iRetValue = 0	&apos;// normal return
	
NormalExit:	
	fVSDialogPreset = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;fVSDialogPreset - i = &quot; + i + &quot; unprocessed error.&quot;)
	GoTo NormalExit
	
end function 	&apos;// end fVSDialogPreset	6/27/20
&apos;/**/
&apos;// GA.bas
&apos;//---------------------------------------------------------------
&apos;// GA - Store user selected COA in first cell in selected range
&apos;// (Shortcut for GetCOA(1)
&apos;//		9/7/22.	wmk.	17:30
&apos;//---------------------------------------------------------------

public sub GA()

&apos;//	Usage.	macro call or
&apos;//			call GA()
&apos;//
&apos;// Entry.	pbCOADlgExists = true if COA dialog previously initialized
&apos;//							 false if initialized here
&apos;//			BadAss library loaded (automatic event on document open)
&apos;//
&apos;//	Exit.	if user did not cancel dialog, user selected COA stored at
&apos;//			first cell in currently selected range
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/7/22.		wmk.	case corrected 1=OK, store selection.
&apos;// Legacy mods.
&apos;//	7/5/20.		wmk.	original code; adapted from GetCOA
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim sRetValue As String		&apos;// returned COA
dim iStatus As Integer		&apos;// general status
dim iCOACount As Integer	&apos;// COA list length
dim	oDoc		As Object	&apos;// ThisComponent
dim oSel		As Object	&apos;// CellRangeAddress; current selection
dim oAcct		As Object	&apos;// COA cell user selected
dim lColumn		As Long		&apos;// selected column
dim lRow		As Long		&apos;// selected row
static oSheet		As Object	&apos;// selected sheet
dim iSheetIx	As Integer	&apos;/// sheet index

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oDoc = ThisComponent
	oSel = oDoc.getCurrentSelection()
	iSheetIx = oSel.RangeAddress.Sheet
	oSheet = oDoc.Sheets.getByIndex(iSheetIx)
	lColumn = oSel.RangeAddress.StartColumn
	lRow = oSel.RangeAddress.StartRow
			
&apos;		iStatus = LoadStdLibrary()		&apos;// ensure dialogs
&apos;DialogLibraries.LoadLibrary(&quot;Standard&quot;)
&apos;		iStatus = LoadBadAssLib()		&apos;// ensure dialogs
&apos;
&apos;		if iStatus &lt; 0 then
&apos;			GoTo ErrorHandler
&apos;		endif

	&apos;// create dialog if not yet done
	if NOT pbCOADlgExists then
		puoCOADialog = CreateUnoDialog(GlobalScope.DialogLibraries.BadAss.COADialog)
		pbCOADlgExists = true
	endif	&apos;// end dialog non-existent conditional
		&apos;// load list with COA strings
	puoCOAListBox = puoCOADialog.getControl(&quot;COAList&quot;)
	puoCOASelectBtn = puoCOADialog.getControl(&quot;SelectBtn&quot;)
	puoCOASelectBtn.Model.Enabled = false			&apos;// disable button until user selects item
	iCOACount = LoadCOAs()
	puoCOAListBox.addItems(pusCOAList, 0)

	&apos;// run dialog and get user selection
dim iDlgStatus	AS Integer
	pbETActive = false
	iDlgStatus = puoCOADialog.Execute()
	Select Case iDlgStatus
	Case 1		&apos;// Select clicked
&apos;		msgBox(&quot;COA Selected: &quot; + pusCOASelected)
&apos;			msgBox(&quot;Select clicked in Chart of Accounts&quot;)
		&apos;// store COA in first cell of oSel range
		oAcct = oSheet.getCellByPosition(lColumn, lRow)
		oAcct.String = Left(oAcct.String,4)
		oAcct.HoriJustify = CJUST
		
	Case 0		&apos;// Cancel
		pusCOASelected = &quot;&quot;		&apos;// since cancel, Execute() event skipped
&apos;			msgBox(&quot;Cancel or FormClose clicked&quot;)
	Case else
		msgBox(&quot;unevaluated COA dialog return&quot;)
	End Select

		
NormalExit:

&apos;msgBox(&quot;In GA&quot; + CHR(13)+CHR(10) _
&apos;        + &quot;&apos;&quot;+sRetValue+&quot;&apos;&quot; + &quot; selected&quot;)

	exit sub
	
ErrorHandler:
	msgBox(&quot;In GA - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end GA		9/7/22
&apos;/**/
&apos;// G.bas
&apos;//---------------------------------------------------------------
&apos;// G - Enter Transaction Dialog test procedure.
&apos;//		8/26/22.	wmk.	10:26	
&apos;//----------------------------------------------------------------

public sub G()

&apos;//	Usage.	macro call or
&apos;//			call G()
&apos;//
&apos;//		Run ET dialog...
&apos;//
&apos;// Entry.	Button click in dialog box		
&apos;//			puoETDialog = declared object for COA dialog
&apos;//
&apos;//	Exit.	msgBox message displayed
&apos;//
&apos;// Calls.	ETPubVarsReset
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/15/20.	wmk.	original code.
&apos;// 6/16/10.	wmk.	message boxes for verifification.
&apos;//	6/17/20.	wmk.	add ETPubVars reset call on Cancel.
&apos;//	6/25/20.	wmk.	gsETAmount corrected to new gdETAmount.
&apos;//	6/27/20.	wmk.	msgBoxes commented to deactivate.
&apos;// 8/26/22.	wmk.	eliminate references to G. bas.
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
&apos;dim oListBox As com.sun.star.awt.UnoControlListBox
dim iStatus As Integer

&apos;// code.
DialogLibraries.LoadLibrary(&quot;Standard&quot;)

&apos;// Initialize ET dialog.
	puoETDialog = CreateUnoDialog(DialogLibraries.Standard.TransEntry)

	Select Case puoETDialog.Execute()
	Case 2		&apos;// Record &amp;&apos; Finish clicked
&apos;		msgBox(&quot;Record &amp;&apos; Finish clicked in Enter Transaction&quot;)
		&apos;// iStatus = ETDialogRecord... called by [Record &amp;&apos; Finish]
	Case 0		&apos;// Cancel
&apos;		pusCOASelected = &quot;&quot;		&apos;// since cancel, Execute() event skipped
		iStatus = ETPubVarsReset(1)	&apos;// reset everything
&apos;		msgBox(&quot;Cancel or FormClose clicked&quot;)
	Case else
		msgBox(&quot;G- unevaluated dialog return&quot;)
	End Select

&apos;msgbox(&quot;Date entered: &quot; + gsETDate)
&apos;msgbox(&quot;Decription: &quot; + gsETDescription)
&apos;msgBox(&quot;Amount: &quot; + gdETAmount)
&apos;msgBox(&quot;Debit Account: &quot; + gsETAcct1)
&apos;msgBox(&quot;Credit Account: &quot; + gsETAcct2)
&apos;msgBox(&quot;Reference: &quot; + gsETRef)

puoETDialog.dispose()
	
end sub		&apos;// end G	8/26/22
&apos;/**/
&apos;// GetCOA.bas
&apos;//---------------------------------------------------------------
&apos;// GetCOA - Return user selected COA.
&apos;//		9/7/22.	wmk.	17:29
&apos;//---------------------------------------------------------------

public function GetCOA(piFromOpt As Integer) As String

&apos;//	Usage.	sVar = GetCOA(iFromOpt)
&apos;//
&apos;//		iFromPrompt = USELAST (0) - use COA from last user selection
&apos;//					  SELECTNEW (1) - use dialog to have user get COA
&apos;//
&apos;// Entry.	pusCOASelected = COA full string from last dialog
&apos;//			pbCOADlgExists = true if COA dialog previously initialized
&apos;//							 false if initialized here
&apos;//
&apos;//	Exit.	sVar = first 4 chars of COA user selected;
&apos;//				   if USELAST option, from pusCOASelected on entry
&apos;//				   if SELECTNEW option, from Chart of Accounts dialog
&apos;//
&apos;// Calls.	[LoadStdLibrary] LoadBadAssLib
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 9/7/22.		wmk.	case corrected 1=OK - record COA from dialog.
&apos;// Legacy mods.
&apos;//	6/14/20.	wmk.	original code
&apos;//	6/16/20.	wmk.	update to use new COADialog (formerly ListBox);
&apos;//	6/17/20.	wmk.	correct load dialog code to initialize
&apos;//						puoCOASelectBtn; debug msgBox calls removed&apos;//
&apos;//	7/5/20.		wmk.	change to load BadAss library
&apos;//	7/6/20.		wmk.	make dialog reload unconditional
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.
const USELAST=0		&apos;// use last COA selected
const SELECTNEW=1	&apos;// select new COA from dialog

&apos;//	local variables.
dim sRetValue As String		&apos;// returned COA
dim iStatus As Integer		&apos;// general status
dim iCOACount As Integer	&apos;// COA list length
static sLastCOA As String	&apos;// last COA selected

	&apos;// code.
	
	sRetValue = &quot;&quot;
	iStatus = 0
	if piFromOpt = USELAST then
&apos;		sRetValue = Left(pusCOASelected, 4)
		sRetValue = sLastCOA
		GoTo NormalExit
	else
		iStatus = LoadStdLibrary()		&apos;// ensure dialogs
&apos;DialogLibraries.LoadLibrary(&quot;Standard&quot;)
		iStatus = LoadBadAssLib()		&apos;// ensure dialogs

		if iStatus &lt; 0 then
			GoTo ErrorHandler
		endif

		&apos;// create dialog if not yet done
&apos;		if NOT pbCOADlgExists then
			puoCOADialog = CreateUnoDialog(GlobalScope.DialogLibraries.BadAss.COADialog)
			pbCOADlgExists = true
			&apos;// load list with COA strings
			puoCOAListBox = puoCOADialog.getControl(&quot;COAList&quot;)
			puoCOASelectBtn = puoCOADialog.getControl(&quot;SelectBtn&quot;)
			puoCOASelectBtn.Model.Enabled = false			&apos;// disable button until user selects item
			iCOACount = LoadCOAs()
			puoCOAListBox.addItems(pusCOAList, 0)
&apos;		endif	&apos;// end dialog non-existent conditional

		&apos;// run dialog and get user selection
		Select Case puoCOADialog.Execute()
		Case 1		&apos;// Select clicked - same as OK
&apos;			msgBox(&quot;COA Selected: &quot; + pusCOASelected)
&apos;			msgBox(&quot;Select clicked in Chart of Accounts&quot;)
			sLastCOA = pusCOASelected
			puoCOADialog.endDialog(2)
		Case 0		&apos;// Cancel
			pusCOASelected = &quot;&quot;		&apos;// since cancel, Execute() event skipped
&apos;			msgBox(&quot;Cancel or FormClose clicked&quot;)
		Case else
			msgBox(&quot;unevaluated COA dialog return&quot;)
		End Select

		sRetValue = Left(pusCOASelected, 4)
		
	endif	&apos;// end use last COA conditional
	
NormalExit:

&apos;msgBox(&quot;In Module2/GetCOA&quot; + CHR(13)+CHR(10) _
&apos;        + &quot;&apos;&quot;+sRetValue+&quot;&apos;&quot; + &quot; selected&quot;)

	GetCOA = sRetValue
	exit function
	
ErrorHandler:
	sRetValue = &quot;&quot;
	GoTo NormalExit
	
end function 	&apos;// end GetCOA		9/7/22
&apos;/**/
&apos;// H.bas
&apos;//---------------------------------------------------------------
&apos;// H - Split Transaction Dialog test procedure.
&apos;//		8/26/22.	wmk.	10:24
&apos;//----------------------------------------------------------------

public sub H()

&apos;//	Usage.	macro call or
&apos;//			call H()
&apos;//
&apos;// Entry.	Button click in dialog box		
&apos;//			puoSTDialog = declared object for Split Transaction dialog
&apos;//
&apos;//	Exit.	gdSTTotalAmt = contrived total to split, say 150.00
&apos;//			msgBox message displayed
&apos;//
&apos;// Calls.	STPubVarsReset
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code; adapted from G. bas.
&apos;//	6/23/20.	wmk.	change to use fDialogReset.
&apos;// 8/26/22.	wmk.	add intervening space to G. bas and H .bas in comments.
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iStatus As Integer
dim dDummy As Double
dim sDummy As String

	&apos;// code.
&apos;	sDummy = Str(dDummy)
&apos;	msgBox(&quot;string conversion of empty value is: &quot; +sDummy)
&apos;	GoTo NormalExit
	ON ERROR GOTO ErrorHandler	
	DialogLibraries.LoadLibrary(&quot;Standard&quot;)

&apos;// Initialize ST dialog.
	puoSTDialog = CreateUnoDialog(DialogLibraries.Standard.SplitDialog)
&apos;XRay puoSTDialog	
	&apos;// emulate dialog being fired with Total to split initialized
	&apos;// in public vars
	gdSTTotalAmt = 150.00
	iStatus = fSTDialogReset()		&apos;// attempt to reset/initialize dialog
&apos;	if iStatus &lt; 0 then
&apos;		GoTo ErrorHandler
&apos;	endif
	dim oFld As Object
	oFld = puoSTDialog.getControl(&quot;HasFocusFld&quot;)
	oFld.Text = &quot;Gotcha&quot;
	Select Case puoSTDialog.Execute()
	Case 2		&apos;// Record &amp;&apos; Finish clicked
		msgBox(&quot;&lt;Done&gt;h clicked in Split Transaction&quot;)
	Case 0		&apos;// Cancel
		iStatus = STPubVarsReset()	&apos;// reset everything
		msgBox(&quot;ST dialog Cancel or FormClose clicked&quot;)
	Case else
		msgBox(&quot;unevaluated dialog return&quot;)
	End Select

&apos;msgbox(&quot;Date entered: &quot; + gsETDate)
&apos;msgbox(&quot;Decription: &quot; + gsETDescription)
&apos;msgBox(&quot;Amount: &quot; + gsETAmount)
&apos;msgBox(&quot;Debit Account: &quot; + gsETAcct1)
&apos;msgBox(&quot;Credit Account: &quot; + gsETAcct2)
&apos;msgBox(&quot;Reference: &quot; + gsETRef)

puoSTDialog.dispose()
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;in H - error initializing Split dialog.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end H	8/26/22
&apos;/**/
&apos;// LoadBadAssLib.bas
&apos;//---------------------------------------------------------------
&apos;// LoadBadAssLib - Load BadAss Dialog library.
&apos;//		7/6/20.	wmk.	12:45
&apos;//---------------------------------------------------------------

public function LoadBadAssLib() As Integer

&apos;//	Usage.	iVal = LoadBadAssLib()
&apos;//
&apos;// Entry.	pbDlgLibLoaded = true if Standard dialogs already loaded
&apos;//							 false otherwisd
&apos;//
&apos;//	Exit.	iVal = 0 - normal return
&apos;//				   -1 - error encountered in load
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/30/20.		wmk.	original code
&apos;//	7/6/20.		wmk.	BadAss load unconditional; change to BasicLibraries
&apos;//
&apos;//	Notes. Adapted from LoadStdLibrary to use My Macros library BadAss.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Integer

	&apos;// code.
	
	iRetValue = -1		&apos;// set abnormal return
	ON ERROR GOTO ErrorHandler
	
&apos;	if NOT pbDlgLibLoaded then
		GlobalScope.BasicLibraries.LoadLibrary(&quot;BadAss&quot;)
		pbDlgLibLoaded = true
&apos;	endif	&apos;// end library not loaded conditional

	iRetValue = 0		&apos;// set normal return
	
NormalExit:
	LoadBadAssLib = iRetValue
	exit function
	
ErrorHandler:
	GoTo NormalExit

end function 	&apos;// end LoadBadAssLib	7/6/20
&apos;/**/
&apos;// LoadCOAs.bas
&apos;//---------------------------------------------------------------
&apos;// LoadCOAs - Load COA account#s for list boxes.
&apos;//		7/6/20.	wmk.	07:30
&apos;//---------------------------------------------------------------

public function LoadCOAs() as Integer

&apos;//	Usage.	iVal = LoadCOAs()
&apos;//
&apos;// Entry.	pusCOA_Assets = array allocated for Asset COAs
&apos;//			pusCOA_Liabilities = array for Liability COAs
&apos;//			pusCOA_Income = array for Income COAs
&apos;//			pusCOA_Expenses = array for Expense COAs
&apos;//			pusCOAList = array for COA list for listbox
&apos;//			COA_SHEET = sheet name of COA worksheet
&apos;//			COA_COLSTART = starting column of COA loadable list
&apos;//			COA_ROWSTART = starting row of COA loadable list
&apos;//			sCOA_1STROWID = string to match verifying 1st row COA list
&apos;//			sCOA_LASTROWID = string to match verifying last row COA list
&apos;//			COA_NASSETS = Assets COA entry count
&apos;//
&apos;//	Exit.	iVal = 0 - no errors encountered
&apos;//				  -1 - bad load
&apos;//
&apos;// Calls.	&lt;other subs/functions called&gt;
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/13/20.	wmk.	original code; stub
&apos;//	6/14/20.	wmk.	code completed.
&apos;//	6/30/20.	wmk.	comments updated.
&apos;//	7/6/20.		wmk.	modified to get COA entry count from 2 columns to
&apos;//						right of &quot;BEGIN COA&quot; (COA_COLROWS)
&apos;//
&apos;//	Notes. Initial version knows how many rows to expect by public constants
&apos;//	set internally for each accounting category. Future version can be
&apos;// generalized to load &quot;n&quot; rows where &quot;n&quot; is specified at the head of
&apos;// the COA table in the Chart of Accounts.


&apos;//	constants.
const ERRNOTCOATBL=-2		&apos;// COA table not where expected

&apos;//	local variables.
dim iRetValue As Integer
dim iAsset As Integer		&apos;// asset COA counter
dim iLiability As Integer	&apos;// liability COA counter
dim iIncome As Integer		&apos;// income COA counter
dim iExpense As Integer		&apos;// expense COA counter
dim oDoc As Object			&apos;// component
dim oSheets As Object		&apos;// sheets array
dim oCOASheet As Object		&apos;// COA sheet
dim oCOACell As Object		&apos;// COA cell general object
dim oCOACntCell	As Object	&apos;// cell with COA count
dim bIsCOATable As Boolean	&apos;// is COA table flag
dim sCOAList(0) As String	&apos;// COA list array

dim iRowsExpected As Integer		&apos;// expected row count
dim i	As Integer					&apos;// loop count
dim oAcctCell As Object				&apos;// account name cell
dim bTableEndFound As Boolean		&apos;// end of table found
dim lCurrRow As Long				&apos;// current row index
dim iBrkPt As Integer				&apos;// breakpoint finder


&apos;//----------in sub/function error handling setup-------------------------------
&apos;// Error Handling setup snippet.
	const sMyName=&quot;LoadCOAs&quot;
	dim lLogRow as long		&apos;// cell row working on
	dim lLogCol as Long		&apos;// cell column working on
	dim iLogSheetIx as Integer	&apos;// sheet index module working on
	dim oLogRange as new com.sun.star.table.CellRangeAddress

&apos;// LogError setup snippet.
	const csERRUNKNOWN=&quot;ERRUNKNOWN&quot;
&apos;// add additional error code strings here...
	Dim sErrName as String		&apos;// error name for LogError
	Dim sErrMsg As String		&apos;// error message for LogError

	&apos;// code.
	
	iRetValue = -1
	ON ERROR GOTO ErrorHandler
	sErrName = &quot;ERRUNKNOWN&quot;
	sErrMsg = &quot;In LoadCOAs - unprocessed error.&quot;

	&apos;// set up access to COA sheet
	oDoc = ThisComponent		&apos;// get into document
	oSheets = oDoc.getSheets()
	oCOASheet = oSheets.getByName(COA_SHEET)
	
&apos;//-----------in sub/function error handling initialization-------------
&apos;//	dim oDoc as Object		&apos;// ThisComponent
&apos;//	dim oSheets as Object	&apos;// oDoc.Sheets
&apos;//	code to put sheet index into oLogRange.Sheet
	oLogRange.Sheet = oCOASheet.RangeAddress.Sheet
	lLogCol = COA_COLSTART
	lLogRow = COA_ROWSTART
	oLogRange.StartColumn = lLogCol
	oLogRange.StartRow = lLogRow
	oLogRange.EndRow = lLogRow
	oLogRange.EndColumn = lLogCol
	Call ErrLogSetup(oLogRange, sMyName)
	ErrLogSetRecording(true)
&apos;//-----------end in sub/function error handling initialization---------

	
	iAsset = 0			&apos;// clear counters
	iLiability = 0
	iIncome = 0
	iExpense = 0
	
	&apos;// get COA table 1st row and verify
	oCOACell = oCOASheet.getCellByPosition(COA_COLSTART, COA_ROWSTART)
	bIsCOATable = (StrComp(Trim(oCOACell.String), sCOA_1STROWID)=0)
	if NOT bIsCOATable then
		iRetValue = ERRNOTCOATBL
		sErrName = &quot;ERRNOTCOATBL&quot;
		sErrMsg = &quot;LoadCOAs/Invalid COA table&quot;
		GoTo ErrorHandler
	endif

	oCOACntCell = oCOASheet.getCellByPosition(COA_COLROWS, COA_ROWSTART)

&apos;	iRowsExpected = COA_NASSETS + COA_NLIABILITIES + COA_NINCOME _
&apos;					+ COA_NEXPENSES
	iRowsExpected = oCOACntCell.Value
	if iRowsExpected &lt; 1 then
		sErrName = &quot;ERRCOACOUNT&quot;
		sErrMsg = &quot;LoadCOAs/Invalid COA count in table&quot;
		GOTO ErrorHandler
	endif
redim pusCOAList(iRowsExpected-1)		&apos;// minus 1, since 0-based

	lCurrRow = COA_ROWSTART + 1
	&apos;// loop on rows until termination string found &quot;****&quot;
	for i = 0 to iRowsExpected
		oAcctCell = oCOASheet.getCellByPosition(COA_COLSTART, lCurrRow)
		bTableEndFound = (StrComp(oAcctCell.String, sCOA_LASTROWID)=0)
		if bTableEndFound then
			if i &lt;&gt; iRowsExpected then
				iRetValue = ERRCOACOUNT
				sErrName = &quot;ERRCOACOUNT&quot;
				sErrMsg = &quot;LoadCOAs/Table entry count mismatch&quot;
				GoTo ErrorHandler
			else
				exit for
			endif	&apos;// end wrong row count conditional			
		endif	&apos;// end table end found conditional
	
		&apos;// combine and store COA strings
		oCOACell = oCOASheet.getCellByPosition(COA_COLSTART+1, lCurrRow)
		pusCOAList(i) = oCOACell.String +&quot; &quot; + oAcctCell.String
		lCurrRow = lCurrRow + 1
	next i

	&apos;// check for premature table end
	if i &lt; iRowsExpected then
		iRetValue = ERRCOACOUNT
		sErrName = &quot;ERRCOACOUNT&quot;
		sErrMsg = &quot;LoadCOAs/Table entry count mismatch&quot;
		GoTo ErrorHandler
	endif
	
iBrkPt = 1		&apos;// no errors		
					
	iRetValue = 0		&apos;// set normal return
	
NormalExit:
	call ErrLogDisable()		&apos;// disable error logging
	iRetValue = iRowsExpected	&apos;// return row count
	LoadCOAs = iRetValue
	exit function
	
ErrorHandler:
	Call LogError(sErrName, sErrMsg)
	GoTo NormalExit
	
end function 	&apos;// end LoadCOAs	7/6/20
&apos;/**/
&apos;// LoadStdLibrary.bas
&apos;//---------------------------------------------------------------
&apos;// LoadStdLibrary - Load Standard Dialog library.
&apos;//		7/5/20.	wmk.	22:00
&apos;//---------------------------------------------------------------

public function LoadStdLibrary() As Integer

&apos;//	Usage.	iVal = LoadStdLibrary()
&apos;//
&apos;// Entry.	pbDlgLibLoaded = true if Standard dialogs already loaded
&apos;//							 false otherwisd
&apos;//
&apos;//	Exit.	iVal = 0 - normal return
&apos;//				   -1 - error encountered in load
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/14/20.	wmk.	original code
&apos;//	7/5/20.		wmk.	bug fix; LoadStdLib return corrected to LoadStdLibrary
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Integer

	&apos;// code.
	
	iRetValue = -1		&apos;// set abnormal return
	ON ERROR GOTO ErrorHandler
	
	if NOT pbDlgLibLoaded then
		DialogLibraries.LoadLibrary(&quot;Standard&quot;)
		pbDlgLibLoaded = true
	endif	&apos;// end library not loaded conditional

	iRetValue = 0		&apos;// set normal return
	
NormalExit:
	LoadStdLibrary = iRetValue
	exit function
	
ErrorHandler:
	GoTo NormalExit

end function 	&apos;// end LoadStdLibrary	7/5/20
&apos;/**/
&apos;// PlaceSplitTotal.bas
&apos;//------------------------------------------------------------------
&apos;// PlaceSplitTotal - Itemize split transaction in total COA account.
&apos;//		4/19/25.	wmk.
&apos;//------------------------------------------------------------------

public function PlaceSplitTotal(poGLRange As Object, psAcct As String) As Integer

&apos;//	Usage.	iVal = PlaceSplitTotal(oGLRange, sAcct)
&apos;//
&apos;//		oGLRange = RangeAddress information for GL sheet
&apos;//		sAcct = Total COA account from which items split
&apos;//
&apos;// Entry.	oGLRange.Sheet = index of ledger sheet
&apos;//					.StartColumn = index of starting column
&apos;//					.StartRow = index of first &quot;split&quot; row
&apos;//					.EndColumn = index of ending column
&apos;//					.EndRow = index of last &quot;split&quot; row
&apos;//
&apos;//	Exit.	iVal = 0 - normal return
&apos;//				   ERRCONTINUE - nonfatal error; continue processing
&apos;//				   ERRSTOP - fatal error; stop processing transactions
&apos;//
&apos;// Calls.	GetMonthName, GetTransSheetName, GetInsRow, SetSumFormula
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 4/19/25.	wmk.	Function &gt; function at end for block parsing.
&apos;//	6/4/20.		wmk.	original code
&apos;//	6/6/20.		wmk.
&apos;//	6/27/20.	wmk.	superfluous &quot;if&quot; removed
&apos;//	7/8/20.		wmk.	code to remove extra row in source COA transaction	
&apos;//
&apos;//	Notes.
&apos;// This function adds lines to the splitting account category
&apos;// then copies lines from the original &quot;split&quot; transaction
&apos;// except for the Total transaction line; then moves the
&apos;// nonempty Debit or Credit range into the opposing column
&apos;// and ensures that the SUM formula in the last &quot;split&quot; row
&apos;// is corrected to sum the moved data.
&apos;//

&apos;//	constants.
const FORMULA=3		&apos;// FORMULA type on cell

&apos;//	local variables.
dim iRetValue As Integer		&apos;// returned value
dim oDoc As Object				&apos;// ThisComponent
dim oSheets As Object			&apos;// Doc.getSheets()
dim iSheetIx As Integer			&apos;// sheet index of ledger
dim oGLSheet As Object			&apos;// ledger sheet object
dim sSplitAcct As String		&apos;// COA of account splitting from
dim iBrkPt As Integer			&apos;// easy breakpoint

&apos;//	GL transaction variables.
dim oGLCellDate	As Object		&apos;// Date cell from GL
dim sStyle	As String			&apos;// cell style
dim sDate	As String			&apos;// date field string
dim sMonth	As String			&apos;// month name of date (e.g. &quot;January&quot;)
dim l1stRow	As Long				&apos;// first &quot;split&quot; row
dim lLastRow As Long			&apos;// last &quot;split&quot; row
dim lRowCount	As Long			&apos;// transaction row count between &quot;split&quot;s

&apos;//	COA category sheet variables.
dim sAcctCat2 As String			&apos;// COA account category total transaction
dim oCat2Sheet As Object		&apos;// COA account sheet for total
dim lCat2InsRow	As Long			&apos;// COA sheet insertion row
dim oDebitCell as Object
dim bMoveDebits as Boolean
dim oFormulaCell As Object
dim sFormula As String
dim sFormStart as String
dim lCat2CurrRow as Long	&apos;// insertion sheet current row
dim li as Long				&apos;// long loop counter
dim oDateCell as Object		&apos;// Date cell object

	&apos;// code.
	sSplitAcct = psAcct			&apos;// copy COA account string
	
	iRetValue = 0
	
	PlaceSplitTotal = iRetValue
	
&apos;	if true then
&apos;		Exit Function
&apos;	endif

&apos;//---------------begin PlaceSplitTotal here------------------------
&apos;//	poGLSheet is the ledger sheet with the whole transaction
&apos;// sSplitAcct is the account that has the total COA
		&apos;//==========================================================
&apos;//-----------------error handling setup-----------------------------
dim sErrCallerMod 	As String	&apos;// caller routine name
dim iErrSheetIx		As Integer	&apos;// caller sheet index
dim lErrColumn		As Long		&apos;// caller error focus column
dim lErrRow			As Long		&apos;// caller error focus row
dim sMyName			As String	&apos;// this routine name
	&apos;//*-----------------preserve error handling for caller-----------
	&apos;// preserve caller error settings.
	sErrCallerMod = ErrLogGetModule()
	iErrSheetIx = ErrLogGetSheet()
	ErrLogGetCellInfo(lErrColumn, lErrRow)
	&apos;// set up new error settings.
	sMyName = &quot;PlaceSplitTotal&quot;
	ErrLogSetModule(sMyName)
	ErrLogSetSheet(poGLRange.Sheet)
	ErrLogSetCellInfo(poGLRange.StartColumn, poGLRange.StartRow)
&apos;//*----------end error handling setup-------------------------------

		&apos;//	insertCells...
&apos;// entry.	sSplitAcct is the COA from the total line entry
&apos;//         oGLCellDate.Text.String is the Date field from the totals
&apos;//			 line entry
&apos;//			oSheets object is the Sheets[] array this component

	oDoc = ThisComponent			&apos;// set component and access objects
	oSheets = oDoc.getSheets()
	iSheetIx = poGLRange.Sheet
	oGLSheet = oSheets.getByIndex(iSheetIx)
	
	&apos;// extract date information from ledger entry
	l1stRow = poGLRange.StartRow	&apos;// first row of &quot;split&quot;
	lLastRow = poGLRange.EndRow		&apos;// last row of &quot;split&quot;
	lRowCount = poGLRange.EndRow - l1stRow - 1			&apos;// transaction lines with COAs
	oGLCellDate = oGLSheet.getCellByPosition(COLDATE, l1stRow)

	&apos;// set up parameters for GetTransSheetName and GetInsRow
	sStyle = oGLCellDate.Text.String
	sDate = oGLCellDate.Text.String
	sMonth = GetMonthName(sDate)		&apos;// get month search name
	sAcctCat2 = GetTransSheetName(sSplitAcct)	&apos;// get sheet name matching COA

	&apos;// access target COA sheet and set up insertion row
	oCat2Sheet = oSheets.getByName(sAcctCat2)
iBrkpt=1		&apos;// oCat2Sheet.RangeAddress.Sheet = sheet index
ErrLogSetSheet(oCat2Sheet.RangeAddress.Sheet)	&apos;// set sheet for errors
	lCat2InsRow = GetInsRow(oCat2Sheet, sSplitAcct, sMonth)

	if lCat2InsRow &lt; 0 then
		sErrName = &quot;ERRCOAINSERT&quot;
		sErrMsg = &quot;Unable to insert Total rows in split account&quot;
		GoTo ErrHandler
	endif
		
	
Dim oCOARange As New com.sun.star.table.CellRangeAddress

	&apos;// set up oCOARange object
	&apos;// copy entire transaction just like if doing it manually
	&apos;// move filled values to other column (Debit &gt; Credit) or
	&apos;//		(Credit to Debit)
	&apos;// delete total row from transaction
	&apos;// set sum formula in COA field of last &quot;split&quot; row
	
	&apos;// at this point l1stRow = 1st row with &quot;split&quot;
	&apos;//               lLastRow = last row with &quot;split
	&apos;//				  set lStartColumn = COLDATE
	&apos;//				  set lEndColumn = COLREF
	&apos;//				  set sheet number (integer) = index of GL sheet
	&apos;//				  set target start row at lCat2InsRow
	&apos;//				  set target start column to COLDATE
	&apos;//				  set number of rows to lRowCount + 1
	&apos;// Doc = ThisComponent
	&apos;// Sheet = Doc.Sheets(0)
	&apos;//	oSel = Doc.getCurrentSelection()
	&apos;//	oRange = oSel.RangeAddress			&apos;// extract range information
iBrkPt=1		
	oCOARange.Sheet = oCat2Sheet.RangeAddress.Sheet
	oCOARange.StartColumn = COLDATE
	oCOARange.EndColumn = COLREF
	oCOARange.StartRow = lCat2InsRow	&apos;// we are inserting into the 2nd sheet
	oCOARange.EndRow = lCat2InsRow + lRowCount + 2	&apos;// start+transaction rowcount+1
ErrLogSetCellInfo(COLDATE, lCat2InsRow)
	oCat2Sheet.insertCells(oCOARange,_
							com.sun.star.sheet.CellInsertMode.ROWS)
dim lSplitEnd As Long		&apos;// save split end in target sheet
	lSplitEnd = oCOARange.EndRow
		
	&apos;// now copy original transaction split range address to same range
	&apos;// overwriting blank rows;
dim oTargetCellAddress As new com.sun.star.table.CellAddress
	oTargetCellAddress.Sheet = oCOARange.Sheet
	oTargetCellAddress.Column = COLDATE
	oTargetCellAddress.Row = lCat2InsRow
		
dim oGLCellRange As new com.sun.star.table.CellRangeAddress
	oGLCellRange.Sheet = poGLRange.Sheet
	oGLCellRange.StartColumn = COLDATE
	oGLCellRange.EndColumn = COLREF
	oGLCellRange.StartRow = l1stRow
	oGLCellRange.EndRow = lLastRow

&apos;// ErrLogGetSheet - Get sheet index from error log globals.
ErrLogSetSheet(oTargetCellAddress.Sheet)
ErrLogSetCellInfo(oTargetCellAddress.Column, oTargetCellAddress.Row)

	&apos;// copy the entire split transaction to the COA sheet
	&apos;// then delete the total row;
	oGLSheet.copyRange(oTargetCellAddress, oGLCellRange)
		
	&apos;// use removeCells to remove Total row
	&apos;// uses same parameters as insertCells; only change Row range
	oCOARange.Sheet = oTargetCellAddress.Sheet	
	oCOARange.StartRow = lCat2InsRow + 1	&apos;// total row
	oCOARange.EndRow = oCOARange.StartRow
	
ErrLogSetSheet(oCat2Sheet.RangeAddress.Sheet)
ErrLogSetCellInfo(COLDATE, oCOARange.EndRow)
	
	oCat2Sheet.removeRange(oCOARange,_
						com.sun.star.sheet.CellDeleteMode.ROWS)
	lSplitEnd = lSplitEnd - 1		&apos;// adjust split end for removed row
		
iBrkPt=1
							
	&apos;// then move the Debit/Credit values to the other column
	&apos;// change background color of colored cells to LTGREEN
	&apos;// test which column is .Type empty cells
	&apos;// then move the Debit/Credit values to the empty column
	oDebitCell = oCat2Sheet.getCellByPosition(COLDEBIT,_
					oCOARange.StartRow)
	oTargetCellAddress.Row = oDebitCell.CellAddress.Row
	oCOARange.EndRow = lSplitEnd - 2	&apos;// 2 back; no Total row and not end &quot;split&quot;

	bMoveDebits = (oDebitCell.Type &lt;&gt; EMPTY)
		&apos;	EMPTY,VALUE,TEXT,FORMULA

	&apos;// if there is something in the Debits column; the Debits move to Credits		
	if bMoveDebits then	&apos;// set range to debits column
		oTargetCellAddress.Column = COLCREDIT
		oCOARange.StartColumn = COLDEBIT
		oCOARange.EndColumn = COLDEBIT
	else				&apos;// otherwise, the Credits move to Debits
		oTargetCellAddress.Column = COLDEBIT
		oCOARange.StartColumn = COLCREDIT
		oCOARange.EndColumn = COLCREDIT
	endif	&apos;// end move Debits conditional

&apos;// ErrLogGetSheet - Get sheet index from error log globals.
&apos;// ErrLogSetSheet - Set sheet index in error log globals.
ErrLogSetCellInfo(oTargetCellAddress.Column, oTargetCellAddress.Row)

	&apos;// move the column containing values to opposing column
	oCat2Sheet.moveRange(oTargetCellAddress, oCOARange)

		
	&apos;// set .formula on COLACCT of last line to
	&apos;//	 &quot;=SUM()&quot; previous cells above in either Debit or Credit

ErrLogSetCellInfo(COLACCT, lSplitEnd-1)

	&apos;// row is now lSplitEnd-1 since Total row deleted	
	oFormulaCell = oCat2Sheet.getCellByPosition(COLACCT, lSplitEnd-1)
		
	&apos;// Always force SUM formula into last row COLACCT field
&apos;	if oFormulaCell.Type = FORMULA then

	&apos;// set up RangeAddress object for SetSumFormula
dim oNewSplitRange as new com.sun.star.table.CellRangeAddress
	oNewSplitRange.Sheet = oCat2Sheet.RangeAddress.Sheet
	oNewSplitRange.StartRow = lCat2InsRow		&apos;// first &quot;split&quot; row
	oNewSplitRange.EndRow = lSplitEnd-1			&apos;// last &quot;split&quot; row (minus 1, row deleted)
	oNewSplitRange.StartColumn = COLDATE		&apos;// Date column
	oNewSplitRange.EndColumn = COLREF			&apos;// Reference column
	sFormula = oFormulaCell.String			&apos;// just for kicks

ErrLogSetSheet(oCat2Sheet.RangeAddress.Sheet)
ErrLogSetCellInfo(COLACCT, oNewSplitRange.EndRow)
			
	sFormula = SetSumFormula(oNewSplitRange, bMoveDebits)		
	oFormulaCell.String = sFormula			&apos;// set formula in cell
	oFormulaCell.setFormula(sFormula)
	&apos;// loop changing Date fields&apos; color to LTGREEN
ErrLogSetSheet(oCat2Sheet.RangeAddress.Sheet)
ErrLogSetCellInfo(COLDATE, oNewSplitRange.StartRow)
	lRowCount = oNewSplitRange.EndRow - oNewSplitRange.StartRow + 1
	lCat2CurrRow = oNewSplitRange.StartRow
	for li = 0 to lRowCount-1
		oDateCell = oCat2Sheet.getCellByPosition(COLDATE, lCat2CurrRow)
		oDateCell.CellBackColor = LTGREEN
		lCat2CurrRow = lCat2CurrRow + 1	
	next li					

&apos;// add code to remove superfluous row at bottom
	&apos;// row to remove is at lSplitEnd								&apos;// mod070820
	&apos;// use removeCells to remove extraneous						&apos;// mod070820
	&apos;// uses same parameters as insertCells; only change Row range	&apos;// mod070820
	oCOARange.Sheet = oTargetCellAddress.Sheet						&apos;// mod070820
	oCOARange.StartRow = lSplitEnd	&apos;// blank row					&apos;// mod070820
	oCOARange.EndRow = lSplitEnd									&apos;// mod070820
	
ErrLogSetSheet(oCat2Sheet.RangeAddress.Sheet)						&apos;// mod070820
ErrLogSetCellInfo(COLDATE, lSplitEnd)								&apos;// mod070820	
	oCat2Sheet.removeRange(oCOARange,_
						com.sun.star.sheet.CellDeleteMode.ROWS) 		&apos;// mod070820

		&apos;// update sheet modified date cell							&apos;// mod060620
		oCOARange.Sheet = oCat2Sheet.RangeAddress.Sheet				&apos;// mod060620
		Call SetSheetDate(oCOARange, MMDDYY)						&apos;// mod060620
		oDateCell = oCat2Sheet.getCellByPosition(COLDEBIT, DATEROW)	&apos;// mod060620
		oDateCell.CellBackColor = LTGREEN							&apos;// mod060620

	GoTo NormalExit

ErrHandler:
	&apos;// here because insertion row returned &lt;0; unable to insert rows
	&apos;// iStatus is bad value returned
	iRetValue = iStatus
	Select Case iStatus
	Case ERRCOANOTFOUND
		sErrCode = csERRCOANOTFOUND
		sErrMsg = &quot;Account &quot;+sBadCOA2+&quot; not found&quot;
	Case ERROUTOFROOM
		sErrCode = csERROUTOFROOM
		sErrMsg = &quot;Account &quot;+sBadCOA2+&quot; month &quot;+sMonth+&quot; not enough rows&quot;_
					+&quot; to insert&quot;
	Case ERRCOACHANGED
		sErrCode = csCOACHANGED
		sErrMsg = &quot;Account &quot;+sBadCOA2+&quot; month &quot;+sMonth+&quot; not found&quot;
	Case else
		sErrCode = csERRUNKNOWN
		sErrMsg = &quot;Account &quot;+sBadCOA2+&quot;Undocumented error&quot;
	end Select

	Call LogError(sErrCode, sErrMsg)			
	
&apos;//-----------------end PlaceSplitTotal here----------------------------
NormalExit:
	&apos;//*-----------------restore error handling for caller-----------
	&apos;// restore entry error settings.
	ErrLogSetModule(sErrCallerMod)
	ErrLogSetSheet(iErrSheetIx)
	ErrLogSetCellInfo(lErrColumn, lErrRow)
	&apos;//*----------end error handling restore----------------------------

	&apos;// iStatus = 0, no error
	&apos;//				ERRCONTINUE (-1) - error; continue with next transaction
	&apos;//				ERRSTOP (-2) - error; stop processing transactions

	PlaceSplitTotal = iRetValue

end function		&apos;// end PlaceSplitTotal		4/19/25.
&apos;/**/
&apos;// RunCOADlg.bas
&apos;//---------------------------------------------------------------
&apos;// RunCOADlg - Run COA Dialog.
&apos;//		7/5/20.	wmk.	15:00
&apos;//---------------------------------------------------------------

public sub RunCOADlg()

&apos;//	Usage.	macro call or
&apos;//			call RunCOADialog()
&apos;//
&apos;// Entry.	Button click in dialog box		
&apos;//			puoCOADialog = declared object for COA dialog
&apos;//			puoCOAListBox = list box object
&apos;//			puoSelectBtn = declared object for &lt;Select&gt; button
&apos;//			pusCOASelected = reserved for COA string selected
&apos;//			current Component has sheet &quot;Chart of Accounts&quot; with COA table
&apos;//			BadAss library exists
&apos;//
&apos;//	Exit.	msgBox message displayed
&apos;//			pusCOASelected = COA selected
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/13/20.	wmk.	original code
&apos;//	6/14/20.	wmk.	call LoadCOAs and run form added; code
&apos;//						modified to use puoCOADialog object
&apos;//	6/15/20.	wmk.	name of COA list dialog changed; conbtrols
&apos;//						labeled as SelectButton, CancelButton
&apos;//	7/5/20.		wmk.	Entry dependencies updated
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;//	local variables.
&apos;dim oListBox As com.sun.star.awt.UnoControlListBox
dim oListBox As Object

Dim Dlg As Object
dim iCOACount As Integer

&apos;// code.
	ON ERROR GOTO ErrorHandler
	BasicLibraries.LoadLibrary(&quot;Standard&quot;)
	BasicLibraries.LoadLibrary(&quot;BadAss&quot;)

&apos;// Initialize COA Dialog
	puoCOADialog = CreateUnoDialog(DialogLibraries.BadAss.COADialog)
	puoCOAListBox =puoCOADialog.getControl(&quot;COAList&quot;)
	puoCOASelectBtn = puoCOADialog.getControl(&quot;SelectBtn&quot;)
	puoCOASelectBtn.Model.Enabled = false			&apos;// disable button until user selects item
	iCOACount = LoadCOAs()
	puoCOAListBox.addItems(pusCOAList, 0)

	Select Case puoCOADialog.Execute()
	Case 2		&apos;// Select clicked
		msgBox(&quot;Select clicked in Chart of Accounts&quot;)
	Case 0		&apos;// Cancel
		pusCOASelected = &quot;&quot;		&apos;// since cancel, Execute() event skipped
		msgBox(&quot;Cancel or FormClose clicked&quot;)
	Case else
		msgBox(&quot;unevaluated dialog return&quot;)
	End Select
	msgBox(&quot;In Module2/F&quot; + CHR(13)+CHR(10) _
    	    + &quot;&apos;&quot;+pusCOASelected+&quot;&apos;&quot; + &quot; selected&quot;)

NormalExit:
	puoCOAListBox.dispose()
	exit sub
	
ErrorHandler:
	msgBox(&quot;RunCOADlg - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end RunCOADlg	7/5/20
&apos;/**/
&apos;// STAcct10FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct10FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub STAcct10FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct10FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld10&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct10FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct10FocusListener	6/20/20
&apos;/**/
&apos;// STAcct1FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct1FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	15:45
&apos;//---------------------------------------------------------------

public sub STAcct1FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct1FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld1&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct1FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct1FocusListener	6/20/20
&apos;/**/
&apos;// STAcct1LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct1LostFocus - Handle AcctFldn LostFocus event.
&apos;//		6/24/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAcct1LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAcct1LostFocus()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;AcctFld1&quot;)
&apos;//
&apos;//	Exit.	gsCOAs(0) = text from AcctFld1..10
&apos;//
&apos;// Calls.	STAcctLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	bug fix storing COA; add code to check/enable
&apos;//						next row if this row complete
&apos;//	6/24/20.	wmk.	common code moved to STAcctLostFocus; generic
&apos;//						call set up to use common code function
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into.


&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;AcctFld1&quot;					&apos;// clear object focus tracker
	iStatus = STAcctLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct1LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct1LostFocus	6/24/20
&apos;/**/
&apos;// STAcct2FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct2FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub STAcct2FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct2FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld2&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct2FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct2FocusListener	6/20/20
&apos;/**/
&apos;// STAcct3FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct3FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub STAcct3FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct2FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld3&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct3FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct3FocusListener	6/20/20
&apos;/**/
&apos;// STAcct4FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct4FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub STAcct4FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct2FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld4&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct4FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct4FocusListener	6/20/20
&apos;/**/
&apos;// STAcct5FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct5FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub STAcct5FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct5FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld5&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct5FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct5FocusListener	6/20/20
&apos;/**/
&apos;// STAcct6FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct6FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub STAcct6FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct6FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld6&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct6FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct6FocusListener	6/20/20
&apos;/**/
&apos;// STAcct7FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct7FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub STAcct7FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct7FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld7&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct7FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct7FocusListener	6/20/20
&apos;/**/
&apos;// STAcct8FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct8FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub STAcct8FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct8FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld8&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct8FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct8FocusListener	6/20/20
&apos;/**/
&apos;// STAcct9FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAcct9FocusListener - Handle AcctFldn GotFocus event.
&apos;//		6/20/20.	wmk.	16:00
&apos;//---------------------------------------------------------------

public sub STAcct9FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAcct9FocusListener()
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AcctFld object name
&apos;//			gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	modified and reduced to set global control name
&apos;//						MY_NAME local constant introduced
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AcctFld9&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAcct9FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAcct9FocusListener	6/20/20
&apos;/**/
&apos;// STAcctLostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAcctLostFocus - Handle any AcctFld LostFocus event.
&apos;//		7/7/20.	wmk.	12:30
&apos;//---------------------------------------------------------------

public function STAcctLostFocus() As Integer

&apos;//	Usage.	macro call or
&apos;//			call STAcctLostFocus()
&apos;//
&apos;//	[Parameters.	sFldName = name of dialog object lost focus]
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 lost focus
&apos;//			gsSTObjFocus = name of object with focus
&apos;//			gdSTAccumTot = accumulated split total
&apos;//			gdSTTotalAmt = total amount to split
&apos;//
&apos;//	Exit.	gsCOAs(0) = text from AcctFld1..10
&apos;//
&apos;// Calls.	STFld7ToIndex
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; cloned from STAcct1LostFocus
&apos;//	6/21/20.	wmk.	check for total reached before activating next row
&apos;//	7/7/20.		wmk.	bug fix where total amount reached, but &lt;Done&gt; button
&apos;//						deactivated
&apos;//
&apos;//	Notes. gsSTObjFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into.


&apos;//	constants.

&apos;//	local variables.
dim iRetValue 		As Integer			&apos;// returned status
dim iStatus			As Integer			&apos;// general status
dim iRowIx			As Integer			&apos;// index of present row
dim oDlgControl		As Object			&apos;// field ptr
dim bRowComplete	As Boolean			&apos;// row complete flag
dim bDlgComplete	As Boolean			&apos;// dialog complete flag
dim sFldName 		As String			&apos;// local copy of field name

	&apos;// code.
	iRetValue = -1						&apos;// set bad return
	ON ERROR GOTO ErrorHandler
	sFldName = gsSTObjFocus				&apos;// use local copy of field name
&apos;	sFldName = psFldName				&apos;// use local copy of field name
	oDlgControl = puoSTDialog.getControl(sFldName)
	iRowIx = STFld7ToIndex(sFldName)
	gsSTCOAs(iRowIx) = oDlgControl.Text

	bRowComplete = STRowComplete(iRowIx)
	if bRowComplete then
		bDlgComplete = STCheckComplete()

		if gdSTAccumTot &lt; gdSTTotalAmt then		
			&apos;// check for next row Enabled; if not, enable it
			iStatus = STEnableNextRow(iRowIx)
			if iStatus &lt; 0 then
				GoTo ErrorHandler
			endif
		endif &apos;// end total not met yet conditional
		
	endif	&apos;// end row complete conditional
	
	&apos;// activate/deactivate &lt;Done&gt; control if dialog complete
	oDlgControl = puoSTDialog.getControl(&quot;DoneBtn&quot;)
	if bDlgComplete then
		oDlgControl.Model.Enabled = true
	else
		oDlgControl.Model.Enabled = false
	endif
	
	iRetValue = 0
	gsSTObjFocus = &quot;&quot;					&apos;// clear object focus tracker

NormalExit:
	STAcctLostFocus = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;In STAcctLostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end function		&apos;// end STAcctLostFocus	6/21/20
&apos;/**/
&apos;// STAmt10FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt10FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/20/20.	wmk.	20:45
&apos;//---------------------------------------------------------------

public sub STAmt10FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt10FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAcct3FocusListener
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AmtFld10&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt10FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt10FocusListener	6/20/20
&apos;/**/
&apos;// STAmt10LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt10LostFocus - Handle AmtFld10 LostFocus event.
&apos;//		6/23/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAmt10LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAmt10LostFocus()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//
&apos;//	Exit.	gdSTAccumTot = updated with enterd value if within split bounds
&apos;//
&apos;// Calls.	fSTAmtLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	activate/deactivate &lt;Done&gt; control code fixed
&apos;//	6/21/20.	wmk.	MY_NAME const added
&apos;//	6/22/20.	wmk.	eliminate MY_NAME const; use STGetObjFocus to retrieve
&apos;//						this control name in dialog
&apos;//	6/23/20.	wmk.	rewritten; uses fSTAmtLostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.
&apos;const MY_NAME=&quot;AmtFld10&quot;
&apos;//	local variables.
dim iStatus		As Integer		&apos;// general status
dim sFldName	As String		&apos;// name of this field

dim bTotalMet		As Boolean		&apos;// accum = split flag
	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	sFldName = &quot;AmtFld10&quot;
	
	iStatus = fSTAmtLostFocus(sFldName)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
		
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt10LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt10LostFocus	6/23/20
&apos;/**/
&apos;// STAmt1FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt1FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/23/20.	wmk.	05:00
&apos;//---------------------------------------------------------------

public sub STAmt1FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt1FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAcct3FocusListener
&apos;// 6/22/20.	wmk.	call to STSetObjFocus to set this control name
&apos;//						in dialog for later retrieval
&apos;//	6/23/20.	wmk.	reverted code to near original; eliminated
&apos;//						STSetObjFocus call, since throws dialog into
&apos;//						infinite loop when setting the field in the
&apos;//						dialog, the &quot;Got Focus&quot; event gets re-invoked
&apos;//						when returning from the &quot;HasFocus&quot; control;
&apos;//						this may be conquerable with a flag in the 
&apos;//						publics that indicates recursive callback and
&apos;//						just exits, or skips ahead to code following
&apos;//						STSetObject call
&apos;//
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status
dim oDlgControl	As Object			&apos;// dialog control object

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler

&apos;	gsSTObjFocus = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	gsSTObjFocus = &quot;AmtFld1&quot;
	
	if true then
		GoTo NormalExit
	endif
&apos;//---------------------------------------------------------------------------------	
	oDlgControl = puoSTDialog.getControl(&quot;HasFocusFld&quot;)
msgBox(&quot;In STAmt1FocusListener back from .getControl on entry..&quot; + CHR(13)+CHR(10) _
+	&quot;stored name = &apos;&quot; + oDlgControl.Text + &quot;&apos;&quot;)
&apos;	sFocusName = oDlgControl.Text

&apos;	if Len(sFocusName) &gt; 0 then
&apos;		iRetValue = -2		&apos;// set busy flag
&apos;		GoTo ErrorHandler
&apos;	endif		&apos;// end HasFocus in use conditional

	oDlgControl.Text = &quot;AmtFld1&quot;		&apos;// set control name
msgBox(&quot;In STAmt1FocusListener ready to exit..&quot; + CHR(13)+CHR(10) _
+	&quot;stored name = &apos;&quot; + oDlgControl.Text + &quot;&apos;&quot;)
	GoTo NormalExit
	
&apos;//------------------------------------------------------------------------------
	iStatus = STSetObjFocus(&quot;AmtFld1&quot;)
msgBox(&quot;In STAmt1FocusListener, back from STSetObjectFocus...&quot; + CHR(13)+CHR(10) _
+	&quot;iStatus = &quot; + iStatus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

	iStatus = 0
	GoTo NormalExit
&apos;//--------------------------------------------------------------	
ErrorHandler:
	msgBox(&quot;In STAmt1FocusListener - unprocessed error&quot;)

NormalExit:
	exit sub		
	
end sub		&apos;// end STAmt1FocusListener	6/23/20
&apos;/**/
&apos;// STAmt1LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt1LostFocus - Handle AmtFld1 LostFocus event.
&apos;//		6/23/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAmt1LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAmt1LostFocus()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//
&apos;//	Exit.	gdSTAccumTot = updated with enterd value if within split bounds
&apos;//
&apos;// Calls.	fSTAmtLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	activate/deactivate &lt;Done&gt; control code fixed
&apos;//	6/21/20.	wmk.	MY_NAME const added
&apos;//	6/22/20.	wmk.	eliminate MY_NAME const; use STGetObjFocus to retrieve
&apos;//						this control name in dialog
&apos;//	6/23/20.	wmk.	rewritten; uses fSTAmtLostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.
&apos;const MY_NAME=&quot;AmtFld1&quot;

&apos;//	local variables.
dim iStatus		As Integer		&apos;// general status
dim sFldName	As String		&apos;// name of this field

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	sFldName = &quot;AmtFld1&quot;
	
	iStatus = fSTAmtLostFocus(sFldName)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
		
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt1LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt1LostFocus	6/23/20
&apos;/**/
&apos;// STAmt2FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt2FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/20/20.	wmk.	20:45
&apos;//---------------------------------------------------------------

public sub STAmt2FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt2FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAmt1FocusListener
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AmtFld2&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt2FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt2FocusListener	6/20/20
&apos;/**/
&apos;// STAmt2LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt2LostFocus - Handle AmtFld2 LostFocus event.
&apos;//		6/23/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAmt2LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAmt2LostFocus()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//
&apos;//	Exit.	gdSTAccumTot = updated with enterd value if within split bounds
&apos;//
&apos;// Calls.	fSTAmtLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	activate/deactivate &lt;Done&gt; control code fixed
&apos;//	6/21/20.	wmk.	MY_NAME const added
&apos;//	6/22/20.	wmk.	eliminate MY_NAME const; use STGetObjFocus to retrieve
&apos;//						this control name in dialog
&apos;//	6/23/20.	wmk.	rewritten; uses fSTAmtLostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.
&apos;const MY_NAME=&quot;AmtFld2&quot;

&apos;//	local variables.
dim iStatus		As Integer		&apos;// general status
dim sFldName	As String		&apos;// name of this field

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	sFldName = &quot;AmtFld2&quot;
	
	iStatus = fSTAmtLostFocus(sFldName)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
		
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt2LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt2LostFocus	6/23/20
&apos;/**/
&apos;// STAmt3FocusListener.bas
&apos;//==============================---------------------------------
&apos;// STAmt3FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/23/20.	wmk.	08:30
&apos;//---------------------------------------------------------------

public sub STAmt3FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt2FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAmt1FocusListener
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AmtFld3&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status
dim oHasFocus	As Object
	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
	oHasFocus = puoSTDialog.getControl(&quot;HasFocus&quot;)
	oHasFocus.Text = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
&apos;// Note: code will loop forever in any GotFocus event if a msgBox
&apos;// is executed, since the message box takes focus away from the
&apos;// dialog implementing the listener, then refocuses on it...
&apos;	msgBox(&quot;In STAmt3FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt3FocusListener	6/23/20
&apos;/**/
&apos;// STAmt3LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt3LostFocus - Handle AmtFld3 LostFocus event.
&apos;//		6/23/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAmt3LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAmt3LostFocus()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//
&apos;//	Exit.	gdSTAccumTot = updated with enterd value if within split bounds
&apos;//
&apos;// Calls.	fSTAmtLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	activate/deactivate &lt;Done&gt; control code fixed
&apos;//	6/21/20.	wmk.	MY_NAME const added
&apos;//	6/22/20.	wmk.	eliminate MY_NAME const; use STGetObjFocus to retrieve
&apos;//						this control name in dialog
&apos;//	6/23/20.	wmk.	rewritten; uses fSTAmtLostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.
&apos;const MY_NAME=&quot;AmtFld3&quot;

&apos;//	local variables.
dim iStatus		As Integer		&apos;// general status
dim sFldName	As String		&apos;// name of this field

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	sFldName = &quot;AmtFld3&quot;
	
	iStatus = fSTAmtLostFocus(sFldName)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
		
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt3LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt3LostFocus	6/23/20
&apos;/**/
&apos;// STAmt4FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt4FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/20/20.	wmk.	20:45
&apos;//---------------------------------------------------------------

public sub STAmt4FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt4FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAcct3FocusListener
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AmtFld4&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt4FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt4FocusListener	6/20/20
&apos;/**/
&apos;// STAmt5FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt5FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/20/20.	wmk.	20:45
&apos;//---------------------------------------------------------------

public sub STAmt5FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt5FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAcct3FocusListener
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AmtFld5&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt5FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt5FocusListener	6/20/20
&apos;/**/
&apos;// STAmt5LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt5LostFocus - Handle AmtFld5 LostFocus event.
&apos;//		6/23/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAmt5LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAmt5LostFocus()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//
&apos;//	Exit.	gdSTAccumTot = updated with enterd value if within split bounds
&apos;//
&apos;// Calls.	fSTAmtLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	activate/deactivate &lt;Done&gt; control code fixed
&apos;//	6/21/20.	wmk.	MY_NAME const added
&apos;//	6/22/20.	wmk.	eliminate MY_NAME const; use STGetObjFocus to retrieve
&apos;//						this control name in dialog
&apos;//	6/23/20.	wmk.	rewritten; uses fSTAmtLostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.
&apos;const MY_NAME=&quot;AmtFld5&quot;
&apos;//	local variables.
dim iStatus		As Integer		&apos;// general status
dim sFldName	As String		&apos;// name of this field

dim bTotalMet		As Boolean		&apos;// accum = split flag
	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	sFldName = &quot;AmtFld5&quot;
	
	iStatus = fSTAmtLostFocus(sFldName)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
		
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt5LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt5LostFocus	6/23/20
&apos;/**/
&apos;// STAmt6FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt6FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/20/20.	wmk.	20:45
&apos;//---------------------------------------------------------------

public sub STAmt6FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt6FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAcct3FocusListener
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AmtFld6&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt6FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt6FocusListener	6/20/20
&apos;/**/
&apos;// STAmt6LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt6LostFocus - Handle AmtFld6 LostFocus event.
&apos;//		6/23/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAmt6LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAmt6LostFocus()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//
&apos;//	Exit.	gdSTAccumTot = updated with enterd value if within split bounds
&apos;//
&apos;// Calls.	fSTAmtLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	activate/deactivate &lt;Done&gt; control code fixed
&apos;//	6/21/20.	wmk.	MY_NAME const added
&apos;//	6/22/20.	wmk.	eliminate MY_NAME const; use STGetObjFocus to retrieve
&apos;//						this control name in dialog
&apos;//	6/23/20.	wmk.	rewritten; uses fSTAmtLostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.
&apos;const MY_NAME=&quot;AmtFld6&quot;
&apos;//	local variables.
dim iStatus		As Integer		&apos;// general status
dim sFldName	As String		&apos;// name of this field

dim bTotalMet		As Boolean		&apos;// accum = split flag
	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	sFldName = &quot;AmtFld6&quot;
	
	iStatus = fSTAmtLostFocus(sFldName)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
		
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt6LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt6LostFocus	6/23/20
&apos;/**/
&apos;// STAmt7FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt7FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/20/20.	wmk.	20:45
&apos;//---------------------------------------------------------------

public sub STAmt7FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt7FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAcct3FocusListener
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AmtFld7&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt7FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt7FocusListener	6/20/20
&apos;/**/
&apos;// STAmt7LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt7LostFocus - Handle AmtFld3 LostFocus event.
&apos;//		6/23/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAmt7LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAmt7LostFocus()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//
&apos;//	Exit.	gdSTAccumTot = updated with enterd value if within split bounds
&apos;//
&apos;// Calls.	fSTAmtLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	activate/deactivate &lt;Done&gt; control code fixed
&apos;//	6/21/20.	wmk.	MY_NAME const added
&apos;//	6/22/20.	wmk.	eliminate MY_NAME const; use STGetObjFocus to retrieve
&apos;//						this control name in dialog
&apos;//	6/23/20.	wmk.	rewritten; uses fSTAmtLostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.
&apos;const MY_NAME=&quot;AmtFld7&quot;
&apos;//	local variables.
dim iStatus		As Integer		&apos;// general status
dim sFldName	As String		&apos;// name of this field

dim bTotalMet		As Boolean		&apos;// accum = split flag
	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	sFldName = &quot;AmtFld7&quot;
	
	iStatus = fSTAmtLostFocus(sFldName)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
		
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt7LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt7LostFocus	6/23/20
&apos;/**/
&apos;// STAmt8FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt8FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/20/20.	wmk.	20:45
&apos;//---------------------------------------------------------------

public sub STAmt8FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt8FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAcct3FocusListener
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AmtFld8&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt8FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt8FocusListener	6/20/20
&apos;/**/
&apos;// STAmt8LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt8LostFocus - Handle AmtFld8 LostFocus event.
&apos;//		6/23/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAmt8LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAmt8LostFocus()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//
&apos;//	Exit.	gdSTAccumTot = updated with enterd value if within split bounds
&apos;//
&apos;// Calls.	fSTAmtLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	activate/deactivate &lt;Done&gt; control code fixed
&apos;//	6/21/20.	wmk.	MY_NAME const added
&apos;//	6/22/20.	wmk.	eliminate MY_NAME const; use STGetObjFocus to retrieve
&apos;//						this control name in dialog
&apos;//	6/23/20.	wmk.	rewritten; uses fSTAmtLostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.
&apos;const MY_NAME=&quot;AmtFld8&quot;
&apos;//	local variables.
dim iStatus		As Integer		&apos;// general status
dim sFldName	As String		&apos;// name of this field

dim bTotalMet		As Boolean		&apos;// accum = split flag
	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	sFldName = &quot;AmtFld8&quot;
	
	iStatus = fSTAmtLostFocus(sFldName)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
		
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt8LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt8LostFocus	6/23/20
&apos;/**/
&apos;// STAmt9FocusListener.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt9FocusListener - Handle AmtFldn GotFocus event.
&apos;//		6/20/20.	wmk.	20:45
&apos;//---------------------------------------------------------------

public sub STAmt9FocusListener()

&apos;//	Usage.	macro call or
&apos;//			call STAmt9FocusListener()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 got focus
&apos;//
&apos;//	Exit.	gsSTObjFocus = ST dialog AmtFld object name
&apos;//		??	gsSTAcctFocus = ST dialog AcctFld object name
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/20/20.	wmk.	original code; adapted from STAcct3FocusListener
&apos;//
&apos;//	Notes. gsSTAcctFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into. The gsSTObjFocus name will be cleared when the control
&apos;// loses focus; but the gsSTAcctFocus will remain set until a different
&apos;// acct object is accessed


&apos;//	constants.
const MY_NAME=&quot;AmtFld9&quot;

&apos;//	local variables.
dim iStatus		As Integer			&apos;// general status

	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	gsSTObjFocus = MY_NAME
&apos;	gsSTAcctFocus = MY_NAME
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt9FocusListener - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt9FocusListener	6/20/20
&apos;/**/
&apos;// STAmt9LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmt9LostFocus - Handle AmtFld9 LostFocus event.
&apos;//		6/23/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STAmt9LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STAmt9LostFocus()
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//
&apos;//	Exit.	gdSTAccumTot = updated with enterd value if within split bounds
&apos;//
&apos;// Calls.	fSTAmtLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	activate/deactivate &lt;Done&gt; control code fixed
&apos;//	6/21/20.	wmk.	MY_NAME const added
&apos;//	6/22/20.	wmk.	eliminate MY_NAME const; use STGetObjFocus to retrieve
&apos;//						this control name in dialog
&apos;//	6/23/20.	wmk.	rewritten; uses fSTAmtLostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.
&apos;const MY_NAME=&quot;AmtFld9&quot;
&apos;//	local variables.
dim iStatus		As Integer		&apos;// general status
dim sFldName	As String		&apos;// name of this field

dim bTotalMet		As Boolean		&apos;// accum = split flag
	&apos;// code.
	iStatus = -1
	ON ERROR GOTO ErrorHandler
	sFldName = &quot;AmtFld9&quot;
	
	iStatus = fSTAmtLostFocus(sFldName)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif
		
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STAmt9LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STAmt9LostFocus	6/23/20
&apos;/**/
&apos;// STAmtLostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STAmtLostFocus - Handle all AmtFld LostFocus events.
&apos;//		4/20/25.	wmk.
&apos;//---------------------------------------------------------------

public sub STAmtLostFocus()

&apos;//	Usage.	call STAmtLostFocus()
&apos;//			or macro call
&apos;//
&apos;// Entry.	AmtFld1..AmtFld10 lost focus
&apos;//			gdSTAmts() = updated with newly entered amount
&apos;//			gsSTObjFocus = name of object with focus
&apos;//			gdSTAccumTot = accumulated split total
&apos;//			gdSTTotalAmt = total amount to split
&apos;//
&apos;//	Exit.	gdSTAccumTot, gdSTTotalAmt updated with newly entered amount
&apos;//			&lt;Done&gt; button activated if dialog entries complete
&apos;//			next row fields activated if row complete
&apos;//
&apos;// Calls.	STFld6ToIndex, CheckRowComplete, CheckComplete
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;// 4/20/25.	wmk.	multiple instances of sub/function due to superfluous
&apos;//	4/20/25		 residual dot bas instances.
&apos;//	6/20/20.	wmk.	original code; cloned from STAmtLostFocus
&apos;//	6/21/20.	wmk.	check for total reached before activating next row
&apos;// 6/21/20.	wmk.	change to accept psFldName parameter; to be called by
&apos;//						all STAmt.LostFocus events; changed totals check and
&apos;//						activate &lt;Done&gt; conditional
&apos;//	6/22/20.	wmk.	change name to begin with &quot;f&quot; so can be distinguished
&apos;//						by sub with same name for testing

&apos;//	constants.

&apos;//	local variables.
dim iRetValue 		As Integer			&apos;// returned status
dim iStatus			As Integer			&apos;// general status
dim iRowIx			As Integer			&apos;// index of present row
dim oDlgControl		As Object			&apos;// field ptr
dim bRowComplete	As Boolean			&apos;// row complete flag
dim bDlgComplete	As Boolean			&apos;// dialog complete flag
dim bTotalMet		As Boolean			&apos;// split total met flag
dim sFldName 		As String			&apos;// local copy of field name
dim oHasFocus		As Object

	&apos;// code.
	iRetValue = -1						&apos;// set bad return
	ON ERROR GOTO ErrorHandler
&apos;msgBox(&quot;In sub STAmtLostFocus entry values..&quot; + CHR(13)+CHR(10) _
&apos;	+ &quot;gdSTAccumTot = &quot; + gdSTAccumTot + CHR(13)+CHR(10) _
&apos;	+ &quot;gdSTTotalAmt = &quot; + gdSTTotalAmt + CHR(13)+CHR(10) _
&apos;	+ &quot;gsSTObjFocus = &apos;&quot; + gsSTObjFocus + &quot;&apos;&quot; )
	
	oHasFocus = puoSTDialog.getControl(&quot;HasFocus&quot;)
	sFldName = oHasFocus.Text	
&apos;	sFldName = gsSTObjFocus				&apos;// use local copy of field name
&apos;msgBox(&quot;sub STAmtLostFocus - sFldName = &apos;&quot; + sFldName + &quot;&apos;&quot;)
	if Len(sFldName) &lt; 7 then
		GoTo ErrorHandler
	endif	&apos;// error - field name not set up for entry
	
	bDlgComplete = false
&apos;	iRowIx = STFld6ToIndex(sFldName)
&apos;	iStatus = STUpdateAccumTot(sFldName)
	iRowIx = STFld6ToIndex(gsSTObjFocus)
	iStatus = STUpdateAccumTot(gsSTObjFocus)
&apos;msgBox(&quot;In sub STAmtLostFocus values after update..&quot; + CHR(13)+CHR(10) _
&apos;	+ &quot;gdSTAccumTot = &quot; + gdSTAccumTot + CHR(13)+CHR(10) _
&apos;	+ &quot;gdSTTotalAmt = &quot; + gdSTTotalAmt )
	
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;// end error in updating accum total conditional

	bTotalMet = (iStatus = 1)
	bRowComplete = STRowComplete(iRowIx)
	if bRowComplete then
		bDlgComplete = STCheckComplete()
		oDlgControl = puoSTDialog.getControl(&quot;UnsplitTot&quot;)
&apos;		if gdSTAccumTot &lt; gdSTTotalAmt then		
		if oDlgControl.Value &gt; 0 then		
			&apos;// check for next row Enabled; if not, enable it
			iStatus = STEnableNextRow(iRowIx)
			if iStatus &lt; 0 then
				GoTo ErrorHandler
			endif
		else
			bTotalMet = true
		endif &apos;// end total not met yet conditional
		
	endif	&apos;// end row complete conditional
	
	&apos;// activate/deactivate &lt;Done&gt; control if dialog complete
	oDlgControl = puoSTDialog.getControl(&quot;DoneBtn&quot;)
&apos;	bDlgComplete = (bDlgComplete AND bTotalMet)
	bDlgComplete = (bDlgComplete OR bTotalMet)
	if bDlgComplete then
		oDlgControl.Model.Enabled = true
	else
		oDlgControl.Model.Enabled = false
	endif
	iRetValue = 0
	
NormalExit:
&apos;	fSTAmtLostFocus = iRetValue
	exit sub
	
ErrorHandler:
	msgBox(&quot;In sub STAmtLostFocus - unprocessed error&quot;)
	iRetValue = iStatus
	GoTo NormalExit
	
end sub		&apos;// end STAmtLostFocus	4/20/25.
&apos;/**/
&apos;// STCancelBtnRun.bas
&apos;//---------------------------------------------------------------
&apos;// STCancelBtnRun - ST dialog &lt;Cancel&gt; button Execute() event handler.
&apos;//		6/27/20.	wmk.	15:00
&apos;//---------------------------------------------------------------

public sub STCancelBtnRun()

&apos;//	Usage.	macro call or
&apos;//			call STCancelBtnRun()
&apos;//
&apos;// Entry.	puoSTDialog = ST dialog object
&apos;//
&apos;//	Exit.	ST dialog ended, returning exit code 0
&apos;//			all ST-related vars cleared
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.		wmk.	original code
&apos;//	6/27/20.	wmk.	gbSTEditMode flag set false
&apos;//
&apos;//	Notes. It is assumed that if the user hits &lt;Cancel&gt;, any
&apos;// split information should be abandoned
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iStatus		As Integer

	&apos;// code.
	&apos;// clear all stored array values and exit with cancel
	gbSTEditMode = false
	iStatus = STPubVarsReset()
	puoSTDialog.endDialog(0)
	
end sub		&apos;// end STCancelBtnRun	6/27/20
&apos;/**/
&apos;// STCheckComplete.bas
&apos;//---------------------------------------------------------------
&apos;// STCheckComplete - Check if dialog has minimum information.
&apos;//		7/7/20.	wmk.	12:40
&apos;//---------------------------------------------------------------

public function STCheckComplete() As Boolean

&apos;//	Usage.	bVal = STCheckComplete()
&apos;//
&apos;// Entry.	giSTLastIx = index of last stored row from dialog
&apos;//			gdSTAmts(0..giSTLastIx0 = stored amounts from dialog
&apos;//			gsSTCOAs(0..giSTLastIx) = stored account #s from dialog
&apos;//
&apos;//	Exit.	bVal = true if ALL of the following:
&apos;//					gdSTAmts(0..STLastIx) = non-empty values
&apos;//					gsSTCOAs(0..STLastIx) = each exactly 4 chars
&apos;//					gdSTTotalAmt = gdSTAccumTot
&apos;//				   false otherwise
&apos;//
&apos;// Calls.	&lt;other subs/functions called&gt;
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;//	6/21/20.	wmk.	modified to check dialog UnsplitTot = 0.
&apos;//	7/7/20.		wmk.	bug fix where fractional cents making
&apos;//						UnsplitTot &lt;&gt; 0; changed to string comparison

&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim bRetValue As Boolean		&apos;// returned flag
dim bComplete	As Boolean	&apos;// interim tests flag.
dim i			As Integer		&apos;// loop index
dim oUnsplit	As Object		&apos;// unsplit field from dialot

	&apos;// code.
	bComplete = true
	for i = 0 to giSTLastIx
		bComplete = bComplete AND (Len(gsSTCOAs(i)) = 4)
		bComplete = bComplete AND (gdSTAmts(i) &gt;= 0)
		if NOT bComplete then
			exit for
		endif	&apos;// end failed conditional	
	next i		&apos;// loop for all entered rows

	oUnSplit = puoSTDialog.getControl(&quot;UnsplitTot&quot;)	
	bComplete = bComplete AND _
			(StrComp(Str(gdSTTotalAmt),Str(gdSTAccumTot))=0)
&apos;	bComplete = bComplete AND (oUnSplit.Value = 0.)
	STCheckComplete = bComplete

end function 	&apos;// end STCheckComplete	7/7/20
&apos;/**/
&apos;// STClrObjFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STClrObjFocus - Clear control name with focus inside object.
&apos;//		6/22/20.	wmk.	10:00
&apos;//---------------------------------------------------------------

public function STClrObjFocus() As Integer

&apos;//	Usage.	iVar = STClrObjFocus()
&apos;//
&apos;// Entry.	puoSTDialog = ST dialog object
&apos;//			puoSTDialog.&lt;HasFocusObject&gt;.Text = available
&apos;//
&apos;//	Exit.	iVar = 0 - control name cleared in dialog
&apos;//				 &lt; 0 - error attempting to store active control namne
&apos;//			puoSTDialog.&lt;HasFocus-Object&gt;.Text = &quot;&quot;
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6//20.		wmk.	original code
&apos;//
&apos;//	Notes. STSetObjFocus should be called by any &lt;control&gt;Listener
&apos;//	event when the &lt;control&gt; gets focus. This will provide an easy
&apos;// way for a control to get its own name during processing. The
&apos;// STClrObjFocus function should be called when the &lt;control&gt; loses
&apos;// focus so other controls may reuse the dialog field &quot;HasFocus&quot;.
&apos;// A third method STGetObjFocus will retrieve the current &quot;HasFocus&quot;
&apos;// .Text field for use during the control processing.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Any
dim oDlgControl		As Object		&apos;// dialog control
dim sFocusName		As String		&apos;// HasFocus text control field name

	&apos;// code.
	
	iRetValue = -1
	ON ERROR GOTO ErrorHandler
	oDlgControl = puoSTDialog.getControl(&quot;HasFocusFld&quot;)
	sFocusName = oDlgControl.Text
	oDlgControl.Text = &quot;&quot;
	iRetValue = 0			&apos;// set normal return
	
NormalExit:	
	STClrObjFocus = iRetValue
	exit function

ErrorHandler:
	msgBox(&quot;In STClrFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end function 	&apos;// end STClrObjFocus	6/22/20
&apos;/**/
&apos;// STCOAListBtnListener.bas
&apos;//---------------------------------------------------------------
&apos;// STCOAListBtnListener - Handle COA List Button event.
&apos;//		6/18/20.	wmk.
&apos;//---------------------------------------------------------------

public sub STCOAListBtnListener()

&apos;//	Usage.	macro call or
&apos;//			call STCOAListBtnListener()
&apos;//
&apos;// Entry.	gsSTAcctFocus = name of last COA object to get focus
&apos;//			puoSTDialog = ST Dialog object
&apos;//
&apos;//	Exit.	gsSTCOAs(n-1) updated with COA selection from GetCOA	
&apos;//
&apos;// Calls.	GetCOA
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.		wmk.	original code
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iNameLen	As Integer	&apos;// length of name string
dim sFldName	As String	&apos;// full field name from gsSTAcctFocus var
dim sAcctIx		As String	&apos;// account index extracted from field name
dim iDigCount	As Integer	&apos;// field name digit count
dim iArrayIx	As Integer	&apos;// array index into gsSTCOAs string array
dim oSTDlgCtrl	As Object	&apos;// account field in STdialog
dim sCOANum		As String	&apos;// COA from GetCOA

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	sFldName = gsSTAcctFocus		&apos;// get &quot;AcctFldxx&quot; string
	iNameLen = Len(sFldName)		&apos;// get length, either 8 or 9
	Select Case iNameLen
	Case 8
		iDigCount = 1
	Case 9
		iDigCount = 2
	Case else
		iDigCount = 1
	End Select
	
	sAcctIx = Right(sFldName,iDigCount)
	iArrayIx = Val(sAcctIx) - 1
	
	sCOANum = GetCOA(1)		&apos;// get COA from dialog
	gsSTCOAs(iArrayIx) = sCOANum
	oSTDlgCtrl = puoSTDialog.getControl(sFldName)
	oSTDlgCtrl.Text = sCOANum
	
NormalExit:
	exit sub

ErrorHandler:
	msgBox(&quot;Error getting COA from list...&quot;)
	GoTo NormalExit
end sub		&apos;// end STCOAListBtnListener		6/18/20
&apos;/**/
&apos;// STCredRBListener.bas
&apos;//---------------------------------------------------------------
&apos;// STCredRBListener - ST [Credit] radio button event handler.
&apos;//		6/26/20.	wmk.	12:00
&apos;//---------------------------------------------------------------

public sub STCredRBListener()

&apos;//	Usage.	macro call or
&apos;//			call STCredRBListener()
&apos;//
&apos;// Entry.	User clicked [Credit] radio button control
&apos;//			gbSTSplitCredits = current split credits state
&apos;//			gsETAcct1 = Debit account	
&apos;//			gsETAcct2 = Credit account
&apos;//
&apos;//	Exit.	if clicked ON
&apos;//			gbSTSplitCredits set false
&apos;//			gbETDebitIsTotal set false
&apos;//			if OFF, gbSTSplitCredits set true
&apos;//			gbETDebitIsTotal set true
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.		wmk.	original code
&apos;//`6/26/20.	wmk.	gsSTAcct1 or gsSTAcct2 used to set &quot;TotalAcctFld&quot;
&apos;//						in ST dialog to display account being split
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim oSTCredRB		As Object		&apos;// {Credit} radio button object
dim bState			As Boolean		&apos;// .State of button
dim oSTDlgCtrl		As Object		&apos;// control from &quot;TotalAcctFld&quot; in ST

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oSTCredRB = puoSTDialog.getControl(&quot;CreditTotRB&quot;)
	oSTDlgCtrl = puoSTDialog.getControl(&quot;TotalAcctFld&quot;)
	bState = oSTCredRB.State
	if bState then	&apos;// Credit button selected
		gbSTSplitCredits = false
		gbETDebitIsTotal = false
		oSTDlgCtrl.Text = gsETAcct2
	else
		gbSTSplitCredits = true
		gbETDebitIsTotal = true
		oSTDlgCtrl.Text = gsETAcct1
	endif	&apos;// end Credit Total button State conditional

NormalExit:
	exit sub

ErrorHandler:
	msgBox(&quot;STCredRBListener - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end STCredRBListener	6/26/20
&apos;/**/
&apos;// STDebtRBListener.bas
&apos;//---------------------------------------------------------------
&apos;// STDebtRBListener - ST [Debit] radio button event handler.
&apos;//		7/6/20.	wmk.	19:00
&apos;//---------------------------------------------------------------

public sub STDebtRBListener()

&apos;//	Usage.	macro call or
&apos;//			call STDebtRBListener()
&apos;//
&apos;// Entry.	User clicked [Debit] radio button control
&apos;//			puoSTDialog = Split Control dialog object
&apos;//			gbSTSplitCredits = current split credits stat
&apos;//			gsETAcct1 = Debit account	
&apos;//			gsETAcct2 = Credit account
&apos;//
&apos;//	Exit.	if clicked ON
&apos;//				gbSTSplitCredits set true
&apos;//				gbETDebitIsTotal set true
&apos;//				STSplitAcctFld = gsSTAcct1
&apos;//			if OFF, gbSTSplitCredits set false
&apos;/				gbETDebitIsTotal set false
&apos;//				STSplitAcctFld - gsSTAcct2
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;//`6/26/20.	wmk.	gsSTAcct1 or gsSTAcct2 used to set &quot;TotalAcctFld&quot;
&apos;//						in ST dialog to display account being split
&apos;//	7/6/20.		wmk.	bug fix; code was checking oSTCredRB.State instead
&apos;//						of oSTDebtRB.State; puoSTDailog corrected; gsETAcct1
&apos;//						gsETAcct2 references corrected
&apos;//
&apos;//	Notes. 

&apos;//	constants.

&apos;//	local variables.
dim oSTDebtRB		As Object		&apos;// {Debit} radio button object
dim bState			As Boolean		&apos;// .State of button
dim oSTDlgCtrl		As Object		&apos;// control from &quot;SplitAcctFld&quot; in ST

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	oSTDebtRB = puoSTDialog.getControl(&quot;DebitTotRB&quot;)
	oSTDlgCtrl = puoSTDialog.getControl(&quot;TotalAcctFld&quot;)
	bState = oSTDebtRB.State
	if bState then	&apos;// Debit button selected
		gbSTSplitCredits = true
		gbETDebitIsTotal = true
		oSTDlgCtrl.Text = gsETAcct1
	else
		gbSTSplitCredits = false
		gbETDebitIsTotal = false
		oSTDlgCtrl.Text = gsETAcct2
	endif	&apos;// end Debit Total button State conditional

NormalExit:
	exit sub

ErrorHandler:
	msgBox(&quot;STDebtRBListener - unprocessed error.&quot;)
	GoTo NormalExit

end sub		&apos;// end STDebtRBListener	7/6/20
&apos;/**/
&apos;// STDesc10LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc10LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STDesc10LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc10LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld10&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc10LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc10LostFocus	6/25/20
&apos;/**/
&apos;// STDesc1LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc1LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	05:15
&apos;//---------------------------------------------------------------

public sub STDesc1LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc1LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld1&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc1LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc1LostFocus	6/25/20
&apos;/**/
&apos;// STDesc2LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc2LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	05:15
&apos;//---------------------------------------------------------------

public sub STDesc2LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc2LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld2&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc2LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc2LostFocus	6/25/20
&apos;/**/
&apos;// STDesc3LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc3LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	05:15
&apos;//---------------------------------------------------------------

public sub STDesc3LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc3LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld3&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc3LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc3LostFocus	6/25/20
&apos;/**/
&apos;// STDesc4LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc4LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STDesc4LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc4LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld4&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc4LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc4LostFocus	6/25/20
&apos;/**/
&apos;// STDesc5LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc5LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STDesc5LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc5LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld5&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc5LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc5LostFocus	6/25/20
&apos;/**/
&apos;// STDesc6LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc6LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STDesc6LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc6LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld6&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc6LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc6LostFocus	6/25/20
&apos;/**/
&apos;// STDesc7LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc7LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STDesc7LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc7LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld7&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc7LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc7LostFocus	6/25/20
&apos;/**/
&apos;// STDesc8LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc8LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STDesc8LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc8LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld8&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc8LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc8LostFocus	6/25/20
&apos;/**/
&apos;// STDesc9LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDesc9LostFocus - Handle DescFldn LostFocus event.
&apos;//		6/25/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STDesc9LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STDesc4LostFocus()
&apos;//
&apos;// Entry.	DescFld1..DescFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;//	Exit.	gsSTDescs(0) = text from DescFld1..10
&apos;//
&apos;// Calls.	STDescLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;DescFld9&quot;					&apos;// clear object focus tracker
	iStatus = STDescLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STDesc9LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STDesc9LostFocus	6/25/20
&apos;/**/
&apos;// STDescLostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STDescLostFocus - Handle any DescFld LostFocus event.
&apos;//		6/25/20.	wmk.	05:30
&apos;//---------------------------------------------------------------

public function STDescLostFocus(psFldName As String) As Integer

&apos;//	Usage.	macro call or
&apos;//			call STDescLostFocus()
&apos;//
&apos;//	[Parameters.	sFldName = name of dialog object lost focus]
&apos;//
&apos;// Entry.	AcctFld1..AcctFld10 lost focus
&apos;//			gsSTObjFocus = name of object with focus
&apos;//			gdSTAccumTot = accumulated split total
&apos;//			gdSTTotalAmt = total amount to split
&apos;//
&apos;//	Exit.	gsCOAs(0) = text from AcctFld1..10
&apos;//
&apos;// Calls.	STFld7ToIndex
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; cloned from STRefLostFocus
&apos;//
&apos;//	Notes. gsSTObjFocus will be used by the [...] button Execute
&apos;//	event to determine which Acct array string to store the selected
&apos;// COA into.


&apos;//	constants.

&apos;//	local variables.
dim iRetValue 		As Integer			&apos;// returned status
dim iStatus			As Integer			&apos;// general status
dim iRowIx			As Integer			&apos;// index of present row
dim oDlgControl		As Object			&apos;// field ptr
dim bRowComplete	As Boolean			&apos;// row complete flag
dim bDlgComplete	As Boolean			&apos;// dialog complete flag
dim sFldName 		As String			&apos;// local copy of field name

	&apos;// code.
	iRetValue = -1						&apos;// set bad return
	ON ERROR GOTO ErrorHandler
	sFldName = psFldName				&apos;// use local copy of field name
	oDlgControl = puoSTDialog.getControl(sFldName)
	iRowIx = STFld7ToIndex(sFldName)
	gsSTDescs(iRowIx) = oDlgControl.Text
	
	iRetValue = 0

NormalExit:
	STDescLostFocus = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;In STDescLostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end function		&apos;// end STDescLostFocus	6/25/20
&apos;/**/
&apos;// STDialogReset.bas
&apos;//---------------------------------------------------------------
&apos;// STDialogReset - Reset Split Transaction Dialog.
&apos;//		7/7/20.	wmk.	07:15
&apos;//---------------------------------------------------------------

public sub STDialogReset()

&apos;//	Usage.	call STDialogReset()
&apos;//			or macro call
&apos;//
&apos;// Entry.	puoSTDialog = Split Transaction dialog object
&apos;//
&apos;//	Exit.	iVar = 0 - normal return.
&apos;//				 &lt;&gt; 0 = abnormal return
&apos;//
&apos;// Calls.	STPubVarsReset, STDlgCtrlsReset
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;//	6/23/20.	wmk.	sub to support &lt;Reset Form&gt; execute() event
&apos;//	7/7/20.		wmk.	remove reference to deleted &quot;HasFocus&quot; field
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iRetValue 	As Integer
dim i			As Integer
dim oSTDlgCtrl	As Object
dim sFldNum		As String
dim sCtrlName	As String

	&apos;// code.
	
	iRetValue = -1		&apos;// abnormal return
	ON ERROR GOTO ErrorHandler
&apos;XRay puoSTDialog
	gdSTAccumTot = 0.			&apos;// clear accumulated total
	giSTLastIx = 0				&apos;// last active row index
	gbSTSplitCredits = true		&apos;// assume Debits as total
	gsSTAcctFocus = &quot;&quot;			&apos;// clear account object focus
	gsSTObjFocus = &quot;&quot;			&apos;// object name with focus
	redim gsSTDescs(0)	&apos;// scrap descriptions array
	redim gdSTAmts(0)	&apos;// scrap amounts array
	redim gsSTCOAs(0)	&apos;// scrap COAs array
	redim gsSTRefs(0)	&apos;// scrap refs array

	&apos;// set State of Debit/Credit radio buttons to Debit.State = true
	oSTDlgCtrl = puoSTDialog.getControl(&quot;DebitTotRB&quot;)
	oSTDlgCtrl.State = true
	
	&apos;// set Total field to gdSTTotalAmt
	oSTDlgCtrl = puoSTDialog.getControl(&quot;TotalAmt&quot;)
	oSTDlgCtrl.Value = gdSTTotalAmt

	if false then
	GoTo JumpAround
	endif
		
	&apos;// clear all 10 Description, Amount, and COA fields
	&apos;// and set .Enabled attribute to false for last 9 of each
	for i = 0 to 9
		sFldNum = Trim(Str(i+1))
		sCtrlName = &quot;DescFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = &quot;&quot;
		if i &gt; 0 then
			oSTDlgCtrl.Model.Enabled = false
		endif
		
		if false then 
		GoTo ContFor
		endif
		
		sCtrlName = &quot;AmtFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = &quot;&quot;
		if i &gt; 0 then
			oSTDlgCtrl.Model.Enabled = false
		endif
		
		sCtrlName = &quot;AcctFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = &quot;&quot;
		if i &gt; 0 then
			oSTDlgCtrl.Model.Enabled = false
		endif
		
		sCtrlName = &quot;RefFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = &quot;&quot;
		if i &gt; 0 then
			oSTDlgCtrl.Model.Enabled = false
		endif
ContFor:		
	next i	&apos;// advance to next control name for each field
JumpAround:
	oSTDlgCtrl = puoSTDialog.getControl(&quot;DescFld1&quot;)
	oSTDlgCtrl.Text = &quot;&quot;
	oSTDlgCtrl = puoSTDialog.getControl(&quot;AmtFld1&quot;)
	oSTDlgCtrl.Text = &quot;&quot;
	
&apos;	oSTDlgCtrl = puoSTDialog.getControl(&quot;HasFocusFld&quot;)
&apos;	oSTDlgCtrl.Text = &quot;MyohMy&quot;		
	&apos;// clear Accumulated Total field to 0; set Unsplit field to gdSTTotalAmt
	oSTDlgCtrl = puoSTDialog.getControl(&quot;AccumTot&quot;)
	oSTDlgCtrl.Value = 0.
	oSTDlgCtrl = puoSTDialog.getControl(&quot;UnsplitTot&quot;)
	oSTDlgCtrl.Value = gdSTTotalAmt
	
	&apos;// set DoneBtn Enabled to false
	oSTDlgCtrl = puoSTDialog.getControl(&quot;DoneBtn&quot;)
	oSTDlgCtrl.Model.Enabled = false
	

	if true then
		GoTo NormalExit
	endif	
	&apos;// reset dialog public variables
	iRetValue = STPubVarsReset()
	if iRetValue &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;// end bad controls reset conditional
	
	&apos;// reset dialog controls
	iRetValue = STDlgCtrlsReset()
	if iRetValue &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;// end bad controls reset conditional
	
	iRetValue = 0		&apos;// no errors - exit
	
NormalExit:
	
	exit sub
	
ErrorHandler:
	msgBox(&quot;STDialogReset - i = &quot; + i + &quot; ..unprocessed error.&quot;)
	GoTo NormalExit
	
end sub 	&apos;// end STDialogReset		7/7/20
&apos;/**/
&apos;// STDialogReset.bas
&apos;//---------------------------------------------------------------
&apos;// fSTDialogReset - Reset Split Transaction Dialog.
&apos;//		6/23/20.	wmk.
&apos;//---------------------------------------------------------------

public function fSTDialogReset() as Integer

&apos;//	Usage.	iVar = fSTDialogReset()
&apos;//
&apos;// Entry.	puoSTDialog = Split Transaction dialog object
&apos;//
&apos;//	Exit.	iVar = 0 - normal return.
&apos;//				 &lt;&gt; 0 = abnormal return
&apos;//
&apos;// Calls.	STPubVarsReset, STDlgCtrlsReset
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;//	6/23/20.	wmk.	name change to fSTDialogReset to support
&apos;//						STDialogReset sub for event processing
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Integer

	&apos;// code.
	
	iRetValue = -1		&apos;// abnormal return
	
	&apos;// reset dialog public variables
	iRetValue = STPubVarsReset()
	if iRetValue &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;// end bad controls reset conditional
	
	&apos;// reset dialog controls
	iRetValue = STDlgCtrlsReset()
	if iRetValue &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;// end bad controls reset conditional
	
	iRetValue = 0		&apos;// no errors - exit
	
NormalExit:
	fSTDialogReset = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;fSTDialogReset - unprocessed error.&quot;)
	GoTo NormalExit
	
end function 	&apos;// end fSTDialogReset		6/18/20
&apos;/**/
&apos;// STDlgCtrlsReset.bas
&apos;//---------------------------------------------------------------
&apos;// STDlgCtrlsReset - Reset Split Dialog controls.
&apos;//		6/27/20.	wmk.	15:00
&apos;//---------------------------------------------------------------

public function STDlgCtrlsReset() As Integer

&apos;//	Usage.	iVar = STDlgCtrlsReset()
&apos;//
&apos;// Entry.	puoSTDialog = Split Transaction dialog object
&apos;//			gbETDebitIsTotal = Debit is total flag from ET dialot
&apos;//			gsETAcct1 = Debit account COA
&apos;//			gsETAcct2 = Credit account COA
&apos;//			gbSTEditMode = true if &lt;Edit Split&gt;  being started
&apos;//							false otherwise		
&apos;//
&apos;//	&quot;SplitDialog&quot; object fields as follows:
&apos;// DebitTotRB - Debit is total radio button
&apos;// CreditTotRB - Credit is total radio button
&apos;// TotalAmt - total transaction amount text box (numeric, read-only)
&apos;//	TotalAcctFld - account COA transaction being split from
&apos;// DescFld1 - description field 1
&apos;// ...
&apos;// DescFld10 - description field 10
&apos;//	AmtFld1 - split amount field 1	(numeric)
&apos;// ...
&apos;// AmtFld10 - split amount field 10 (numeric)
&apos;// AcctFld1 - COA account field 1
&apos;//	...
&apos;// AcctFld10 - COA account field 10
&apos;// COAListBtn - COA list [...] button
&apos;// AccumTot - splits accumulated total	(numeric, read-only)
&apos;// UnsplitTot - unsplit remaining amount (numeric, read-only)
&apos;// DoneBtn - [Done] button
&apos;// ResetBtn - [Reset Form] button
&apos;//	CancelBtn - [Cancel] button
&apos;//
&apos;//	Exit.	iVar = 0 - normal return
&apos;//				&lt;&gt; 0 - error return
&apos;//			if gbSTEditMode = true on entry; iVar will be the returned
&apos;//			status from STDlgCtrlsRestore
&apos;//
&apos;// Calls.	STDlgCtrlsRestore
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code; stub
&apos;//	6/23/20.	wmk.	code fleshed out; loop added, but problematic
&apos;//	6/25/20.	wmk.	bug fixes where loop calls were to .getObject
&apos;//						instead of .getControl; new field &quot;TotalAcctFld&quot;
&apos;//						set from ET gsETAcct1 or gsETAcct2 dependent
&apos;//						on flag gbETDebitIsTotal; corrected loop to use
&apos;//						oSTDlgCtrl instead of oDlgControl
&apos;//	6/27/20.	wmk.	&lt;Edit Split&gt; support to restore previously
&apos;//						entered values
&apos;//
&apos;//	Notes. When intializing some of the ST fields, the values are
&apos;//	picked up from the ET dialog public vars.


&apos;//	constants.

&apos;//	local variables.
dim iRetValue 	As Integer
dim oSTDlgCtrl 	As Object
dim i			As Integer		&apos;// loop index
dim sFldNum		As String		&apos;// field number
dim sCTrlName	As String		&apos;// control name

	&apos;// code.
	
	iRetValue = -1		&apos;// set error return
	ON ERROR GOTO ErrorHandler

	&apos;// check for &lt;Edit Split&gt; and restore controls if so
	if gbSTEditMode then
		iRetValue = STDlgCtrlsRestore()
		GoTo NormalExit
	endif
	
	&apos;// set State of Debit/Credit radio buttons to Debit.State = true
	oSTDlgCtrl = puoSTDialog.getControl(&quot;DebitTotRB&quot;)
	oSTDlgCtrl.State = true
	
	&apos;// set Total field to gdSTTotalAmt
	oSTDlgCtrl = puoSTDialog.getControl(&quot;TotalAmt&quot;)
	oSTDlgCtrl.Value = gdSTTotalAmt

if false then
GoTo JumpAround
endif
	&apos;// set account split from field
	oSTDlgCtrl = puoSTDialog.getControl(&quot;TotalAcctFld&quot;)
	if gbSTSplitCredits then
		oSTDlgCtrl.Text = gsETAcct1	&apos;// debit account
	else
		oSTDlgCtrl.Text = gsETAcct2	&apos;// credit account
	endif
	
if false then
GoTo JumpAround
endif
	
	&apos;// clear all 10 Description, Amount, and COA fields
	&apos;// and set .Enabled attribute to false for last 9 of each
	for i = 0 to 9
		sFldNum = Trim(Str(i+1))
		sCtrlName = &quot;DescFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = &quot;&quot;
		if i &gt; 0 then
			oSTDlgCtrl.Model.Enabled = false
		endif
		
		sCtrlName = &quot;AmtFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = &quot;&quot;
		if i &gt; 0 then
			oSTDlgCtrl.Model.Enabled = false
		endif
		
		sCtrlName = &quot;AcctFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = &quot;&quot;
		if i &gt; 0 then
			oSTDlgCtrl.Model.Enabled = false
		endif
		
		sCtrlName = &quot;RefFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = &quot;&quot;
		if i &gt; 0 then
			oSTDlgCtrl.Model.Enabled = false
		endif
		
	next i	&apos;// advance to next control name for each field
	
JumpAround:
	&apos;// clear Accumulated Total field to 0; set Unsplit field to gdSTTotalAmt
	oSTDlgCtrl = puoSTDialog.getControl(&quot;AccumTot&quot;)
	oSTDlgCtrl.Value = 0.
	oSTDlgCtrl = puoSTDialog.getControl(&quot;UnsplitTot&quot;)
	oSTDlgCtrl.Value = gdSTTotalAmt
	
	&apos;// set DoneBtn Enabled to false
	oSTDlgCtrl = puoSTDialog.getControl(&quot;DoneBtn&quot;)
	oSTDlgCtrl.Model.Enabled = false
	
	iRetValue = 0
	
NormalExit:	
	STDlgCtrlsReset = iRetValue
	exit function

ErrorHandler:
msgBox(&quot;STDlgCtrlsReset - i = &quot; + i + &quot;.. unprocessed error.&quot;)
	GoTo NormalExit
	
end function 	&apos;// end STDlgCtrlsReset		6/27/20
&apos;/**/
&apos;// STDlgCtrlsRestore.bas
&apos;//---------------------------------------------------------------
&apos;// STDlgCtrlsRestore - Restore fields in ST dialog (Edit).
&apos;//		6/27/20.	wmk.	16:45
&apos;//---------------------------------------------------------------

public function STDlgCtrlsRestore() As Integer	

&apos;//	Usage.	iVar = STDlgCtrlsRestore()
&apos;//
&apos;// Entry.	gsSTDescs() = descriptions array
&apos;//			gdSTAmts() = split amounts array
&apos;//			gsSTCOAs() = COA accounts array
&apos;//			gsSTRefs() = references array
&apos;//			gbSplitCredits = true if gdSTAmts are Credits;
&apos;//							 false if gdSTAmts are Debits
&apos;//			gdSTTotalAmt = split total
&apos;//			VSDialog fields:
&apos;// DebitTotRB - Debit is total radio button
&apos;// CreditTotRB - Credit is total radio button
&apos;// TotalAmt - total transaction amount text box (numeric, read-only)
&apos;//	TotalAcctFld - account COA transaction being split from
&apos;// DescFld1 - description field 1
&apos;// ...
&apos;// DescFld10 - description field 10
&apos;//	AmtFld1 - split amount field 1	(numeric)
&apos;// ...
&apos;// AmtFld10 - split amount field 10 (numeric)
&apos;// AcctFld1 - COA account field 1
&apos;//	...
&apos;// AcctFld10 - COA account field 10
&apos;// UnsplitTot - unsplit total amount
&apos;// AccumTot - accumulated split sums
&apos;// DoneBtn - [Done] button
&apos;// EditBtn - [Reset Form] button
&apos;//
&apos;//	Exit.	iVar = 0 - no error in preset
&apos;//				 &lt; 0 - error in preset
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/26/20.	wmk.	original code
&apos;//	6/27/20.	wmk.	initial bug fixes; inactive cell backgrounds to MEDGRAY
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Integer
dim oSTDlgCtrl	As Object
dim oSTDlgCtrl1 As Object		&apos;// 2nd control for when needed
dim i			As Integer		&apos;// loop index
dim iActiveLimit	As Integer	&apos;// active index limit in arrays
dim sFldNum		As String		&apos;// field number
dim sCtrlName	As String		&apos;// control name

	&apos;// code.
	
	iRetValue = -1
	ON ERROR GOTO ErrorHandler

	&apos;// set State of Debit/Credit radio buttons based on gbSTSplitCredits
	oSTDlgCtrl = puoSTDialog.getControl(&quot;DebitTotRB&quot;)
	oSTDlgCtrl1 = puoSTDialog.getControl(&quot;CreditTotRB&quot;)
	if gbSTSplitCredits then
		oSTDlgCtrl.State = true
		oSTDlgCtrl.Model.Enabled = true
		oSTDlgCtrl1.Model.Enabled = true
	else
		oSTDlgCtrl.State = false
		oSTDlgCtrl.Model.Enabled = true
		oSTDlgCtrl1.Model.Enabled = true
	endif
	
	&apos;// set Total field to gdSTTotalAmt
	oSTDlgCtrl = puoSTDialog.getControl(&quot;TotalAmt&quot;)
	oSTDlgCtrl.Value = gdSTTotalAmt
	oSTDlgCtrl = puoSTDialog.getControl(&quot;AccumTot&quot;)
	oSTDlgCtrl.Value = gdSTTotalAmt
	
	&apos;// set Unplit Total field to 0, since it was all 
	&apos;// split before
	oSTDlgCtrl = puoSTDialog.getControl(&quot;UnsplitTot&quot;)
	oSTDlgCtrl.Value = 0. 

	&apos;// set account split from field
	oSTDlgCtrl = puoSTDialog.getControl(&quot;TotalAcctFld&quot;)
	if gbSTSplitCredits then
		oSTDlgCtrl.Text = gsETAcct1	&apos;// debit account
	else
		oSTDlgCtrl.Text = gsETAcct2	&apos;// credit account
	endif
	
	&apos;//	set all active Description, Amount, and COA fields for all
	&apos;// array values up to subscript UBound and set fields enabled
	&apos;// so easily visible. All fields are read-only.
	&apos;// set all inactive Description, Amount, and COA fields empty
	&apos;// and set Enabled to false to darken fields
	iActiveLimit = uBound(gdSTAmts)
	for i = 0 to iActiveLimit
		sFldNum = Trim(Str(i+1))
		sCtrlName = &quot;DescFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = gsSTDescs(i)
		oSTDlgCtrl.Model.Enabled = true
		
		sCtrlName = &quot;AmtFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = Str(gdSTAmts(i))
		oSTDlgCtrl.setValue(gdSTAmts(i))
		oSTDlgCtrl.Model.Enabled = true
		
		sCtrlName = &quot;AcctFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = gsSTCOAs(i)
		oSTDlgCtrl.Model.Enabled = true
		
		sCtrlName = &quot;RefFld&quot; + sFldNum
		oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
		oSTDlgCtrl.Text = gsSTRefs(i)
		oSTDlgCtrl.Model.Enabled = true
		
	next i	&apos;// advance to next control name for each field

	&apos;// set remaining fields Enabled = false with no data
	if iActiveLimit &lt; 9 then
		for i = iActiveLimit+1 to 9
			sFldNum = Trim(Str(i+1))
			sCtrlName = &quot;DescFld&quot; + sFldNum
			oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
			oSTDlgCtrl.Model.Enabled = false

			sCtrlName = &quot;AmtFld&quot; + sFldNum
			oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
			oSTDlgCtrl.Model.Enabled = false
		
			sCtrlName = &quot;AcctFld&quot; + sFldNum
			oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
			oSTDlgCtrl.Model.Enabled = false
		
			sCtrlName = &quot;RefFld&quot; + sFldNum
			oSTDlgCtrl = puoSTDialog.getControl(sCtrlName)
			oSTDlgCtrl.Model.Enabled = false
		next i
		
	endif		&apos;// end active limit &lt; 9 conditional
	

	iRetValue = 0	&apos;// normal return
	
NormalExit:	
	STDlgCtrlsRestore = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;STDlgCtrlsRestore - sCtrlName = &quot; + sCtrlName + &quot; unprocessed error.&quot;)
	GoTo NormalExit
	
end function 	&apos;// end STDlgCtrlsRestore	6/27/20
&apos;/**/
&apos;// STDoneBtnRun.bas
&apos;//---------------------------------------------------------------
&apos;// STDoneBtnRun - ST dialog &lt;Done&gt; button Execute() event handler.
&apos;//		6/24/20.	wmk.
&apos;//---------------------------------------------------------------

public sub STDoneBtnRun()

&apos;//	Usage.	macro call or
&apos;//			call STDoneBtnRun()
&apos;//
&apos;// Entry.	puoSTDialog = ST dialog object
&apos;//
&apos;//	Exit.	ST dialog ended, returning exit code 2
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.		wmk.	original code
&apos;//
&apos;//	Notes.
&apos;//

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	puoSTDialog.endDialog(2)
	
end sub		&apos;// end STDoneBtnRun	6/24/20
&apos;/**/
&apos;// STEnableNextRow.bas
&apos;//---------------------------------------------------------------
&apos;// STEnableNextRow - Enable next ST dialog input row.
&apos;//		6/27/20.	wmk.	05:00
&apos;//---------------------------------------------------------------

public function STEnableNextRow(piCurrRow) As Integer

&apos;//	Usage.	iVar = STEnableNextRow( iCurrRow )
&apos;//
&apos;//		iCurrRow = current input row index {0..9}
&apos;//
&apos;// Entry.	puoSTDialog = ST dialog object
&apos;//			&quot;AmtFld.n&quot; or &quot;AcctFld.n&quot; just lost focus with enough to move on
&apos;//			field &quot;AmtFld.n-1&quot; will be Enabled if not already when .9 &lt;=9
&apos;//
&apos;//	Exit.	iVar = 0 - normal return
&apos;//				 &lt;&gt; 0	- error in enabling next row
&apos;//			expanded public input string arrays if next row beyond last
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;//	6/20/20.	wmk.	redimension input arrays to accept input
&apos;// 6/27/20.	wmk.	open if sequence corrected; eliminated 2nd end
&apos;//						function as fix
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;//	ST input field controls base names.
const	AMT_BASENAME=&quot;AmtFld&quot;
const	ACCT_BASENAME=&quot;AcctFld&quot;
const	DESC_BASENAME=&quot;DescFld&quot;
const	REF_BASENAME=&quot;RefFld&quot;

&apos;//	local variables.
dim iRetValue 	As Integer
dim iNextIx		As Integer	&apos;// next row index
dim sRowIx		As String	&apos;// next index as String
dim oDlgControl	As Object	&apos;// ST dialog object
dim sFldName	As String	&apos;// field name

	&apos;// code.
	
	iRetValue = -1
	ON ERROR GOTO ErrorHandler
	if piCurrRow &gt;= 9 then
		iRetValue = 0
		GoTo NormalExit
	endif	&apos;// end at end of input conditional

	&apos;// check next row already enabled
	iNextIx = piCurrRow + 1
	if giSTLastIx &gt;= iNextIx then
		iRetValue = 0
		GoTo NormalExit
	else
		giSTLastIx = iNextIx	&apos;// advance last active row index
	endif	&apos;// end next row already enabled conditional

	if iNextIx &gt; UBound(gdSTAmts) then
		redim preserve gdSTAmts(iNextIx)
		redim preserve gsSTDescs(iNextIx)
		redim preserve gsSTCOAs(iNextIx)
		redim preserve gsSTRefs(iNextIx)
	endif
	
	iNextIx = iNextIx + 1				&apos;// advance index to get row suffix
	sRowIx = Trim(Str(iNextIx))			&apos;// get row string
	
	&apos;// Enable controls in next row
	sFldName = DESC_BASENAME + sRowIx	&apos;// description input fld
	oDlgControl = puoSTDialog.getControl(sFldName)
	oDlgControl.Model.Enabled = true
	
	sFldName = AMT_BASENAME + sRowIx	&apos;// amount input fld
	oDlgControl = puoSTDialog.getControl(sFldName)
	oDlgControl.Model.Enabled = true

	sFldName = ACCT_BASENAME + sRowIx	&apos;// COA account input fld
	oDlgControl = puoSTDialog.getControl(sFldName)
	oDlgControl.Model.Enabled = true

	sFldName = REF_BASENAME + sRowIx	&apos;// reference input fld
	oDlgControl = puoSTDialog.getControl(sFldName)
	oDlgControl.Model.Enabled = true

	iRetValue = 0
	
NormalExit:
	STEnableNextRow = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;STEnableNextRow - unprocessed error.&quot;)
	GoTo NormalExit
	
end function 	&apos;// end STEnableNextRow		6/20/20
&apos;/**/
&apos;// STFld6ToIndex.bas
&apos;//---------------------------------------------------------------------
&apos;// STFld6ToIndex - Convert field with 6 char base name to array index.
&apos;//		6/19/20.	wmk.
&apos;//---------------------------------------------------------------------

public function STFld6ToIndex(psFldName As String) As Integer

&apos;//	Usage.	iVar = STFld6ToIndex( sFldName )
&apos;//
&apos;//		sFldName = name of field (e.g. &quot;AmtFld1&quot;)
&apos;//
&apos;// Entry.	gdSTAmtFldsn() array contains amount values entered
&apos;//
&apos;//	Exit.	iVar = 0-based index into arrays corresponding to
&apos;//					&lt;object-name&gt;n
&apos;//					subtracts 1 from n to obtain index
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Integer	&apos;// returned index value
dim iNameLen	As Integer	&apos;// passed name length
dim sFldName	As String	&apos;// passed field name
dim iDigCount	As Integer	&apos;// digit count in name
dim sAcctIx		As String	&apos;// extracted end digit(s)
dim iArrayIx	As Integer	&apos;// converted array index

	&apos;// code.
	
	iRetValue = -1
	ON ERROR GOTO ErrorHandler
&apos;	sFldName = psFldName
	iNameLen = Len(psFldName)		&apos;// get length, either 7 or 8
	Select Case iNameLen
	Case 7
		iDigCount = 1
	Case 8
		iDigCount = 2
	Case else
		iDigCount = 1
	End Select
	
	sAcctIx = Right(psFldName,iDigCount)
	iArrayIx = Val(sAcctIx) - 1
	if iArrayIx &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;//end negative index calculated conditional

	iRetValue = iArrayIx
	
NormalExit:
	STFld6ToIndex = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;STFld6ToIndex - unprocessed error converting &apos;&quot; + psFldName _
			+ &quot;&apos; to index&quot;)
	GoTo NormalExit
	
end function 	&apos;// end STFld6ToIndex	6/19/20
&apos;/**/
&apos;// STFld7ToIndex.bas
&apos;//---------------------------------------------------------------------
&apos;// STFld7ToIndex - Convert field with 7 char base name to array index.
&apos;//		6/19/20.	wmk.	10:00
&apos;//---------------------------------------------------------------------

public function STFld7ToIndex(psFldName As String) As Integer

&apos;//	Usage.	iVar = STFld7ToIndex( sFldName )
&apos;//
&apos;//		sFldName = name of field (e.g. &quot;AmtFld1&quot;)
&apos;//
&apos;// Entry.	gdSTAmtFldsn() array contains amount values entered
&apos;//
&apos;//	Exit.	iVar = 0-based index into arrays corresponding to
&apos;//					&lt;object-name&gt;n
&apos;//					subtracts 1 from n to obtain index
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Integer	&apos;// returned index value
dim iNameLen	As Integer	&apos;// passed name length
dim sFldName	As String	&apos;// passed field name
dim iDigCount	As Integer	&apos;// digit count in name
dim sAcctIx		As String	&apos;// extracted end digit(s)
dim iArrayIx	As Integer	&apos;// converted array index

	&apos;// code.
	
	iRetValue = -1
	ON ERROR GOTO ErrorHandler
	sFldName = psFldName
	iNameLen = Len(sFldName)		&apos;// get length, either 7 or 8
	Select Case iNameLen
	Case 8
		iDigCount = 1
	Case 9
		iDigCount = 2
	Case else
		iDigCount = 1
	End Select
	
	sAcctIx = Right(sFldName,iDigCount)
	iArrayIx = Val(sAcctIx) - 1
	if iArrayIx &lt; 0 then
		GoTo ErrorHandler
	endif	&apos;//end negative index calculated conditional

	iRetValue = iArrayIx
	
NormalExit:
	STFld7ToIndex = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;STFld7ToIndex - unprocessed error converting &apos;&quot; + psFldName _
			+ &quot;&apos; to index&quot;)
	GoTo NormalExit
	
end function 	&apos;// end STFld7ToIndex	6/19/20
&apos;/**/
&apos;// STGetAccumTot.bas
&apos;//---------------------------------------------------------------
&apos;// STGetAccumTot - Get accumulated splits total.
&apos;//		6/18/20.	wmk.
&apos;//---------------------------------------------------------------

public function STGetAccumTot() As Double

&apos;//	Usage.	dVar = STGetAccumTot()
&apos;//
&apos;//	Entry.	gdAccumTot = accumulated split total
&apos;//
&apos;//	Exit.	dVar = accumulated splits total
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.		wmk.	original code
&apos;//
&apos;//	Notes. gdAccumTot is initialized to 0, then updated as user enters
&apos;//	split entries
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim dRetValue	As Double		&apos;// returned value

	&apos;// code.
	dRetValue = gdAccumTot		&apos;// return accumulated total
	STGetAccumTot = dRetValue
	
end function		&apos;// end STGetAccumTot		6/18/20
&apos;/**/
&apos;// STGetObjFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STGetObjFocus - Get control name with focus from dialog.
&apos;//		6/22/20.	wmk.	11:00
&apos;//---------------------------------------------------------------

public function STGetObjFocus() As String

&apos;//	Usage.	sVar = STGetObjFocus()
&apos;//
&apos;// Entry.	puoSTDialog = ST dialog object
&apos;//			puoSTDialog.&lt;HasFocusObject&gt;.Text = available
&apos;//
&apos;//	Exit.	sVar = control name from &quot;HasFocus&quot;.Text in dialog
&apos;//				 = &quot;&quot; if error, or not previously set
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6//20.		wmk.	original code
&apos;//
&apos;//	Notes. STSetObjFocus should be called by any &lt;control&gt;Listener
&apos;//	event when the &lt;control&gt; gets focus. This will provide an easy
&apos;// way for a control to get its own name during processing. The
&apos;// STClrObjFocus function should be called when the &lt;control&gt; loses
&apos;// focus so other controls may reuse the dialog field &quot;HasFocus&quot;.
&apos;// A third method STGetObjFocus will retrieve the current &quot;HasFocus&quot;
&apos;// .Text field for use during the control processing.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim sRetValue As String
dim oDlgControl		As Object		&apos;// dialog control
dim sFocusName		As String		&apos;// HasFocus text control field name

	&apos;// code.
	
	iRetValue = -1
	ON ERROR GOTO ErrorHandler
	oDlgControl = puoSTDialog.getControl(&quot;HasFocusFld&quot;)
	sFocusName = oDlgControl.Text
msgBox(&quot;In STGetObjFocus sFocusName = &apos;&quot; + sFocusName + &quot;&apos;&quot;)
	sRetValue = sFocusName
	
NormalExit:	
	STGetObjFocus = sRetValue
	exit function

ErrorHandler:
	sRetValue = &quot;&quot;		&apos;// abnormal return value
	msgBox(&quot;In STGetObjFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end function 	&apos;// end STGetObjFocus	6/22/20
&apos;/**/
&apos;// STPubVarsReset.bas
&apos;//---------------------------------------------------------------------
&apos;// STPubVarsReset - Reset public variables for Split Transaction dialog.
&apos;//		6/27/20.	wmk.	14:45
&apos;//---------------------------------------------------------------------

public function STPubVarsReset() As Integer

&apos;//	Usage.	iVar = STPubVarsReset()
&apos;//
&apos;// Entry.
&apos;//		puoSTDialog	= ST dialog object
&apos;//		gbSTEditMode = true if &lt;Edit Split&gt; in progress; false otherwise
&apos;//
&apos;// ST dialog stored values.
&apos;public gdSTAccumTot		As Double		&apos;// split accumulated total
&apos;public gdSTTotalAmt		As Double		&apos;// total amount to split
&apos;public gbSTSplitCredits	As Boolean		&apos;// credit values are splits flag
&apos;public gsSTDescs(0)		As String		&apos;// array of split descriptions
&apos;public gdSTAmts(0)		As Double		&apos;// array of amounts
&apos;public gdSTCOAs(0)		As String		&apos;// array of COAs
&apos;//		giLastIX		As Integer		&apos;// last active row index for input
&apos;//		gbSTEditMode = true if &lt;Edit Split&gt; in progress; false otherwise
&apos;//
&apos;//	Exit.	iVar = 0 - normal return
&apos;//				   -1 - error in reset
&apos;//				   +1 - reset skipped; edit in progress
&apos;//			public vars initialized ONLY if gbSTEditMode = false
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	giLastIx added
&apos;//	6/20/20.	wmk.	gsSTRefs initialized
&apos;//	6/27/20.	wmk.	gbSTEditMode flag tested before resetting vars
&apos;//
&apos;//	Notes.	When these publics are cleared, the dialog controls should
&apos;// also be reset by a call to STDlgCtrlsReset so its values are correct.


&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Integer

	&apos;// code.
	
	iRetValue = -1		&apos;// set bad return
	ON ERROR GOTO ErrorHandler
	
	&apos;// only initialize if not dialog not being loaded for edit mode
	if gbSTEditMode then
		iRetValue = 1	&apos;// set edit mode; initialization skipped
		GoTo NormalExit
	endif
	
	&apos;// gdsTotalAmt = itself; this should have been set up by dialog
	&apos;//   invoking the Split Transaction dialog
	gdSTAccumTot = 0.			&apos;// clear accumulated total
	giSTLastIx = 0				&apos;// last active row index
	gbSTSplitCredits = true		&apos;// assume Debits as total
	gsSTAcctFocus = &quot;&quot;			&apos;// clear account object focus
	gsSTObjFocus = &quot;&quot;			&apos;// object name with focus
	redim gsSTDescs(0)	&apos;// scrap descriptions array
	redim gdSTAmts(0)	&apos;// scrap amounts array
	redim gsSTCOAs(0)	&apos;// scrap COAs array
	redim gsSTRefs(0)	&apos;// scrap refs array
	iRetValue = 0

NormalExit:
	STPubVarsReset = iRetValue
	exit function

ErrorHandler:
	msgBox(&quot;STPubVarsReset - unprocessed error.&quot;)
	GoTo NormalExit
	
end function 	&apos;// end STPubVarsReset		6/27/20
&apos;/**/
&apos;// STRef10LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef10LostFocus - Handle RefFldn LostFocus event.
&apos;//		6/25/20.	wmk.	13:30
&apos;//---------------------------------------------------------------

public sub STRef10LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef10LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsRefs(0) = text from RefFld1..10
&apos;//
&apos;// Calls.	STRefLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;RefFld10&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef10LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef10LostFocus	6/25/20
&apos;/**/
&apos;// STRef1LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef1LostFocus - Handle AcctFldn LostFocus event.
&apos;//		6/24/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STRef1LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef1LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsCOAs(0) = text from AcctFld1..10
&apos;//
&apos;// Calls.	STAcctLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.	wmk.	original code
&apos;// 6/19/20.	wmk.	code modified to handle either focus event
&apos;//	6/20/20.	wmk.	bug fix storing COA; add code to check/enable
&apos;//						next row if this row complete
&apos;//	6/24/20.	wmk.	common code moved to STAcctLostFocus; generic
&apos;//						call set up to use common code function
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;RefFld1&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(&quot;RefFld1&quot;)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef1LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef1LostFocus	6/24/20
&apos;/**/
&apos;// STRef2LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef2LostFocus - Handle AcctFldn LostFocus event.
&apos;//		6/24/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STRef2LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef2LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsCOAs(0) = text from AcctFld1..10
&apos;//
&apos;// Calls.	STRefLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.	wmk.	original code; adapted from STRef2LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// use generic handler
	gsSTObjFocus = &quot;RefFld2&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef2LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef2LostFocus	6/24/20
&apos;/**/
&apos;// STRef3LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef3LostFocus - Handle AcctFldn LostFocus event.
&apos;//		6/24/20.	wmk.	10:30
&apos;//---------------------------------------------------------------

public sub STRef3LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef3LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsRefs(0) = text from AcctFld1..10
&apos;//
&apos;// Calls.	STRefLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// use generic handler
	gsSTObjFocus = &quot;RefFld3&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef3LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef3LostFocus	6/24/20
&apos;/**/
&apos;// STRef4LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef4LostFocus - Handle RefFldn LostFocus event.
&apos;//		6/25/20.	wmk.	13:30
&apos;//---------------------------------------------------------------

public sub STRef4LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef4LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsRefs(0) = text from RefFld1..10
&apos;//
&apos;// Calls.	STRefLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// use generic handler
	gsSTObjFocus = &quot;RefFld4&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef4LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef4LostFocus	6/25/20
&apos;/**/
&apos;// STRef5LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef5LostFocus - Handle RefFldn LostFocus event.
&apos;//		6/25/20.	wmk.	13:30
&apos;//---------------------------------------------------------------

public sub STRef5LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef5LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsRefs(0) = text from RefFld1..10
&apos;//
&apos;// Calls.	STRefLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// use generic handler
	gsSTObjFocus = &quot;RefFld5&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef5LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef5LostFocus	6/25/20
&apos;/**/
&apos;// STRef6LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef6LostFocus - Handle RefFldn LostFocus event.
&apos;//		6/25/20.	wmk.	13:30
&apos;//---------------------------------------------------------------

public sub STRef6LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef6LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsRefs(0) = text from RefFld1..10
&apos;//
&apos;// Calls.	STRefLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// use generic handler
	gsSTObjFocus = &quot;RefFld6&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef6LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef6LostFocus	6/25/20
&apos;/**/
&apos;// STRef7LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef7LostFocus - Handle RefFldn LostFocus event.
&apos;//		6/25/20.	wmk.	13:30
&apos;//---------------------------------------------------------------

public sub STRef7LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef7LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsRefs(0) = text from RefFld1..10
&apos;//
&apos;// Calls.	STRefLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;RefFld7&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef7LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef7LostFocus	6/25/20
&apos;/**/
&apos;// STRef8LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef8LostFocus - Handle RefFldn LostFocus event.
&apos;//		6/25/20.	wmk.	13:30
&apos;//---------------------------------------------------------------

public sub STRef8LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef8LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsRefs(0) = text from RefFld1..10
&apos;//
&apos;// Calls.	STRefLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;RefFld8&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef8LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef8LostFocus	6/25/20
&apos;/**/
&apos;// STRef9LostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRef9LostFocus - Handle RefFldn LostFocus event.
&apos;//		6/25/20.	wmk.	13:30
&apos;//---------------------------------------------------------------

public sub STRef9LostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STRef9LostFocus()
&apos;//
&apos;// Entry.	RefFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = control name with focus (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;//	Exit.	gsRefs(0) = text from RefFld1..10
&apos;//
&apos;// Calls.	STRefLostFocus
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/25/20.	wmk.	original code; adapted from STRef1LostFocus
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;RefFld9&quot;					&apos;// clear object focus tracker
	iStatus = STRefLostFocus(gsSTObjFocus)
	if iStatus &lt; 0 then
		GoTo ErrorHandler
	endif

NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STRef9LostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STRef9LostFocus	6/25/20
&apos;/**/
&apos;// STRefLostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STRefLostFocus - Handle any RefFld LostFocus event.
&apos;//		8/26/22.	wmk.	16:04
&apos;//---------------------------------------------------------------

public function STRefLostFocus(psFldName As String) As Integer

&apos;//	Usage.	macro call or
&apos;//			call STRefLostFocus(sFieldName)
&apos;//
&apos;//	Parameters.	sFldName = name of dialog object lost focus
&apos;//
&apos;// Entry.	RerFld1..RefFld10 lost focus
&apos;//			gsSTObjFocus = name of object with focus
&apos;//			gdSTAccumTot = accumulated split total
&apos;//			gdSTTotalAmt = total amount to split
&apos;//
&apos;//	Exit.	gsSTRefs(n) = text from RefFld1..10
&apos;//
&apos;// Calls.	STFld6ToIndex.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.	wmk.	original code; cloned from STRef1LostFocus.
&apos;// 8/26/22.	wmk.	comments corrected.
&apos;//
&apos;//	Notes. gsSTObjFocus will be used by the [...] button Execute
&apos;//	event to determine which Ref array string to store the selected
&apos;// Ref into.


&apos;//	constants.

&apos;//	local variables.
dim iRetValue 		As Integer			&apos;// returned status
dim iStatus			As Integer			&apos;// general status
dim iRowIx			As Integer			&apos;// index of present row
dim oDlgControl		As Object			&apos;// field ptr
dim bRowComplete	As Boolean			&apos;// row complete flag
dim bDlgComplete	As Boolean			&apos;// dialog complete flag
dim sFldName 		As String			&apos;// local copy of field name

	&apos;// code.
	iRetValue = -1						&apos;// set bad return
	ON ERROR GOTO ErrorHandler
&apos;// Note: the callout to STUpdateRefArray was mysteriously getting messed up
&apos;// and not exiting properly. ODDLY, this may have been because of an unhandled
&apos;// error in the AcctFld handlers where STAcctLostFocus was removed from the code
&apos;// inadvertantly, but still called and not caught in the runtime error handlers...

	sFldName = psFldName				&apos;// use local copy of field name
	oDlgControl = puoSTDialog.getControl(sFldName)
	iRowIx = STFld6ToIndex(sFldName)
	gsSTRefs(iRowIx) = oDlgControl.Text
	
	iRetValue = 0

NormalExit:
	STRefLostFocus = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;In STRefLostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end function		&apos;// end STRefLostFocus	8/26/22
&apos;/**/
&apos;// STRowComplete.bas
&apos;//---------------------------------------------------------------
&apos;// STRowComplete - Check if entry row has minimum information.
&apos;//		6/20/20.	wmk.	20:00
&apos;//---------------------------------------------------------------

public function STRowComplete(piRowIx As Integer) As Boolean

&apos;//	Usage.	bVal = STRowComplete(iRowIx)
&apos;//
&apos;//	Parameters.	iRowIx = row to check for minimum information
&apos;//
&apos;//	Entry	gdSTAmts(iRowIx) has stored value
&apos;//			gsSTCOAs(iRowIx) has 4 digits
&apos;// Entry.	giSTLastIx = index of last stored row from dialog
&apos;//			gdSTAmts(0..giSTLastIx0 = stored amounts from dialog
&apos;//			gsSTCOAs(0..giSTLastIx) = stored account #s from dialog
&apos;//
&apos;//	Exit.	bVal = true if ALL of the following:
&apos;//					gdSTAmts(0..STLastIx) = non-empty values
&apos;//					gsSTCOAs(0..STLastIx) = non-empty values
&apos;//					gdSTTotalAmt = gdSTAccumTot
&apos;//				   false otherwise
&apos;//
&apos;// Calls.	&lt;other subs/functions called&gt;
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;// 6/20/20.	wmk.	bug fix with return value not being set
&apos;//
&apos;//	Notes. &lt;Insert notes here&gt;
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim bRetValue As Boolean		&apos;// returned flag
dim bRowComplete	As Boolean	&apos;// interim tests flag

	&apos;// code.
	bRowComplete = (Len(gsSTCOAs(piRowIx)) = 4)
	bRowComplete = bRowComplete AND (gdSTAmts(piRowix) &gt;= 0)	
	STRowComplete = bRowComplete
&apos;STRowComplete = true	&apos;//$
end function 	&apos;// end STRowComplete	6/20/20
&apos;/**/
&apos;// STSetAccumTot.bas
&apos;//---------------------------------------------------------------
&apos;// STSetAccumTot - Get accumulated splits total.
&apos;//		6/18/20.	wmk.	18:00
&apos;//---------------------------------------------------------------

public function STSetAccumTot(pdTotal As Double) As Integer

&apos;//	Usage.	iVar = STSetAccumTot(dTotal)
&apos;//
&apos;//	Paramters.	dTotal = new total to set in AccumTot field
&apos;//
&apos;//	Entry.	gdAccumTot = allocated for accumulated split total
&apos;//			puoSTDialog	= loaded ST dialog object
&apos;//
&apos;//	Exit.	iVar = 0 - normal return
&apos;//				   -1 - error setting accumulated total
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.		wmk.	original code
&apos;//
&apos;//	Notes. gdAccumTot is initialized to 0, then updated as user enters
&apos;//	split entries
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iRetValue	As Integer		&apos;// returned value
dim oSTAccumTotFld	As Object	&apos;// accumulated total text field

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	iStatus = 0					&apos;// normal return
	gdAccumTot = pdTotal	

	&apos;// update the AccumTot text box in the ST dialog
	oSTAccumTotFld = puoSTDialog.getControl(&quot;AccumTot&quot;)
	oSTAccumTotFld.Value = pdAccumTotal
	
NormalExit:
	STSetAccumTot = iStatus
	exit function
	
ErrorHandler:	
	iRetValue = -1
	GoTo NormalExit
end function		&apos;// end STSetAccumTot		6/18/20
&apos;/**/
&apos;// STSetObjFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STSetObjFocus - Set control name with focus inside object.
&apos;//		6/22/20.	wmk.	10:00
&apos;//---------------------------------------------------------------

public function STSetObjFocus(psControl As String) As Integer

&apos;//	Usage.	iVar = STSetObjFocus( sControl )
&apos;//
&apos;//		sControl = dialog control name with focus
&apos;//					(e.g. &quot;AmtFld1&quot;)
&apos;//
&apos;// Entry.	puoSTDialog = ST dialog object
&apos;//			puoSTDialog.&lt;HasFocusObject&gt;.Text = available
&apos;//
&apos;//	Exit.	iVar = 0 - control name stored in dialog
&apos;//				 &lt; 0 - error attempting to store active control namne
&apos;//			puoSTDialog.&lt;HasFocus-Object&gt;.Text = psControl
&apos;//
&apos;// Calls.	&lt;other subs/functions called&gt;
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/18/20.		wmk.	original code
&apos;//
&apos;//	Notes. STSetObjFocus should be called by any &lt;control&gt;Listener
&apos;//	event when the &lt;control&gt; gets focus. This will provide an easy
&apos;// way for a control to get its own name during processing. The
&apos;// STClrObjFocus function should be called when the &lt;control&gt; loses
&apos;// focus so other controls may reuse the dialog field &quot;HasFocus&quot;.
&apos;// A third method STGetObjFocus will retrieve the current &quot;HasFocus&quot;
&apos;// .Text field for use during the control processing.
&apos;//

&apos;//	constants.

&apos;//	local variables.
dim iRetValue As Any
dim oDlgControl		As Object		&apos;// dialog control
dim sFocusName		As String		&apos;// HasFocus text control field name

	&apos;// code.
	
	iRetValue = -1
	ON ERROR GOTO ErrorHandler
msgBox(&quot;In STSetObjFocus.. calling .getControl(..&quot;)
	oDlgControl = puoSTDialog.getControl(&quot;HasFocusFld&quot;)
msgBox(&quot;In STSetObjFocus back from .getControl on entry..&quot; + CHR(13)+CHR(10) _
+	&quot;stored name = &apos;&quot; + oDlgControl.Text + &quot;&apos;&quot;)
	sFocusName = oDlgControl.Text

&apos;	if Len(sFocusName) &gt; 0 then
&apos;		iRetValue = -2		&apos;// set busy flag
&apos;		GoTo ErrorHandler
&apos;	endif		&apos;// end HasFocus in use conditional

	oDlgControl.Text = psControl		&apos;// set control name
msgBox(&quot;In STSetObjFocus sFocusName = &apos;&quot; + psControl + &quot;&apos;&quot;)
	
	iRetValue = 0			&apos;// set normal return
	
NormalExit:	
	STSetObjFocus = iRetValue
	exit function

ErrorHandler:
	Select Case iRetValue
	Case -2
		msgBox(&quot;In STSetObjFocus - &apos;HasFocus&apos; field busy&quot;)
	Case else
		msgBox(&quot;In STSetObjFocus - unprocessed error&quot;)
	End Select
	
	GoTo NormalExit
	
end function 	&apos;// end STSetObjFocus	6/22/20
&apos;/**/
&apos;// STTotalAcctLostFocus.bas
&apos;//---------------------------------------------------------------
&apos;// STTotalAcctLostFocus - Handle TotalAcctFld LostFocus event.
&apos;//		6/27/20.	wmk.	11:15
&apos;//---------------------------------------------------------------

public sub STTotalAcctLostFocus()

&apos;//	Usage.	macro call or
&apos;//			call STTotalAcctLostFocus()
&apos;//
&apos;// Entry.	TotalAcctFld lost focus
&apos;//			gbSTSplitCredits = true if Debit is parent account
&apos;//							   false if Credit is parent acccount
&apos;//			puoSTDialog = ST dialog object
&apos;//
&apos;//	Exit.	if gbSTSplitCredits = true; gsETAcct1 = user input from field
&apos;//								false; gsETAcct2 = user input from field
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/27/20.	wmk.	original code


&apos;//	constants.

&apos;//	local variables.
dim iStatus			As Integer			&apos;// general status
dim oDlgCtrl		As Object			&apos;// dialog control

	&apos;// code.
	ON ERROR GOTO ErrorHandler
	&apos;// attempt to use generic handler
	gsSTObjFocus = &quot;TotalAcctFld&quot;	
	oDlgCtrl = puoSTDialog.getControl(gsSTObjFocus)
	if gbSTSplitCredits then
		gsETAcct1 = oDlgCtrl.Text
	else
		gsETAcct2 = oDlgCtrl.Text
	endif
	
NormalExit:
	exit sub
	
ErrorHandler:
	msgBox(&quot;In STTotalAcctLostFocus - unprocessed error&quot;)
	GoTo NormalExit
	
end sub		&apos;// end STTotalAcctLostFocus	6/27/20
&apos;/**/
&apos;// STUpdateAccumTot.bas
&apos;//---------------------------------------------------------------
&apos;// STUpdateAccumTot - Update accumulated split total.
&apos;//		7/7/20.	wmk.	12:00
&apos;//---------------------------------------------------------------

public function STUpdateAccumTot(psAmtFldName As String) As Integer

&apos;//	Usage.	iVar = STUpdateAccumTot( sAmtFldName )
&apos;//
&apos;// Parameters.	sAmtFldName dialog amount field name (e.g. &quot;AmtFld1&quot;)
&apos;//
&apos;// Entry.	This routine should be called on the &quot;LostFocus&quot; event
&apos;//			on any AmtFld in the dialog, with the fieldname passed
&apos;//			as the parameter.	
&apos;//			puoSTDialog = Split Transaction dialog object
&apos;//
&apos;//	Exit.	iVar = 0 - totals updated; limit not reached
&apos;//				   1 - totals updated; limit reached
&apos;//				 &lt; 0 - error updating totals
&apos;//			gdStAmts(i) = matching index i updated with new value from dialog
&apos;//			gdSTAccumTot = updated with any old value from array
&apos;//					subtracted and new value from dialog added
&apos;//			puoSTDialog.UnsplitTot.Value = updated with any old value
&apos;//					from array added and new value from dialog subtracted
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/19/20.	wmk.	original code
&apos;//	6/21/20.	wmk.	change to check split total met and return 1
&apos;//	7/7/20.		wmk.	change to string comparison to allow for values
&apos;//						equal except fractional cents; properly update
&apos;//						totals without exception; fix bug where storing string
&apos;//						into gdSTAmts array instead of value
&apos;//
&apos;//	Notes. The Accumulated total field is initialized to 0 at dialog
&apos;//	startup, then is updated whenever the user adds a split amount to
&apos;// any of the AmtFld1..AmtFld10 fields. STUpdateAccumTot should be
&apos;// called whenever an AmtFldn object changes; The dialog UnsplitTot
&apos;// field is also updated to hold the tracking
&apos;//iAmtFldIx = index of ST dialog AmtFld to add to
&apos;//			accumulator. If the amount field in the dialog has
&apos;//			been cleared, any current value in the psSTAmts array
&apos;//			will be subtracted from the accumulated total, the
&apos;//			new value from the dialog box will be both stored in 
&apos;//			the gsSTAmts array and added to the accumulated total.
&apos;//			Then the Accumulated Splits Total box will be updated
&apos;//			in the dialog objects.

&apos;//	constants.

&apos;//	local variables.
dim iRetValue 	As Integer		&apos;// returned value
dim iAmtFldIx	As Integer		&apos;// amounts array index
dim sAmtFld		As String		&apos;// amount field local name
dim oAmtFld		As Object		&apos;// amount field from dialog
dim oAccumTot	As Object		&apos;// accumulated total field
dim dUnsplit	As Double		&apos;// unsplit current amount

	&apos;// code.

	iRetValue = -1
	ON ERROR GOTO ErrorHandler
	sAmtFld = psAmtFldName		&apos;// get local copy of name
	
	&apos;// convert name to array index
	iAmtFldIx = STFld6ToIndex(sAmtFld)
	if iAmtFldIx &lt; 0 then
		GoTo ErrorHandler
	endif
	
	&apos;//	adjust both accumulators by old value
	gdSTAccumTot = gdSTAccumTot - gdSTAmts(iAmtFldIx)
	oAccumTot = puoSTDialog.getControl(&quot;UnsplitTot&quot;)
	dUnsplit = oAccumTot.Value
	oAccumTot.Value = dUnsplit + gdSTAmts(iAmtFldIx)
	
	
	&apos;// get new value from split transaction dialog and add
	&apos;// into accumulator
	oAmtFld = puoSTDialog.getControl(sAmtFld)
	gdSTAccumTot = gdSTAccumTot + oAmtFld.Value
	
	if gdSTAccumTot &gt; gdSTTotalAmt then
		if StrComp(Str(gdSTAccumTot),Str(gdSTTotalAmt))= 0 then
			gdSTAccumTot = gdSTTotalAmt
		else
			msgBox(&quot;Splits with new amount exceeds Total to split&quot;)
			iRetValue = 0
			GoTo NormalExit		&apos;// bail out without updating array or control
		endif
	endif
	
	&apos;// store new value in gdSTAmts array for this index
	gdStAmts(iAmtFldIx) = oAmtFld.Value
	
	&apos;// update transaction dialog Accumulated Splits and Unsplit field
	oAccumTot = puoSTDialog.getControl(&quot;AccumTot&quot;)
	oAccumTot.Value = gdSTAccumTot
	oAccumTot = puoSTDialog.getControl(&quot;UnsplitTot&quot;)
	dUnsplit = oAccumTot.Value
	oAccumTot.Value = dUnsplit - oAmtFld.Value
		
&apos;	if gdSTAccumTot = gdSTTotalAmt then
	if StrComp(Str(gdSTAccumTot),Str(gdSTTotalAmt))=0 then
		iRetValue = 1
	else
		iRetValue = 0
	endif	&apos;// end split total met conditional
	
NormalExit:
	STUpdateAccumTot = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;STUpdateAccumTot - unprocessed error.&quot;)
	GoTo NormalExit
	
end function		&apos;// end STUpdateAccumTot	7/7/20
&apos;/**/
&apos;// STUpdateCOAArray.bas
&apos;//---------------------------------------------------------------
&apos;// STUpdateCOAArray - Update public COAs array.
&apos;//		6/24/20.	wmk.	07:15
&apos;//---------------------------------------------------------------

public function STUpdateCOAArray(psFldName As String) As Integer

&apos;//	Usage.	iVar = STUpdateCOAArray( sFldName )
&apos;//
&apos;// 		sFldName dialog amount field name (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;// Entry.	This routine should be called on the &quot;LostFocus&quot; event
&apos;//			on any DescFldn in the dialog, with the fieldname passed
&apos;//			as the parameter.	
&apos;//			puoSTDialog = Split Transaction dialog object
&apos;//
&apos;//	Exit.	iVar = 0 - Desc array updated ok
&apos;//				 &lt; 0 - error updating Desc Array
&apos;//			gdSTCOAs(i) = matching index i updated with new string
&apos;//					 from dialog
&apos;//
&apos;// Calls.	STFld6ToIndex
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.	wmk.	original code; adapted from STUpdateDescArray
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iRetValue 	As Integer		&apos;// returned value
dim iDlgFldIx	As Integer		&apos;// amounts array index
dim sDlgFld		As String		&apos;// amount field local name
dim oDlgFld		As Object		&apos;// amount field from dialog

	&apos;// code.

	iRetValue = -1
	ON ERROR GOTO ErrorHandler
	sDlgFld = psFldName		&apos;// get local copy of name
	
	&apos;// convert name to array index
	iDlgFldIx = STFld6ToIndex(sDlgFld)
	if iDlgFldIx &lt; 0 then
		GoTo ErrorHandler
	endif
	
	&apos;// get new field dialog and store in array
	oDlgFld = puoSTDialog.getControl(sDlgFld)
	gdSTCOAs(iDlgFldIx) = oDlgFld.Text
	
	iRetValue = 0			&apos;// normal return
	
NormalExit:
	STUpdateCOAArrray = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;STUpdateCOAArray - unprocessed error.&quot;)
	GoTo NormalExit
	
end function		&apos;// end STUpdateCOAArray	6/24/20
&apos;/**/
&apos;// STUpdateDescArray.bas
&apos;//---------------------------------------------------------------
&apos;// STUpdateDescArray - Update public Descriptors array.
&apos;//		6/24/20.	wmk.	07:15
&apos;//---------------------------------------------------------------

public function STUpdateDescArray(psFldName As String) As Integer

&apos;//	Usage.	iVar = STUpdateDescArray( sFldName )
&apos;//
&apos;// 		sFldName dialog amount field name (e.g. &quot;DescFld1&quot;)
&apos;//
&apos;// Entry.	This routine should be called on the &quot;LostFocus&quot; event
&apos;//			on any DescFldn in the dialog, with the fieldname passed
&apos;//			as the parameter.	
&apos;//			puoSTDialog = Split Transaction dialog object
&apos;//
&apos;//	Exit.	iVar = 0 - Desc array updated ok
&apos;//				 &lt; 0 - error updating Desc array
&apos;//			gdSTDescs(i) = matching index i updated with new string
&apos;//					 from dialog
&apos;//
&apos;// Calls.	STFld7ToIndex
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.	wmk.	original code; adapted from STUpdateAccumTot
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iRetValue 	As Integer		&apos;// returned value
dim iDlgFldIx	As Integer		&apos;// amounts array index
dim sDlgFld		As String		&apos;// amount field local name
dim oDlgFld		As Object		&apos;// amount field from dialog

	&apos;// code.

	iRetValue = -1
	ON ERROR GOTO ErrorHandler
	sDlgFld = psFldName		&apos;// get local copy of name
	
	&apos;// convert name to array index
	iDlgFldIx = STFld7ToIndex(sDlgFld)
	if iDlgFldIx &lt; 0 then
		GoTo ErrorHandler
	endif
	
	&apos;// get new field dialog and store in array
	oDlgFld = puoSTDialog.getControl(sDlgFld)
	gdSTDescs(iDlgFldIx) = oDlgFld.Text
	
	iRetValue = 0			&apos;// normal return
	
NormalExit:
	STUpdateDescArrray = iRetValue
	exit function
	
ErrorHandler:
	msgBox(&quot;STUpdateDescArray - unprocessed error.&quot;)
	GoTo NormalExit
	
end function		&apos;// end STUpdateDescArray	6/24/20
&apos;/**/
&apos;// STUpdateRefArray.bas
&apos;//---------------------------------------------------------------
&apos;// STUpdateRefArray - Update public Reference array.
&apos;//		6/24/20.	wmk.	06:45
&apos;//---------------------------------------------------------------

public function STUpdateRefArray(psFldName As String) As Integer

&apos;//	Usage.	iVar = STUpdateRefArray( sFldName )
&apos;//
&apos;// 		sFldName dialog amount field name (e.g. &quot;RefFld1&quot;)
&apos;//
&apos;// Entry.	This routine should be called on the &quot;LostFocus&quot; event
&apos;//			on any REfFldn in the dialog, with the fieldname passed
&apos;//			as the parameter.	
&apos;//			puoSTDialog = Split Transaction dialog object
&apos;//
&apos;//	Exit.	iVar = 0 - Ref array updated ok
&apos;//				 &lt; 0 - error updating Ref Array
&apos;//			gsSTRefs(i) = matching index i updated with new string
&apos;//					 from dialog
&apos;//
&apos;// Calls.	STFld7ToIndex
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/24/20.	wmk.	original code; adapted from STUpdateDescArray
&apos;//
&apos;//	Notes.

&apos;//	constants.

&apos;//	local variables.
dim iRetValue 	As Integer		&apos;// returned value
dim iDlgFldIx	As Integer		&apos;// amounts array index
dim sDlgFld		As String		&apos;// amount field local name
dim oDlgFld		As Object		&apos;// amount field from dialog

	&apos;// code.
&apos;//WARNING: IT APPEARS THAT THE STACK GETS MESSED UP WHEN GOING 2 LEVELS
&apos;// DOWN IN AN EVENT HANDLER... THIS ROUTINE WILL REMAIN IN PLACE, BUT
&apos;// CANNOT BE CALLED DOWNSTREAM BY &quot;LOSTFOCUS&quot; EVENT HANDLING...
&apos;// Experiment with making this a parameterless function and see if the
&apos;// situation improves...

	iRetValue = -1
	ON ERROR GOTO ErrorHandler
	sDlgFld = psFldName		&apos;// get local copy of name
msgBox(&quot;In STUpdateRefArray.. psFldName = &apos;&quot; + psFldName + &quot;&apos;&quot; + CHR(13)+CHR(10) _
+	&quot;sDlgFld = &apos;&quot; + sDlgFld + &quot;&apos;&quot;)	
	&apos;// convert name to array index
	iDlgFldIx = STFld6ToIndex(sDlgFld)
msgBox(&quot;.. iDlgFldIx = &quot; + iDlgFldIx + &quot;&apos;&quot;)	
	if iDlgFldIx &lt; 0 then
		GoTo ErrorHandler
	endif
	
	&apos;// get new field dialog and store in array

msgBox(&quot;.. invoking .getControl&quot;)	
	
	oDlgFld = puoSTDialog.getControl(sDlgFld)
msgBox(&quot;.. back from .getControl&quot;)	
	
	gsSTRefs(iDlgFldIx) = oDlgFld.Text
msgBox(&quot;.. gsSTRefs() value stored&quot;)	
	
	iRetValue = 0			&apos;// normal return
	GoTo NormalExit
	
ErrorHandler:
	msgBox(&quot;STUpdateRefArray - unprocessed error.&quot;)

NormalExit:
msgBox(&quot;Exiting STUpdateRefArray; iRetValue = &quot; + iRetValue)
	STUpdateRefArrray = iRetValue
	
end function		&apos;// end STUpdateRefArray	6/24/20
&apos;/**/
&apos;// VSDoneBtnRun.bas
&apos;//---------------------------------------------------------------------
&apos;// VSDoneBtnRun - Event handler &lt;Done&gt; from View Split.
&apos;//		6/27/20.	wmk.	17:00
&apos;//---------------------------------------------------------------------

public sub VSDoneBtnRun()

&apos;//	Usage.	macro call or
&apos;//			call VSDoneBtnRun()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user clicked the [Record &amp;&apos; Finish] button in ET dialog
&apos;//			puoETDialog = Enter Transaction dialog object
&apos;//
&apos;//	Exit.	Transaction data recorded in GL sheet at user selection
&apos;//			Transaction data in public vars cleared
&apos;//			ET dialog ended with flag = 2 (user closed)
&apos;//
&apos;// Calls.	ETDialogRecord, ETPubVarsReset
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/27/20.	wmk.	original code
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;Done&gt; cmd button in the View Split  dialog.

&apos;//	constants.

&apos;//	local variables.
dim oVSDoneBtn	As Object		&apos;// Record &amp;&apos; Finish button
dim iStatus 		As Integer		&apos;// general status

	&apos;// code.
	ON ERROR GoTo ErrorHandler

NormalExit:
	puoVSDialog.endDialog(0)		&apos;// end dialog; same as Cancel
	exit sub
	
ErrorHandler:
	msgBox(&quot;VSDoneBtnRun - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end VSDoneBtnRun	6/17/20
&apos;/**/
&apos;// VSEditSplitBtnRun.bas
&apos;//---------------------------------------------------------------------
&apos;// VSEditSplitBtnRun - Event handler &lt;Done&gt; from View Split.
&apos;//		6/27/20.	wmk.	17:00
&apos;//---------------------------------------------------------------------

public sub VSEditSplitBtnRun()

&apos;//	Usage.	macro call or
&apos;//			call VSEditSplitBtnRun()
&apos;//
&apos;// Entry.	normal entry from event handler for dialogue where
&apos;//			user clicked the &lt;Edit Split&gt; button in VS dialog
&apos;//			puoVSDialog = View Transaction dialog object
&apos;//
&apos;//	Exit.	VS dialog ended with flag = 2 (Edit Split)
&apos;//
&apos;// Calls.
&apos;//
&apos;//	Modification history.
&apos;//	---------------------
&apos;//	6/27/20.	wmk.	original code
&apos;//
&apos;//	Notes. This sub is the linked macro to the changed status event linked
&apos;// to the &lt;Edit Split&gt; cmd button in the View Split  dialog.

&apos;//	constants.

&apos;//	local variables.

	&apos;// code.
	ON ERROR GoTo ErrorHandler
	gbSTEditMode = true				&apos;// set ST edit mode flag
	
NormalExit:
	puoVSDialog.endDialog(2)		&apos;// end dialog; same as Cancel
	exit sub
	
ErrorHandler:
	msgBox(&quot;VSEditSplitBtnRun - unprocessed error.&quot;)
	GoTo NormalExit
	
end sub		&apos;// end VSEditSplitBtnRun	6/27/20
&apos;/**/
</script:module>
